<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>uni-app-note</title>
      <link href="/2023/09/22/uni-app/uni-app-note/"/>
      <url>/2023/09/22/uni-app/uni-app-note/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><blockquote><p>统一规则 -&gt; 多端转义</p></blockquote><h2 id="逻辑层和渲染层分离"><a href="#逻辑层和渲染层分离" class="headerlink" title="逻辑层和渲染层分离"></a>逻辑层和渲染层分离</h2><p>原生：js、css、html -&gt; webview -&gt; render -&gt; web，加载渲染相互阻塞，抢占资源，性能差。</p><p>小程序、app：逻辑层单独配置 js 引擎，渲染层仍是 webview。</p><blockquote><p>注意小程序和 app 的逻辑层都不支持浏览器专用的 window、dom 等 API。app 只能在渲染层操作 window、dom，即 renderjs。</p></blockquote><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">┌─uniCloud              云空间目录，阿里云为uniCloud-aliyun,腾讯云为uniCloud-tcb（详见uniCloud）</span><br><span class="line">│─components            符合vue组件规范的uni-app组件目录*</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─utssdk                存放uts文件</span><br><span class="line">├─pages                 业务页面文件存放的目录*</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此*</span><br><span class="line">├─uni_modules           存放[uni_module](/uni_modules)*</span><br><span class="line">├─platforms             存放各平台专用页面的目录，详见</span><br><span class="line">├─nativeplugins         App原生语言插件</span><br><span class="line">├─nativeResources       App端原生资源目录</span><br><span class="line">│  ├─android            Android原生资源目录</span><br><span class="line">|  └─ios                iOS原生资源目录</span><br><span class="line">├─hybrid                App端存放本地html文件的目录，详见</span><br><span class="line">|-windows               拓展窗口：leftWindow、topWindow、rightWindow</span><br><span class="line">├─wxcomponents          存放小程序组件的目录，详见</span><br><span class="line">├─unpackage             非工程代码，一般存放运行或发行的编译结果</span><br><span class="line">├─AndroidManifest.xml   Android原生应用清单文件</span><br><span class="line">├─Info.plist            iOS原生应用配置文件</span><br><span class="line">├─main.js               Vue初始化入口文件*</span><br><span class="line">├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期*</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息，详见*</span><br><span class="line">├─pages.json            配置页面路由、导航条、选项卡等页面类信息，详见*</span><br><span class="line">└─uni.scss              这里是uni-app内置的常用样式变量*</span><br></pre></td></tr></table></figure><blockquote><p>static 目录下文件会直接复制到打包目录，不会进行编译处理，除非被引用。</p></blockquote><h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><h2 id="页面加载时序"><a href="#页面加载时序" class="headerlink" title="页面加载时序"></a>页面加载时序</h2><p>uni-app -&gt; pages.json -&gt; template -&gt; vnode -&gt; onLoad(data) -&gt; [start animation] -&gt; [vnode to dom] -&gt; onReady -&gt; [end animation]</p><h2 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h2><p>onShow、onHide：进入、离开，重复触发。</p><p>onReachBottom：触底事件（pages.json -&gt; onReachBottomDistance）。</p><p>onPageScroll：滚动事件 <code>(&#123;scrollTop&#125;) =&gt; void</code>。</p><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><p>原 Vue 生命周期，beforeUpdate、updated 仅 H5 页面支持</p><h2 id="页面通信"><a href="#页面通信" class="headerlink" title="页面通信"></a>页面通信</h2><p><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#%E9%A1%B5%E9%9D%A2%E9%80%9A%E8%AE%AF">同 Vue 自定义事件</a>。</p><p><a href="https://uniapp.dcloud.net.cn/api/window/communication.html">页面通信 API</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleUpdate</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">msg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uni.$emit(<span class="string">&quot;update&quot;</span>, &#123; <span class="attr">msg</span>: <span class="string">&quot;页面更新&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">uni.$on(<span class="string">&quot;update&quot;</span>, handleUpdate);</span><br><span class="line"></span><br><span class="line">uni.$once(<span class="string">&quot;update&quot;</span>, handleUpdate);</span><br><span class="line"></span><br><span class="line">uni.$off(<span class="string">&quot;update&quot;</span>, <span class="variable language_">this</span>.<span class="property">update</span>);</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><a href="https://uniapp.dcloud.net.cn/collocation/pages#pages">pages.json</a> 中配置。</p><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><p>跳转方式：<a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a>、<a href="https://uniapp.dcloud.net.cn/api/router">API</a>。</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>尺寸单位：rpx。</p><p>内联样式：多为动态样式，静态样式通过 class 形式编写，避免内联静态样式影响渲染。</p><p><code>::after ::before</code>：仅在 Vue 页面生效。</p><p>uni-app 提供内置 css 变量：</p><table><thead><tr><th>CSS 变量</th><th>描述</th><th>App</th><th>小程序</th><th>H5</th></tr></thead><tbody><tr><td>–status-bar-height</td><td>系统状态栏高度</td><td>系统状态栏高度、nvue 注意见下</td><td>25px</td><td>0</td></tr><tr><td>–window-top</td><td>内容区域距离顶部的距离</td><td>0</td><td>0</td><td>NavigationBar 的高度</td></tr><tr><td>–window-bottom</td><td>内容区域距离底部的距离</td><td>0</td><td>0</td><td>TabBar 的高度</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li><p>uni-app 中不能使用 * 。</p></li><li><p>body -&gt; page || div、ul、li -&gt; view || span、font -&gt; text、a -&gt; navigator、img -&gt; image。</p></li><li><p>NavigationBar 导航栏高度固定 44px（不可更改）。</p></li><li><p>TabBar 底部选项卡高度固定 50px。</p></li><li><p>100vh 包含导航栏的高度，使用时需要减去导航栏和 tabBar 高度，部分浏览器还包含浏览器操作栏高度，使用时请注意。</p></li><li><p>本地背景图片的引用路径推荐使用以 ~@ 开头的绝对路径。</p></li><li><p>微信小程序仅支持 class 选择器。</p></li><li><p>小程序不支持在 css 中引用文件，包括图片和字体，需要转为 base64 使用。</p></li><li><p>微信小程序不支持相对路径。</p></li><li><p>小程序和 H5 正常，但 APP 异常，通常是 css 兼容性问题。（小程序不存在浏览器兼容问题，其内置很大的定制 webview）</p></li><li><p>各家小程序浏览器内核不同，可能存在 css 兼容性问题，<a href="https://ask.dcloud.net.cn/article/1318">细节参考</a>。</p></li></ol><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><ol><li><p>原生组件层级问题 H5 没有原生组件概念问题，非 H5 端有原生组件并引发了原生组件层级高于前端组件的概念，要遮挡 video、map 等原生组件，请使用 cover-view 组件。</p></li><li><p>非 H5 端不支持 API：document、cookie、window、location、navigator、localstorage、websql、indexdb、webgl 等对象。</p></li><li><p>APP 端通过 renderJS 操作 window、document 库。</p></li></ol><blockquote><p>小程序和 App 的 js 运行在 jscore 下而不是浏览器里，没有浏览器专用的 js 对象。若三方库中使用到这些 API 需要在插件市场寻找替代品。<br>APP 端可在 <a href="https://uniapp.dcloud.io/tutorial/renderjs">renderJS</a> 中操作浏览器对象。</p></blockquote><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="getApp"><a href="#getApp" class="headerlink" title="getApp()"></a>getApp()</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">getApp</span>: &lt;<span class="title class_">AnyObject</span>&gt;<span class="function">(<span class="params">opts?: App.GetAppOption</span>) =&gt;</span> <span class="title class_">App</span>.<span class="property">AppInstance</span>&lt;<span class="title class_">AnyObject</span>&gt; &amp; <span class="title class_">AnyObject</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AppInstance</span>&lt;T <span class="keyword">extends</span> <span class="title class_">AnyObject</span> = &#123;&#125;&gt; &#123;</span><br><span class="line">  globalData?: <span class="title class_">AnyObject</span>;</span><br><span class="line">  onLaunch?(options?: <span class="title class_">LaunchShowOption</span>): <span class="built_in">void</span>;</span><br><span class="line">  onShow?(options?: <span class="title class_">LaunchShowOption</span>): <span class="built_in">void</span>;</span><br><span class="line">  onHide?(): <span class="built_in">void</span>;</span><br><span class="line">  onError?(<span class="attr">error</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">  onPageNotFound?(<span class="attr">options</span>: <span class="title class_">PageNotFoundOption</span>): <span class="built_in">void</span>;</span><br><span class="line">  onUnhandledRejection?(<span class="attr">options</span>: <span class="title class_">UniNamespace</span>.<span class="property">OnUnhandledRejectionCallbackResult</span>): <span class="built_in">void</span>;</span><br><span class="line">  onThemeChange?(<span class="attr">options</span>: <span class="title class_">UniNamespace</span>.<span class="property">OnThemeChangeCallbackResult</span>): <span class="built_in">void</span>;</span><br><span class="line">  onUniNViewMessage?(<span class="attr">options</span>: <span class="title class_">AnyObject</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于获取当前应用实例，一般用于获取 globalData，全局数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">getApp</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(app.<span class="property">globalData</span>);</span><br><span class="line">app.<span class="title function_">doSomething</span>(); <span class="comment">// 调用 App.vue methods 中的 doSomething 方法</span></span><br></pre></td></tr></table></figure><p>globalData 原本是小程序中的概念，uni-app 引入后在 H5、APP 等平台都实现了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  globalData: &#123;</span><br><span class="line">    text: &quot;text&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/*每个页面公共css */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="getCurrentPages"><a href="#getCurrentPages" class="headerlink" title="getCurrentPages()"></a>getCurrentPages()</h2><p><code>getCurrentPages: &lt;&#123;&#125;&gt;() =&gt; Page.PageInstance&lt;AnyObject, &#123;&#125;&gt;[]</code></p><p><code>instance: &#123;route?: string, $getAppWebview?:  () =&gt; PlusWebviewWebviewObject,$vm?: any;&#125;</code></p><p>用于获取当前页面栈的实例，以数组形式按栈的顺序给出，数组中的元素为页面实例，第一个元素为首页，最后一个元素为当前页面。</p><h2 id="getAppWebview"><a href="#getAppWebview" class="headerlink" title="$getAppWebview()"></a>$getAppWebview()</h2><p>在 getCurrentPages()获得的页面里内置了一个方法 $getAppWebview() 可以得到当前 webview 的对象实例，从而实现对 webview 更强大的控制，可参考：<a href="http://www.html5plus.org/doc/zh_cn/webview.html#plus.webview.WebviewObject">WebviewObject</a></p><p><strong>此方法仅 App 支持</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pages = <span class="title function_">getCurrentPages</span>();</span><br><span class="line"><span class="keyword">var</span> page = pages[pages.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// #ifdef APP-PLUS</span></span><br><span class="line"><span class="keyword">var</span> currentWebview = page.$getAppWebview();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currentWebview.<span class="property">id</span>); <span class="comment">//获得当前webview的id</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currentWebview.<span class="title function_">isVisible</span>()); <span class="comment">//查询当前webview是否可见</span></span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li><p><a href="https://ask.dcloud.net.cn/article/36174">H5(Vue) 转 uni-app</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/tutorial/migration-to-vue3.html">Vu2 转 Vue3</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#lifecycle">页面生命周期</a></p></li><li><p><a href="https://ask.dcloud.net.cn/article/35489">UI 组件库</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/component/">uni-app组件</a></p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#pagefaq">页面加载常见问题</a></li></ol><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><ol><li><p><a href="https://ask.dcloud.net.cn/article/34921">导航栏开发指南</a></p></li><li><p><a href="https://ext.dcloud.net.cn/plugin?id=1765">导航栏示例</a></p></li></ol><h2 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h2><ol><li><p><a href="https://ask.dcloud.net.cn/article/35021">全局数据流方案</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/tutorial/page.html#%E9%A1%B5%E9%9D%A2%E9%80%9A%E8%AE%AF">页面通信方案</a>。</p></li><li><p><a href="https://uniapp.dcloud.net.cn/api/window/communication.html">页面通信 API</a></p></li><li><p><a href="https://ask.dcloud.net.cn/article/1318">小程序浏览器内核细节参考</a>。</p></li></ol><h2 id="API-文档"><a href="#API-文档" class="headerlink" title="API 文档"></a>API 文档</h2><ol><li><p><a href="https://uniapp.dcloud.net.cn/collocation/pages#pages">pages.json</a> 中配置。</p></li><li><p><a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a></p></li><li><p><a href="https://uniapp.dcloud.net.cn/api/router">API</a></p></li><li><p><a href="https://uniapp.dcloud.io/tutorial/renderjs">renderJS</a></p></li><li><p><a href="http://www.html5plus.org/doc/zh_cn/webview.html#plus.webview.WebviewObject">WebviewObject</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UmiJS-v4</title>
      <link href="/2023/08/02/React/Umi/"/>
      <url>/2023/08/02/React/Umi/</url>
      
        <content type="html"><![CDATA[<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p><a href="https://umijs.org/docs/api/api">API</a></p><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>设计思路包括:</p><ol><li><p>技术收敛</p></li><li><p>插件和插件集</p></li><li><p>import all in umi</p></li><li><p>编译时框架</p></li><li><p>依赖预打包</p></li><li><p>默认快</p></li><li><p>约束与开放</p></li></ol><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NDgyODI4MQ==&mid=2247484533&idx=1&sn=9b15a67b88ebc95476fce1798eb49146">4-7 详见</a></p><h2 id="技术收敛"><a href="#技术收敛" class="headerlink" title="技术收敛"></a>技术收敛</h2><ol><li><p>术栈收敛</p></li><li><p>依赖收敛</p></li></ol><p><img src="https://img.alicdn.com/tfs/TB1hE8ywrr1gK0jSZFDXXb9yVXa-1227-620.png"></p><h2 id="插件和插件集"><a href="#插件和插件集" class="headerlink" title="插件和插件集"></a>插件和插件集</h2><p>拓展一类业务，而不仅仅是拓展某一功能。</p><p><img src="https://img.alicdn.com/tfs/TB1mrhuwqL7gK0jSZFBXXXZZpXa-956-728.png"></p><h2 id="import-all-in-umi"><a href="#import-all-in-umi" class="headerlink" title="import all in umi"></a>import all in umi</h2><p>所有的导入都从 umi 中进行导出，减少 import 数量。</p><p><code>import &#123; connect, useModel, useIntl, useRequest, MicroApp, ... &#125; from &#39;umi&#39;;</code></p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   └── config.ts</span><br><span class="line">├── dist</span><br><span class="line">├── mock</span><br><span class="line">│   └── app.ts｜tsx</span><br><span class="line">├── src</span><br><span class="line">│   ├── .umi</span><br><span class="line">│   ├── .umi-production</span><br><span class="line">│   ├── layouts</span><br><span class="line">│   │   ├── BasicLayout.tsx</span><br><span class="line">│   │   ├── index.less</span><br><span class="line">│   ├── models</span><br><span class="line">│   │   ├── global.ts</span><br><span class="line">│   │   └── index.ts</span><br><span class="line">│   ├── pages</span><br><span class="line">│   │   ├── index.less</span><br><span class="line">│   │   └── index.tsx</span><br><span class="line">│   ├── utils // 推荐目录</span><br><span class="line">│   │   └── index.ts</span><br><span class="line">│   ├── services // 推荐目录</span><br><span class="line">│   │   └── api.ts</span><br><span class="line">│   ├── app.(ts|tsx)</span><br><span class="line">│   ├── global.ts</span><br><span class="line">│   ├── global.(css|less|sass|scss)</span><br><span class="line">│   ├── overrides.(css|less|sass|scss)</span><br><span class="line">│   ├── favicon.(ico|gif|png|jpg|jpeg|svg|avif|webp)</span><br><span class="line">│   └── loading.(tsx|jsx)</span><br><span class="line">├── node_modules</span><br><span class="line">│   └── .cache</span><br><span class="line">│       ├── bundler-webpack</span><br><span class="line">│       ├── mfsu</span><br><span class="line">│       └── mfsu-deps</span><br><span class="line">├── .<span class="built_in">env</span></span><br><span class="line">├── plugin.ts</span><br><span class="line">├── .umirc.ts // 与 config/config 文件 2 选一</span><br><span class="line">├── package.json</span><br><span class="line">├── tsconfig.json</span><br><span class="line">└── typings.d.ts</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="配置式路由"><a href="#配置式路由" class="headerlink" title="配置式路由"></a>配置式路由</h2><p>同 Vue-Router 路由配置基本一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** .umirc.ts or config/config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">/** 嵌套路由 &amp; layout */</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&quot;@/layouts/index&quot;</span>,</span><br><span class="line">      <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/list&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;list&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&quot;/admin&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;admin&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/** redirect */</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/err&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/list&quot;</span> &#125;,</span><br><span class="line">    <span class="comment">/** wrapper */</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">wrappers</span>: [<span class="string">&quot;@/wrappers/auth&quot;</span>] &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** src/wrappers/auth */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span>, <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isLogin &#125; = <span class="title function_">useAuth</span>();</span><br><span class="line">  <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>wrappers 中的每个组件会给当前的路由组件增加一层嵌套路由，如果你希望路由结构不发生变化，推荐使用高阶组件。先在高阶组件中实现 wrapper 中的逻辑，然后使用该高阶组件装饰对应的路由组件。</p></blockquote><h2 id="约定式路由"><a href="#约定式路由" class="headerlink" title="约定式路由"></a>约定式路由</h2><p>通过文件目录的结构生成路由表。</p><p>比如以下文件结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">  └── pages</span><br><span class="line">    ├── index.tsx</span><br><span class="line">    └── users.tsx</span><br></pre></td></tr></table></figure><p>会得到以下路由配置，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/index&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/users&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>约定，带 $ 前缀的目录或文件为动态路由。若 $ 后不指定参数名，则代表 * 通配，比如以下目录结构：</p><ol><li><p>src&#x2F;pages&#x2F;users&#x2F;$id.tsx 会成为 &#x2F;users&#x2F;:id</p></li><li><p>src&#x2F;pages&#x2F;users&#x2F;$id&#x2F;settings.tsx 会成为 &#x2F;users&#x2F;:id&#x2F;settings</p></li></ol><p>举个完整的例子，比如以下文件结构，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ pages/</span><br><span class="line">  + foo/</span><br><span class="line">    - <span class="variable">$slug</span>.tsx</span><br><span class="line">  + <span class="variable">$bar</span>/</span><br><span class="line">    - $.tsx</span><br><span class="line">  - index.tsx</span><br></pre></td></tr></table></figure><p>会生成路由配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/index.tsx&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/foo/:slug&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/foo/$slug.tsx&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:bar/*&quot;</span>, <span class="attr">component</span>: <span class="string">&quot;@/pages/$bar/$.tsx&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>和 history 相关的操作，用于获取当前路由信息、执行路由跳转、监听路由变更。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; history &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line">history.<span class="title function_">push</span>(<span class="string">&quot;/list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** string */</span></span><br><span class="line">history.<span class="title function_">push</span>(<span class="string">&quot;/list?a=b&amp;c=d#anchor&quot;</span>, state);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** object */</span></span><br><span class="line">history.<span class="title function_">push</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">pathname</span>: <span class="string">&quot;/list&quot;</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="string">&quot;?a=b&amp;c=d&quot;</span>,</span><br><span class="line">    <span class="attr">hash</span>: <span class="string">&quot;anchor&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** historyState */</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">some</span>: <span class="string">&quot;state-data&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">history.<span class="title function_">push</span>(&#123;&#125;, state);</span><br><span class="line"></span><br><span class="line">history.<span class="title function_">back</span>();</span><br><span class="line">history.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：history.push 和 history.replace 需要使用 state 需将 state 作为这两个 API 的第二个参数传递</p></blockquote><h3 id="Link-组件跳转"><a href="#Link-组件跳转" class="headerlink" title="Link 组件跳转"></a>Link 组件跳转</h3><p><code>&lt;Link&gt;</code> 是 React 组件，是带路由跳转功能的 <code>&lt;a&gt;</code> 元素。</p><p>类型定义如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">Link</span>(<span class="params">props: &#123;</span></span><br><span class="line"><span class="params">  /** 预加载 */</span></span><br><span class="line"><span class="params">  prefetch?: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  to: <span class="built_in">string</span> | Partial&lt;&#123; pathname: <span class="built_in">string</span>; search: <span class="built_in">string</span>; hash: <span class="built_in">string</span> &#125;&gt;;</span></span><br><span class="line"><span class="params">  replace?: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  state?: <span class="built_in">any</span>;</span></span><br><span class="line"><span class="params">  /** &lt;Link&gt; -&gt; &lt;a&gt; */</span></span><br><span class="line"><span class="params">  reloadDocument?: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">&#125;</span>): <span class="title class_">React</span>.<span class="property">ReactElement</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IndexPage</span>(<span class="params">&#123; user &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由参数获取"><a href="#路由参数获取" class="headerlink" title="路由参数获取"></a>路由参数获取</h2><p>路由相关参数有：routeMatch、location、params、query。</p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p><code>useMatch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> match = <span class="title function_">useMatch</span>(<span class="string">&#x27;/comp/:id&#x27;</span>)</span><br><span class="line"><span class="comment">// match</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;paramId&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;pathname&quot;</span>: <span class="string">&quot;/comp/paramId/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pathnameBase&quot;</span>: <span class="string">&quot;/comp/paramId&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/comp/:id&quot;</span>,</span><br><span class="line">  <span class="string">&quot;caseSensitive&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;end&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p><code>useLocation</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line"><span class="comment">// location</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;pathname&quot;</span>: <span class="string">&quot;/path/&quot;</span>,</span><br><span class="line"><span class="string">&quot;search&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;hash&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;state&quot;</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="string">&quot;key&quot;</span>: <span class="string">&quot;default&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>🚨<br>推荐使用 useLocation, 而不是直接访问 history.location. 两者的区别是 pathname 的部分。 history.location.pathname 是完整的浏览器的路径名；而 useLocation 中返回的 pathname 是相对项目配置的 base 的路径。</p><p>举例：项目如果配置 base: ‘&#x2F;testbase’, 当前浏览器地址为 <a href="https://localhost:8000/testbase/page/apple">https://localhost:8000/testbase/page/apple</a></p><p>history.location.pathname 为 &#x2F;testbase&#x2F;page&#x2F;apple</p><p>useLocation().pathname 为 &#x2F;page&#x2F;apple</p></blockquote><h3 id="Params"><a href="#Params" class="headerlink" title="Params"></a>Params</h3><p><code>useParams</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由配置 /comp/:id</span></span><br><span class="line"><span class="comment">// 当前 location /comp/paramId</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// params</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="string">&quot;paramId&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><p><code>useSearchParams</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前 location /comp?a=b;</span></span><br><span class="line"><span class="keyword">const</span> [searchParams, setSearchParams] = <span class="title function_">useSearchParams</span>();</span><br><span class="line">searchParams.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// b</span></span><br><span class="line">searchParams.<span class="title function_">toString</span>() <span class="comment">// a=b</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setSearchParams</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;c&#x27;</span>,<span class="attr">d</span>:<span class="string">&#x27;e&#x27;</span>&#125;) <span class="comment">// location 变成 /comp?a=c&amp;d=e</span></span><br><span class="line">searchParams 的 api 参考</span><br></pre></td></tr></table></figure><h1 id="Mock"><a href="#Mock" class="headerlink" title="Mock"></a>Mock</h1><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./mock/users.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 返回值可以是数组形式 GET 默认可以省略</span></span><br><span class="line">  <span class="string">&quot;GET /api/users&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;bar&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回值也可以是对象形式</span></span><br><span class="line">  <span class="string">&quot;GET /api/users/1&quot;</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span> &#125;,</span><br><span class="line">  <span class="string">&quot;POST /api/users&quot;</span>: &#123; <span class="attr">result</span>: <span class="string">&quot;true&quot;</span> &#125;,</span><br><span class="line">  <span class="string">&quot;PUT /api/users/1&quot;</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;new-foo&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>defineMock</code> 开启 ts 提示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineMock &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineMock</span>(&#123;</span><br><span class="line">  <span class="string">&quot;/api/users&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;bar&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;/api/users/1&quot;</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span> &#125;,</span><br><span class="line">  <span class="string">&quot;GET /api/users/2&quot;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;bar&quot;</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>引入 Mock.js 生成数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mockjs <span class="keyword">from</span> <span class="string">&quot;mockjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 mockjs 等三方库</span></span><br><span class="line">  <span class="string">&quot;GET /api/tags&quot;</span>: mockjs.<span class="title function_">mock</span>(&#123;</span><br><span class="line">    <span class="string">&quot;list|100&quot;</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;@city&quot;</span>, <span class="string">&quot;value|1-100&quot;</span>: <span class="number">50</span>, <span class="string">&quot;type|0-2&quot;</span>: <span class="number">1</span> &#125;],</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>同 vite 一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;http://jsonplaceholder.typicode.com/&quot;</span>,</span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="数据预加载"><a href="#数据预加载" class="headerlink" title="数据预加载"></a>数据预加载</h1><p>Umi 会自动根据当前路由或准备跳转的路由，并行地发起他们的数据请求，因此当路由组件加载完成后，已经有马上可以使用的数据了。</p><p>配置开启：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** .umirc.ts */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">clientLoader</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用方式:</p><p>在路由文件中，除了默认导出的页面组件外，再导出一个 clientLoader 函数，并且在该函数内完成路由数据加载的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** pages/.../some_page.tsx */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useClientLoaderData &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SomePage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useClientLoaderData</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">clientLoader</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/api/data&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="微生成器"><a href="#微生成器" class="headerlink" title="微生成器"></a>微生成器</h1><p>Umi 中内置了众多微生成器，协助你在开发中快速的完成一些繁琐的工作。</p><ol><li><p>页面生成器</p></li><li><p>组件生成器</p></li><li><p>RouteAPI 生成器</p></li><li><p>Mock 生成器</p></li><li><p>Prettier 配置生成器</p></li><li><p>Jest 配置生成器</p></li><li><p>Tailwind CSS 配置生成器</p></li><li><p>DvaJS 配置生成器</p></li><li><p>Precommit 配置生成器</p></li></ol><h1 id="Umi-Max"><a href="#Umi-Max" class="headerlink" title="Umi Max"></a>Umi Max</h1><p>Umi Pro，内置很多插件。</p><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>集成 Ant Design 的 Layout（ProLayout）。</p><h3 id="启用方式"><a href="#启用方式" class="headerlink" title="启用方式"></a>启用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** config/config.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">layout</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;your app title&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="构建时配置"><a href="#构建时配置" class="headerlink" title="构建时配置"></a>构建时配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** config/config.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">layout</span>: &#123;</span><br><span class="line">    <span class="comment">/** 显示在布局左上角的产品名，默认值为包名。 */</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Ant Design&quot;</span>,</span><br><span class="line">    <span class="comment">/** 是否开始国际化配置。 */</span></span><br><span class="line">    <span class="attr">locale</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="运行时配置"><a href="#运行时配置" class="headerlink" title="运行时配置"></a>运行时配置</h3><p>运行时配置写在 <code>src/app.tsx</code> 中，key 为 <code>layout</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RunTimeLayoutConfig</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@umijs/max&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">layout</span>: <span class="title class_">RunTimeLayoutConfig</span> = <span class="function">(<span class="params">initialState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/** 显示在布局左上角的产品名，默认值为包名 */</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Ant Design&quot;</span>,</span><br><span class="line">    <span class="comment">/** 显示在布局左上角产品名前的产品 Logo */</span></span><br><span class="line">    <span class="attr">logo</span>: <span class="string">&quot;https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg&quot;</span>,</span><br><span class="line">    <span class="comment">/** 用于运行时配置默认 Layout 的 UI 中，点击退出登录的处理逻辑，默认不做处理 */</span></span><br><span class="line">    <span class="attr">logout</span>: <span class="function">(<span class="params">initialState: <span class="built_in">any</span></span>) =&gt;</span> &#123;&#125;</span><br><span class="line">    <span class="comment">/** 发生错误后的回调（可做一些错误日志上报，打点等） */</span></span><br><span class="line">    <span class="attr">onError</span>: <span class="function">(<span class="params">error: <span class="built_in">Error</span>, info: <span class="built_in">any</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">    <span class="comment">/** 发生错误后展示的组件 */</span></span><br><span class="line">    <span class="title class_">ErrorComponent</span>: <span class="function">(<span class="params">error: <span class="built_in">Error</span></span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactElement</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他属性见：https://procomponents.ant.design/components/layout#prolayout</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="拓展路由配置"><a href="#拓展路由配置" class="headerlink" title="拓展路由配置"></a>拓展路由配置</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config/route.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">IBestAFSRoute</span>[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/welcome&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;IndexPage&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;欢迎&quot;</span>, <span class="comment">// 兼容此写法</span></span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&quot;testicon&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更多功能查看</span></span><br><span class="line">    <span class="comment">// https://beta-pro.ant.design/docs/advanced-menu</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新页面打开</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;_blank&quot;</span>,</span><br><span class="line">    <span class="comment">// 不展示顶栏</span></span><br><span class="line">    <span class="attr">headerRender</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不展示页脚</span></span><br><span class="line">    <span class="attr">footerRender</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不展示菜单</span></span><br><span class="line">    <span class="attr">menuRender</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不展示菜单顶栏</span></span><br><span class="line">    <span class="attr">menuHeaderRender</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 权限配置，需要与 plugin-access 插件配合使用</span></span><br><span class="line">    <span class="attr">access</span>: <span class="string">&quot;canRead&quot;</span>,</span><br><span class="line">    <span class="comment">// 隐藏子菜单</span></span><br><span class="line">    <span class="attr">hideChildrenInMenu</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 隐藏自己和子菜单</span></span><br><span class="line">    <span class="attr">hideInMenu</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 在面包屑中隐藏</span></span><br><span class="line">    <span class="attr">hideInBreadcrumb</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 子项往上提，仍旧展示,</span></span><br><span class="line">    <span class="attr">flatMenu</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h2><p>整合 antd 组件库。</p><h3 id="启用方式-1"><a href="#启用方式-1" class="headerlink" title="启用方式"></a>启用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** config/config.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">antd</span>: &#123;</span><br><span class="line">    <span class="comment">/** 配置 antd 的 configProvider */</span></span><br><span class="line">    <span class="attr">configProvider</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">/** 开启暗色主题 */</span></span><br><span class="line">    <span class="attr">dark</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/** 开启紧凑主题 */</span></span><br><span class="line">    <span class="attr">compact</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/** 配置 antd 的 babel-plugin-import 按需加载 */</span></span><br><span class="line">    <span class="attr">import</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/** 配置使用 antd 的样式，默认 less */</span></span><br><span class="line">    <span class="attr">style</span>: <span class="string">&quot;less&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** ---antd.v5--- */</span></span><br><span class="line">    <span class="comment">/** 配置 antd@5 的 theme token，等同于配置 configProvider.theme，且该配置项拥有更高的优先级 */</span></span><br><span class="line">    <span class="attr">theme</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">/** 配置 antd 的 App 包裹组件，请注意 antd@5.1.0 ~ 5.2.3 仅能通过 appConfig: &#123;&#125; 启用，只有 antd &gt;=5.3.0 才支持更多 App 配置项目 */</span></span><br><span class="line">    <span class="attr">appConfig</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">/** 配置 antd 的 DatePicker、TimePicker、Calendar 组件是否使用 moment 作为日期处理库，默认为 false */</span></span><br><span class="line">    <span class="attr">momentPicker</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">/** 配置 antd 的 StyleProvider 组件，该组件用于兼容低版本浏览器，如 IE11。当你的项目配置了 legacy 或者 targets 包含 ie 时，会自动进行降级处理，不需要手动配置。 */</span></span><br><span class="line">    <span class="attr">styleProvider</span>: &#123;</span><br><span class="line">      <span class="attr">hashPriority</span>: <span class="string">&quot;high&quot;</span>,</span><br><span class="line">      <span class="attr">legacyTransformer</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://ant.design/components/config-provider-cn?theme=dark">configProvider</a> 属性注入。</p></blockquote><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p><code>@umi/max</code> 内置了数据流管理插件，它是一种基于 <code>hooks</code> 范式的轻量级数据管理方案，可以在 Umi 项目中管理全局的共享数据。</p><h3 id="Create-Model"><a href="#Create-Model" class="headerlink" title="Create Model"></a>Create Model</h3><p>约定式目录结构：</p><ol><li><p><code>src/models/xxx.&#123;js,jsx,ts,tsx&#125;</code></p></li><li><p><code>src/pages/xxx/models/xxx.&#123;js,jsx,ts,tsx&#125;</code></p></li></ol><blockquote><p>注意 namespace 需要全局唯一。</p></blockquote><h3 id="Use-Model"><a href="#Use-Model" class="headerlink" title="Use Model"></a>Use Model</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/components/Username/index.tsx */</span></span><br><span class="line"><span class="keyword">import</span> &#123; useModel &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user, loading &#125; = <span class="title function_">useModel</span>(<span class="string">&#x27;userModel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 数据过滤 */</span></span><br><span class="line">  <span class="keyword">const</span> &#123; add, minus &#125; = <span class="title function_">useModel</span>(<span class="string">&#x27;counterModel&#x27;</span>, <span class="function">(<span class="params">model</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">add</span>: model.<span class="property">increment</span>,</span><br><span class="line">    <span class="attr">minus</span>: model.<span class="property">decrement</span>,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;loading ? <span class="language-xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;user.username&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Global-Init-State"><a href="#Global-Init-State" class="headerlink" title="Global Init State"></a>Global Init State</h3><p>在 <code>src/app.js</code> 内暴露 <code>getInitialState</code> 方法。</p><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/app.ts [createInitState] */</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchInitialData &#125; <span class="keyword">from</span> <span class="string">&quot;@/services/initial&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getInitialState</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> initialData = <span class="keyword">await</span> <span class="title function_">fetchInitialData</span>();</span><br><span class="line">  <span class="keyword">return</span> initialData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** src/page/xxxComponent.jsx [useInitState] */</span></span><br><span class="line"><span class="keyword">import</span> &#123; useModel &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; initialState, loading, error, refresh, setInitialState &#125; = <span class="title function_">useModel</span>(<span class="string">&quot;@@initialState&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;initialState&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>对象属性</th><th>类型</th><th>介绍</th></tr></thead><tbody><tr><td>initialState</td><td>any</td><td>导出的 getInitialState() 方法的返回值</td></tr><tr><td>loading</td><td>boolean</td><td>getInitialState() 或 refresh() 方法是否正在进行中。在首次获取到初始状态前，页面其他部分的渲染都会被阻止</td></tr><tr><td>error</td><td>Error</td><td>如果导出的 getInitialState() 方法运行时报错，报错的错误信息</td></tr><tr><td>refresh</td><td>() &#x3D;&gt; void</td><td>重新执行 getInitialState 方法，并获取新的全局初始状态</td></tr><tr><td>setInitialState</td><td>(state: any) &#x3D;&gt; void</td><td>手动设置 initialState 的值，手动设置完毕会将 loading 置为 false</td></tr></tbody></table><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>它基于 axios 和 ahooks 的 useRequest 提供了一套统一的网络请求和错误处理方案，主要 hooks 有：<code>request</code>、<code>useRequest</code></p><h3 id="构建时配置-1"><a href="#构建时配置-1" class="headerlink" title="构建时配置"></a>构建时配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** config/config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">request</span>: &#123;</span><br><span class="line">    <span class="comment">/** 请求返回数据解构 */</span></span><br><span class="line">    <span class="attr">dataField</span>: <span class="string">&quot;data&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="运行时配置-1"><a href="#运行时配置-1" class="headerlink" title="运行时配置"></a>运行时配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/app.ts */</span></span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">RequestConfig</span> &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">request</span>: <span class="title class_">RequestConfig</span> = &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">  <span class="comment">/** 请求统一的错误处理方案 */</span></span><br><span class="line">  <span class="attr">errorConfig</span>: &#123;</span><br><span class="line">    <span class="title function_">errorHandler</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="title function_">errorThrower</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 拦截器 */</span></span><br><span class="line">  <span class="attr">requestInterceptors</span>: [],</span><br><span class="line">  <span class="comment">/** 响应器 */</span></span><br><span class="line">  <span class="attr">responseInterceptors</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="API-request"><a href="#API-request" class="headerlink" title="API-request"></a>API-request</h3><p>通过 <code>import &#123; request &#125; from &#39;@@/plugin-request&#39;</code> 你可以使用内置的请求方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="string">&quot;/api/user&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123; <span class="attr">name</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="comment">// other axios options</span></span><br><span class="line">  <span class="attr">skipErrorHandler</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">getResponse</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">requestInterceptors</span>: [],</span><br><span class="line">  <span class="attr">responseInterceptors</span>: [],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="API-useRequest"><a href="#API-useRequest" class="headerlink" title="API-useRequest"></a>API-useRequest</h3><p>插件内置了 @ahooksjs&#x2F;useRequest ，你可以在组件内通过该 Hook 简单便捷的消费数据。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRequest &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error, loading &#125; = <span class="title function_">useRequest</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> services.<span class="title function_">getUserList</span>(<span class="string">&quot;/api/test&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;error.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码中 data 并不是你后端返回的数据，而是其内部的 data，（因为构建时配置默认是 ‘data’)。</p></blockquote><p><a href="https://umijs.org/docs/max/request#umi3-%E5%88%B0-umi4"><strong>Umi3 -&gt; Umi4 变化</strong></a></p><h2 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h2><p>权限管理。</p><h3 id="启用方式-2"><a href="#启用方式-2" class="headerlink" title="启用方式"></a>启用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">access</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">/** access 插件依赖 initial State 所以需要同时开启 */</span></span><br><span class="line">  <span class="attr">initialState</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="权限定义"><a href="#权限定义" class="headerlink" title="权限定义"></a>权限定义</h3><p>我们约定了 <code>src/access.ts</code> 为我们的权限定义文件，该文件需要默认导出一个方法，导出的方法会在项目初始化时被执行。该方法需要返回一个对象，对象的每一个值就对应定义了一条权限。如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/access.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">initialState</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; userId, role &#125; = initialState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">canReadFoo</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">canUpdateFoo</span>: role === <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="attr">canDeleteFoo</span>: <span class="function">(<span class="params">foo</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> foo.<span class="property">ownerId</span> === userId;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>路由配置中通过 access 限定权限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/pageA&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="string">&quot;PageA&quot;</span>,</span><br><span class="line">    <span class="comment">/** 权限定义返回值的某个 key */</span></span><br><span class="line">    <span class="attr">access</span>: <span class="string">&quot;canReadPageA&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="API-useAccess"><a href="#API-useAccess" class="headerlink" title="API-useAccess"></a>API-useAccess</h3><p>组件中获取权限相关信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src/page/xxxComponent */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAccess &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PageA</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; foo &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> access = <span class="title function_">useAccess</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (access.<span class="property">canReadFoo</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果可以读取 Foo，则...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>TODO<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PageA</span>;</span><br></pre></td></tr></table></figure><h3 id="API-Access"><a href="#API-Access" class="headerlink" title="API-Access"></a>API-Access</h3><p>权限控制组件，支持的属性如下：</p><ol><li><p>accessible</p></li><li><p>fallback</p></li><li><p>children</p></li></ol><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAccess, <span class="title class_">Access</span> &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PageA</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; foo &#125; = props;</span><br><span class="line">  <span class="comment">/** access 的成员: canReadFoo, canUpdateFoo, canDeleteFoo */</span></span><br><span class="line">  <span class="keyword">const</span> access = <span class="title function_">useAccess</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (access.<span class="property">canReadFoo</span>) &#123;</span><br><span class="line">    <span class="comment">/** 如果可以读取 Foo，则... */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Access</span> <span class="attr">accessible</span>=<span class="string">&#123;access.canReadFoo&#125;</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Can not read foo content.<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Foo content.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Access</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Access</span> <span class="attr">accessible</span>=<span class="string">&#123;access.canUpdateFoo&#125;</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Can not update foo.<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Update foo.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Access</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Access</span> <span class="attr">accessible</span>=<span class="string">&#123;access.canDeleteFoo(foo)&#125;</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Can not delete foo.<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Delete foo.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Access</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>约定在 src&#x2F;locales 目录下引入多语言文件，目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">  + locales</span><br><span class="line">    + zh-CN.ts</span><br><span class="line">    + en-US.ts</span><br><span class="line">  pages</span><br></pre></td></tr></table></figure><h3 id="启用方式-3"><a href="#启用方式-3" class="headerlink" title="启用方式"></a>启用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** config/config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">locale</span>: &#123;</span><br><span class="line">    <span class="comment">// 默认使用 src/locales/zh-CN.ts 作为多语言文件</span></span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">    <span class="attr">baseSeparator</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** src/locales/zh-CN.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&#x27;欢迎光临 Umi 的世界！&#x27;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** src/locales/en-US.ts */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&quot;Welcome to Umi&#x27;s world!&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="FormattedMessage"><a href="#FormattedMessage" class="headerlink" title="FormattedMessage"></a>FormattedMessage</h3><p>通过 UmiMax 预制的 <code>&lt;FormattedMessage /&gt;</code> 组件实现渲染。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormattedMessage</span> &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">FormattedMessage</span> <span class="attr">id</span>=<span class="string">&quot;welcome&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zh-CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>欢迎光临 Umi 的世界！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- en-US --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Welcome to Umi&#x27;s world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件参数使用"><a href="#组件参数使用" class="headerlink" title="组件参数使用"></a>组件参数使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Alert</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useIntl &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> intl = <span class="title function_">useIntl</span>();</span><br><span class="line">  <span class="keyword">const</span> msg = intl.<span class="title function_">formatMessage</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;welcome&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Alert</span> <span class="attr">message</span>=<span class="string">&#123;msg&#125;</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h3><p>方式：</p><ol><li><p><code>&lt;SelectLang /&gt;</code></p></li><li><p><code>setLocale()</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** SelectLang UmiMax 预设的切换语言组件 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SelectLang</span> &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">SelectLang</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 编程式调用 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; setLocale &#125; <span class="keyword">from</span> <span class="string">&quot;umi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 切换时刷新页面 */</span></span><br><span class="line"><span class="title function_">setLocale</span>(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line"><span class="comment">/** 切换时不刷新页面 */</span></span><br><span class="line"><span class="title function_">setLocale</span>(<span class="string">&quot;en-US&quot;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** config/config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">locale</span>: &#123;</span><br><span class="line">    <span class="attr">antd</span>: <span class="literal">false</span>, <span class="comment">// 如果项目依赖中包含 `antd`，则默认为 true</span></span><br><span class="line">    <span class="attr">baseNavigator</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">baseSeparator</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">useLocalStorage</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置的详细介绍如下：</p><table><thead><tr><th>配置项</th><th>类型</th><th>默认值</th><th>介绍</th></tr></thead><tbody><tr><td>antd</td><td>Boolean</td><td>false；</td><td>如果项目包含 antd 依赖，则为 true antd 的国际化支持。更多介绍可参见此文档。</td></tr><tr><td>baseNavigator</td><td>Boolean</td><td>true</td><td>开启浏览器语言检测。默认情况下，当前语言环境的识别按照：localStorage 中 umi*locale 值 &gt; 浏览器检测 &gt; default 设置的默认语言 &gt; zh-CN</td></tr><tr><td>baseSeparator</td><td>String</td><td>-</td><td>语言（Language）与国家（Country） 之间的分割符。默认情况下为 -，返回的语言及目录文件为 zh-CN、en-US 和 sk 等。若指定为 *，则 default 默认为 zh_CN。</td></tr><tr><td>default</td><td>String</td><td>zh-CN</td><td>项目默认语言。当检测不到具体语言时，使用 default 设置的默认语言。</td></tr><tr><td>title</td><td>Boolean</td><td>false</td><td>开启标题国际化。</td></tr><tr><td>useLocalStorage</td><td>Boolean</td><td>true</td><td>自动使用 localStorage 保存当前使用的语言。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
          <category> Umi </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ReduxNote</title>
      <link href="/2023/07/28/React/Redux/"/>
      <url>/2023/07/28/React/Redux/</url>
      
        <content type="html"><![CDATA[<p>Redux 是 JavaScript 应用的状态容器，提供可预测的状态管理。</p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>工具包：<a href="https://redux-toolkit.js.org/api/configureStore">配置 store</a>、<a href="https://redux-toolkit.js.org/api/createreducer">创建 Reducer 并编写 immutable 更新逻辑</a>、<a href="https://redux-toolkit.js.org/api/createslice">创建整个 State 的 “slice”</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Toolkit - 1</span></span><br><span class="line">yarn add @reduxjs/toolkit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redux core lib - 2</span></span><br><span class="line">yarn add redux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create React Redux app</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redux + Plain JS template</span></span><br><span class="line">npx create-react-app my-app --template redux</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redux + TypeScript template</span></span><br><span class="line">npx create-react-app my-app --template redux-typescript</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** redux */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** reducer*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counterReducer</span>(<span class="params">state = &#123; value: <span class="number">0</span> &#125;, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;counter/incremented&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: state.<span class="property">value</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;counter/decremented&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: state.<span class="property">value</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** createStore */</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(counterReducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** subscribe */</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/** dispatch */</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;counter/incremented&quot;</span> &#125;);</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;counter/incremented&quot;</span> &#125;);</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;counter/decremented&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** redux-toolkit */</span></span><br><span class="line"><span class="comment">/** 1. createSlice -&gt; &#123; reducers, actions &#125; */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** reducers */</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** actions */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">incrementAsync</span> = (<span class="params">amount</span>) =&gt; <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(amount));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** getter */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">selectCount</span> = (<span class="params">state</span>) =&gt; state.<span class="property">counter</span>.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 2. createStore */</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;../features/counter/counterSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** useStore */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="comment">/** store &amp; Provider */</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./app/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** use in component */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  decrement,</span><br><span class="line">  increment,</span><br><span class="line">  incrementByAmount,</span><br><span class="line">  incrementAsync,</span><br><span class="line">  selectCount,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./counterSlice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useSelector</span>(selectCount);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; dispatch(increment())&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建-Redux-Store"><a href="#创建-Redux-Store" class="headerlink" title="创建 Redux Store"></a>创建 Redux Store</h1><p><code>configureStore(&#123; reducer: &#123;&#125; &#125;) -&gt; action</code></p><p>reducer 以键值对的形式存储，各个功能模块的 reducer 以及 state。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&quot;../features/counter/counterSlice&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="创建-Redux-Slice"><a href="#创建-Redux-Slice" class="headerlink" title="创建 Redux Slice"></a>创建 Redux Slice</h1><p><strong>“slice” 是应用中单个功能的 Redux reducer 逻辑和 action 的集合</strong>, 通常一起定义在一个文件中。该名称来自于将根 Redux 状态对象拆分为多个状态 “slice”。</p><p><code>toolkit -&gt; createSlice -&gt; &#123; reducers, action_string, action_createFunction, action_object &#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; increment, decrement, incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><p>原则上不能在 Redux 中直接修改 state，但 toolkit 库集成了 immer.js 进而简化覆写过程。</p><h2 id="Thunk-异步"><a href="#Thunk-异步" class="headerlink" title="Thunk 异步"></a>Thunk 异步</h2><p>thunk 是一种特定类型的 Redux 函数，可以包含异步逻辑。Thunk 是使用两个函数编写的：</p><ol><li><p>一个内部 thunk 函数，它以 dispatch 和 getState 作为参数</p></li><li><p>外部创建者函数，它创建并返回 thunk 函数</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">incrementAsync</span> = (<span class="params">amount</span>) =&gt; <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(amount));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="prepare-构造-action"><a href="#prepare-构造-action" class="headerlink" title="prepare 构造 action"></a>prepare 构造 action</h2><p>可以使用一个正确的内容模板去构造（prepare）action 对象，例如添加文章时需要添加唯一的 id，通过 prepare 可在 slice 中进行添加，不需要外部再做处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** slice */</span></span><br><span class="line"><span class="keyword">const</span> postsSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">postAdded</span>: &#123;</span><br><span class="line">      <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">        state.<span class="title function_">push</span>(action.<span class="property">payload</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">prepare</span>(<span class="params">title, content</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">payload</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="title function_">nanoid</span>(),</span><br><span class="line">            title,</span><br><span class="line">            content,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// other reducers here</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** xxComponent */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onSavePostClicked</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (title &amp;&amp; content) &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">postAdded</span>(title, content));</span><br><span class="line">    <span class="title function_">setTitle</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="title function_">setContent</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="extraReducers"><a href="#extraReducers" class="headerlink" title="extraReducers"></a>extraReducers</h2><p>extraReducers 选项是一个接收名为 builder 的参数的函数。</p><p>builder 对象提供了一些方法，让我们可以定义额外的 case reducer，这些 reducer 将响应在 slice 之外定义的 action。</p><p>我们将使用 builder.addCase(actionCreator, reducer) 来处理异步 thunk dispatch 的每个 action。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPosts = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;posts/fetchPosts&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> client.<span class="title function_">get</span>(<span class="string">&quot;/fakeApi/posts&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postsSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">// omit existing reducers here</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">extraReducers</span>(<span class="params">builder</span>) &#123;</span><br><span class="line">    builder</span><br><span class="line">      .<span class="title function_">addCase</span>(fetchPosts.<span class="property">pending</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">status</span> = <span class="string">&quot;loading&quot;</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">addCase</span>(fetchPosts.<span class="property">fulfilled</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">status</span> = <span class="string">&quot;succeeded&quot;</span>;</span><br><span class="line">        <span class="comment">// Add any fetched posts to the array</span></span><br><span class="line">        state.<span class="property">posts</span> = state.<span class="property">posts</span>.<span class="title function_">concat</span>(action.<span class="property">payload</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">addCase</span>(fetchPosts.<span class="property">rejected</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">status</span> = <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">        state.<span class="property">error</span> = action.<span class="property">error</span>.<span class="property">message</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="全局注入-stote"><a href="#全局注入-stote" class="headerlink" title="全局注入 stote"></a>全局注入 stote</h1><p>任何调用 useSelector 或 useDispatch 的 React 组件都可以访问 <code>&lt;Provider&gt;</code> 中的 store。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./app/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">&quot;./serviceWorker&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="接收-store-amp-dispatch"><a href="#接收-store-amp-dispatch" class="headerlink" title="接收 store &amp; dispatch"></a>接收 store &amp; dispatch</h1><p>接收 store 以及 dispatch 的有两种方式：Hooks API、Connect API。</p><blockquote><p>connect still works and is supported in React-Redux 8.x. However, <a href="https://react-redux.js.org/api/hooks">we recommend using the hooks API as the default</a>.</p></blockquote><h2 id="Hooks-API"><a href="#Hooks-API" class="headerlink" title="Hooks API"></a>Hooks API</h2><p>Hooks 方式直接通过 useDispatch 和 useSelector 获取 state 以及 dispatch。</p><p><strong>useDispatch &amp; useSelector :</strong></p><p>React 组件使用 useSelector 钩子从 store 读取数据</p><ol><li><p>选择器函数接收整个 state 对象，并且返回需要的部分数据</p></li><li><p>每当 Redux store 更新时，选择器将重新运行，如果它们返回的数据发生更改，则组件将重新渲染</p></li></ol><p>React 组件使用 useDispatch 钩子 dispatch action 来更新 store</p><ol><li><p>createSlice 将为我们添加到 slice 的每个 reducer 函数生成 action creator 函数</p></li><li><p>在组件中调用 dispatch(someActionCreator()) 来 dispatch action</p></li><li><p>Reducers 将运行，检查此 action 是否相关，并在适当时返回新状态</p></li><li><p>表单输入值等临时数据应保留为 React 组件状态。当用户完成表单时，dispatch 一个 Redux action 来更新 store。</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">selectCount</span> = (<span class="params">state</span>) =&gt; state.<span class="property">counter</span>.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> counter = <span class="title function_">useSelector</span>(selectCount);</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: &quot;xxx&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;counter&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Connect-API"><a href="#Connect-API" class="headerlink" title="Connect API"></a>Connect API</h2><p>通过 Connect 函数将 store 以及 dispatch 注入到组件的 props 中。</p><p><code>function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)</code></p><p>参数：</p><ol><li><p>mapStateToProps?: Function</p></li><li><p>mapDispatchToProps?: Function | Object</p></li><li><p>mergeProps?: Function</p></li><li><p>options?: Object</p></li></ol><blockquote><ol><li><p>mapStateToProps -&gt; 传递 state 到 props，需要返回一个对象用于合并到 props 中。</p></li><li><p>mapDispatchToPorps -&gt; 传递 dispatch 到 props（通常不需要传递，redux 内部会自动回传一个 dispatch 到 props）。</p></li></ol></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          porps.dispatch(&#123; type: &quot;xxx&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;props.state&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToPorps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToPorps)(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><h1 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h1><p>Redux 有多种异步 middleware，每一种都允许你使用不同的语法编写逻辑。最常见的异步 middleware 是 redux-thunk，它可以让你编写可能直接包含异步逻辑的普通函数。</p><p><img src="https://cn.redux.js.org/assets/images/ReduxAsyncDataFlowDiagram-d97ff38a0f4da0f327163170ccc13e80.gif"></p><p>Redux 使用叫做“ middleware ”这样的插件模式来开发异步逻辑</p><ol><li><p>官方的处理异步 middleware 叫 redux-thunk，包含在 Redux Toolkit 中</p></li><li><p>Thunk 函数接收 dispatch 和 getState 作为参数，并且可以在异步逻辑中使用它们</p></li></ol><h2 id="thunk"><a href="#thunk" class="headerlink" title="thunk"></a>thunk</h2><p>thunk 接收 dispatch 和 getState 作为参数，可进行再次 dispatch。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** ReduxSlice */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;counter&quot;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">incrementByAmount</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; incrementByAmount &#125; = counterSlice.<span class="property">actions</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** thunk */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">incrementAsync</span> = (<span class="params">amount</span>) =&gt; <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">incrementByAmount</span>(amount));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><h2 id="createAsyncThunk"><a href="#createAsyncThunk" class="headerlink" title="createAsyncThunk"></a>createAsyncThunk</h2><p><code>createAsyncThunk(actionString: string, callback: () =&gt; Promise)</code></p><p>thunk 生成器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSlice, createAsyncThunk &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; client &#125; <span class="keyword">from</span> <span class="string">&quot;../../api/client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">posts</span>: [],</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;idle&quot;</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPosts = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;posts/fetchPosts&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> client.<span class="title function_">get</span>(<span class="string">&quot;/fakeApi/posts&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addNewPost = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;posts/addNewPost&quot;</span>, <span class="keyword">async</span> (initialPost) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> client.<span class="title function_">post</span>(<span class="string">&quot;/fakeApi/posts&quot;</span>, initialPost);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postsSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">// omit other reducer</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">extraReducers</span>(<span class="params">builder</span>) &#123;</span><br><span class="line">    builder</span><br><span class="line">      .<span class="title function_">addCase</span>(fetchPosts.<span class="property">pending</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">status</span> = <span class="string">&quot;loading&quot;</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">addCase</span>(fetchPosts.<span class="property">fulfilled</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">status</span> = <span class="string">&quot;succeeded&quot;</span>;</span><br><span class="line">        <span class="comment">// Add any fetched posts to the array</span></span><br><span class="line">        state.<span class="property">posts</span> = state.<span class="property">posts</span>.<span class="title function_">concat</span>(action.<span class="property">payload</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">addCase</span>(fetchPosts.<span class="property">rejected</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">status</span> = <span class="string">&quot;failed&quot;</span>;</span><br><span class="line">        state.<span class="property">error</span> = action.<span class="property">error</span>.<span class="property">message</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">addCase</span>(addNewPost.<span class="property">fulfilled</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">posts</span>.<span class="title function_">push</span>(action.<span class="property">payload</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> postsSlice.<span class="property">reducer</span>;</span><br></pre></td></tr></table></figure><h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><ol><li><p>必须依赖 state 和 action 参数去计算出一个新 state</p></li><li><p>必须通过拷贝旧 state 的方式去做 不可变更新 (immutable updates)</p></li><li><p>不能包含任何异步逻辑或其他副作用</p></li><li><p>Redux Toolkit 的 createSlice API 内部使用了 Immer 库才达到表面上直接修改（”mutating”）state 也实现不可变更新（immutable updates）的效果</p></li></ol><blockquote><p>Redux action 和 state 应该只能包含普通的 JS 值，如对象、数组和基本类型。不要将类实例、函数或其他不可序列化的值放入 Redux！。</p></blockquote><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p><a href="https://cn.redux.js.org/tutorials/essentials/part-6-performance-normalization">性能与数据范式化</a></p><ol><li><p>记忆化 selector</p></li><li><p>meno()</p></li><li><p>范式化数据</p></li></ol><h2 id="记忆化-Selector"><a href="#记忆化-Selector" class="headerlink" title="记忆化 Selector"></a>记忆化 Selector</h2><p>通过 createSelector 创建记忆化 selector。</p><p>接受多个 selector（前面称作’输入 selector‘，最后一个称作’输出 selector‘），最后一个作为输出 selector，进而创建记忆化 selector。</p><p>在使用 useSelector 时，会将所有的参数传递给所有的’输入 selector‘，最后将所有的’输入 selector‘的返回值作为参数传入’输出 selector‘，进而只对最后的参数进行依赖追踪。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">shopItemsSelector</span> = (<span class="params">state</span>) =&gt; state.<span class="property">shop</span>.<span class="property">items</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">taxPercentSelector</span> = (<span class="params">state</span>) =&gt; state.<span class="property">shop</span>.<span class="property">taxPercent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subtotalSelector = <span class="title function_">createSelector</span>(shopItemsSelector, <span class="function">(<span class="params">items</span>) =&gt;</span> items.<span class="title function_">reduce</span>(<span class="function">(<span class="params">subtotal, item</span>) =&gt;</span> subtotal + item.<span class="property">value</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> taxSelector = <span class="title function_">createSelector</span>(subtotalSelector, taxPercentSelector, <span class="function">(<span class="params">subtotal, taxPercent</span>) =&gt;</span> subtotal * (taxPercent / <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalSelector = <span class="title function_">createSelector</span>(subtotalSelector, taxSelector, <span class="function">(<span class="params">subtotal, tax</span>) =&gt;</span> (&#123; <span class="attr">total</span>: subtotal + tax &#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> exampleState = &#123;</span><br><span class="line">  <span class="attr">shop</span>: &#123;</span><br><span class="line">    <span class="attr">taxPercent</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;apple&quot;</span>, <span class="attr">value</span>: <span class="number">1.2</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;orange&quot;</span>, <span class="attr">value</span>: <span class="number">0.95</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtotalSelector</span>(exampleState)); <span class="comment">// 2.15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">taxSelector</span>(exampleState)); <span class="comment">// 0.172</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">totalSelector</span>(exampleState)); <span class="comment">// &#123; total: 2.322 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="范式化数据"><a href="#范式化数据" class="headerlink" title="范式化数据"></a>范式化数据</h2><p>“范式化数据”是指：</p><ol><li><p>我们 state 中的每个特定数据只有一个副本，不存在重复。</p></li><li><p>已范式化的数据保存在查找表中，其中项目 ID 是键，项本身是值。</p></li><li><p>也可能有一个特定项用于保存所有 ID 的数组。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">users</span>: &#123;</span><br><span class="line">    <span class="attr">ids</span>: [<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;user2&quot;</span>, <span class="string">&quot;user3&quot;</span>],</span><br><span class="line">    <span class="attr">entities</span>: &#123;</span><br><span class="line">      <span class="string">&quot;user1&quot;</span>: &#123;<span class="attr">id</span>: <span class="string">&quot;user1&quot;</span>, firstName, lastName&#125;,</span><br><span class="line">      <span class="string">&quot;user2&quot;</span>: &#123;<span class="attr">id</span>: <span class="string">&quot;user2&quot;</span>, firstName, lastName&#125;,</span><br><span class="line">      <span class="string">&quot;user3&quot;</span>: &#123;<span class="attr">id</span>: <span class="string">&quot;user3&quot;</span>, firstName, lastName&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redux-Toolkit 提供 <a href="https://cn.redux.js.org/tutorials/essentials/part-6-performance-normalization#%E4%BD%BF%E7%94%A8-createentityadapter-%E7%AE%A1%E7%90%86%E8%8C%83%E5%BC%8F%E5%8C%96-state">createEntityAdapter</a> 进行范式化管理 state 数据。</p><h1 id="Redux-内部-Store"><a href="#Redux-内部-Store" class="headerlink" title="Redux 内部 Store"></a>Redux 内部 Store</h1><p>实际逻辑：</p><ol><li><p>store 内部有当前的 state 值和 reducer 函数</p></li><li><p>getState 返回当前 state 值</p></li><li><p>subscribe 保存一个监听回调数组并返回一个函数来移除新的回调</p></li><li><p>dispatch 调用 reducer，保存 state，并运行监听器</p></li><li><p>store 在启动时 dispatch 一个 action 来初始化 reducers 的 state</p></li><li><p>store API 是一个对象，里面有 {dispatch, subscribe, getState}</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createStore</span>(<span class="params">reducer, preloadedState</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> state = preloadedState;</span><br><span class="line">  <span class="keyword">const</span> listeners = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">    listeners.<span class="title function_">push</span>(listener);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">unsubscribe</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = listeners.<span class="title function_">indexOf</span>(listener);</span><br><span class="line">      listeners.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    state = <span class="title function_">reducer</span>(state, action);</span><br><span class="line">    listeners.<span class="title function_">forEach</span>(<span class="function">(<span class="params">listener</span>) =&gt;</span> <span class="title function_">listener</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;@@redux/INIT&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; dispatch, subscribe, getState &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Note</title>
      <link href="/2023/07/20/React/ReactNote/"/>
      <url>/2023/07/20/React/ReactNote/</url>
      
        <content type="html"><![CDATA[<h1 id="ReactNote"><a href="#ReactNote" class="headerlink" title="ReactNote"></a>ReactNote</h1><h2 id="handleEvent"><a href="#handleEvent" class="headerlink" title="handleEvent"></a>handleEvent</h2><p>副作用函数</p><p><strong>stopEvent</strong></p><p>react 更贴近原生 JS。</p><p>阻止事件传播：</p><ol><li><p>阻止事件冒泡：<code>e.stopPropagation()</code></p></li><li><p>阻止原生事件：<code>e.preventDefault()</code></p></li></ol><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p><strong>特性</strong>：异步更新、合并（<strong>批处理</strong>）、顶层调用。</p><p><strong>异步更新</strong>：无论是否调用更新函数，当前作用域拿到的 state 值永远是当前的快照值。</p><p><strong>React 会使 state 的值始终”固定“在一次渲染的各个事件处理函数内部。</strong></p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p><code>useState&lt;T&gt;(initState: T): [state: T, setState: (state: T) =&gt; void]</code></p><p><strong>setState(callback) 更新函数</strong>：当传递的是函数时，React 会将此函数加入队列。</p><p><strong>setState(n+1) 值覆盖</strong>：拿到 n 的值始终是当前组件的快照值。</p><blockquote><p>注意：状态值在调用更新函数时始终变化，而当前组件快照值始终不变。</p></blockquote><h3 id="update-queue"><a href="#update-queue" class="headerlink" title="update queue"></a>update queue</h3><p><strong>更新队列：</strong> 状态值、更新函数，最终更新结果从 useState 中返回出去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getFinalState</span>(<span class="params">baseState, queue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> finalState = baseState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> update <span class="keyword">of</span> queue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> update === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 调用更新函数</span></span><br><span class="line">      finalState = <span class="title function_">update</span>(finalState);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 替换下一个 state</span></span><br><span class="line">      finalState = update;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> finalState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;number&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          let k = 0;</span></span><br><span class="line"><span class="language-xml">          setNumber(number + 5);</span></span><br><span class="line"><span class="language-xml">          setNumber((n) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            alert(k++);</span></span><br><span class="line"><span class="language-xml">            return n + 1;</span></span><br><span class="line"><span class="language-xml">          &#125;); // 这里的alert会执行两次</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        增加数字</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alert 执行两次原因：<strong>浏览器严格模式导致的</strong>。（只会在 DEV 环境下）</p><p><img src="https://s2.loli.net/2023/07/25/TfFjse3wzObItoh.png"></p><p><strong>React 会等到事件处理函数中的</strong> 所有 <strong>代码都运行完毕再处理你的 state 更新。</strong></p><p>内部会有一个数组存储组件的所有 state 数据 以及 setState 更新函数。</p><h3 id="useState-simulation"><a href="#useState-simulation" class="headerlink" title="useState simulation"></a>useState simulation</h3><p><strong><code>useState </code>模拟</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> componentHooks = [];</span><br><span class="line"><span class="keyword">let</span> currentHookIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useState 在 React 中是如何工作的（简化版）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">initialState</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pair = componentHooks[currentHookIndex];</span><br><span class="line">  <span class="keyword">if</span> (pair) &#123;</span><br><span class="line">    <span class="comment">// 这不是第一次渲染</span></span><br><span class="line">    <span class="comment">// 所以 state pair 已经存在</span></span><br><span class="line">    <span class="comment">// 将其返回并为下一次 hook 的调用做准备</span></span><br><span class="line">    currentHookIndex++;</span><br><span class="line">    <span class="keyword">return</span> pair;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这是我们第一次进行渲染</span></span><br><span class="line">  <span class="comment">// 所以新建一个 state pair 然后存储它</span></span><br><span class="line">  pair = [initialState, setState];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setState</span>(<span class="params">nextState</span>) &#123;</span><br><span class="line">    <span class="comment">// 当用户发起 state 的变更，</span></span><br><span class="line">    <span class="comment">// 把新的值放入 pair 中</span></span><br><span class="line">    pair[<span class="number">0</span>] = nextState;</span><br><span class="line">    <span class="title function_">updateDOM</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储这个 pair 用于将来的渲染</span></span><br><span class="line">  <span class="comment">// 并且为下一次 hook 的调用做准备</span></span><br><span class="line">  componentHooks[currentHookIndex] = pair;</span><br><span class="line">  currentHookIndex++;</span><br><span class="line">  <span class="keyword">return</span> pair;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Gallery</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 每次调用 useState() 都会得到新的 pair</span></span><br><span class="line">  <span class="keyword">const</span> [index, setIndex] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [showMore, setShowMore] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleNextClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setIndex</span>(index + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleMoreClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setShowMore</span>(!showMore);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sculpture = sculptureList[index];</span><br><span class="line">  <span class="comment">// 这个例子没有使用 React，所以</span></span><br><span class="line">  <span class="comment">// 返回一个对象而不是 JSX</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">onNextClick</span>: handleNextClick,</span><br><span class="line">    <span class="attr">onMoreClick</span>: handleMoreClick,</span><br><span class="line">    <span class="attr">header</span>: <span class="string">`<span class="subst">$&#123;sculpture.name&#125;</span> by <span class="subst">$&#123;sculpture.artist&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">counter</span>: <span class="string">`<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span> of <span class="subst">$&#123;sculptureList.length&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">more</span>: <span class="string">`<span class="subst">$&#123;showMore ? <span class="string">&quot;Hide&quot;</span> : <span class="string">&quot;Show&quot;</span>&#125;</span> details`</span>,</span><br><span class="line">    <span class="attr">description</span>: showMore ? sculpture.<span class="property">description</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">imageSrc</span>: sculpture.<span class="property">url</span>,</span><br><span class="line">    <span class="attr">imageAlt</span>: sculpture.<span class="property">alt</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateDOM</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 在渲染组件之前</span></span><br><span class="line">  <span class="comment">// 重置当前 Hook 的下标</span></span><br><span class="line">  currentHookIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="title class_">Gallery</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新 DOM 以匹配输出结果</span></span><br><span class="line">  <span class="comment">// 这部分工作由 React 为你完成</span></span><br><span class="line">  nextButton.<span class="property">onclick</span> = output.<span class="property">onNextClick</span>;</span><br><span class="line">  header.<span class="property">textContent</span> = output.<span class="property">header</span>;</span><br><span class="line">  moreButton.<span class="property">onclick</span> = output.<span class="property">onMoreClick</span>;</span><br><span class="line">  moreButton.<span class="property">textContent</span> = output.<span class="property">more</span>;</span><br><span class="line">  image.<span class="property">src</span> = output.<span class="property">imageSrc</span>;</span><br><span class="line">  image.<span class="property">alt</span> = output.<span class="property">imageAlt</span>;</span><br><span class="line">  <span class="keyword">if</span> (output.<span class="property">description</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    description.<span class="property">textContent</span> = output.<span class="property">description</span>;</span><br><span class="line">    description.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    description.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;nextButton&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> header = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;header&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> moreButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;moreButton&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> description = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;description&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> image = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;image&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sculptureList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Homenaje a la Neurocirugía&quot;</span>,</span><br><span class="line">    <span class="attr">artist</span>: <span class="string">&quot;Marta Colvin Andrade&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;https://i.imgur.com/Mx7dA2Y.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&quot;A bronze statue of two crossed hands delicately holding a human brain in their fingertips.&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Floralis Genérica&quot;</span>,</span><br><span class="line">    <span class="attr">artist</span>: <span class="string">&quot;Eduardo Catalano&quot;</span>,</span><br><span class="line">    <span class="attr">description</span>:</span><br><span class="line">      <span class="string">&quot;This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;https://i.imgur.com/ZF6s192m.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="string">&quot;A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使 UI 匹配当前 state</span></span><br><span class="line"><span class="title function_">updateDOM</span>();</span><br></pre></td></tr></table></figure><p><code>setState -&gt; updateDOM -&gt; render</code></p><p><code>snapshop -&gt; setState -&gt; render -&gt; new snapshop</code></p><p><code>reRender: reCall the Function -&gt; return new JSX -&gt; diff -&gt; patch -&gt; react update UI</code></p><h3 id="object-update"><a href="#object-update" class="headerlink" title="object update"></a>object update</h3><p><strong>在 React 中将所有的数据视为 不可变数据 或 只读 。</strong></p><p>尤其是<strong>引用类型</strong>。</p><p><strong>对象展开 &amp; 覆盖</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setPerson</span>(&#123;</span><br><span class="line">  ...person, <span class="comment">// 复制上一个 person 中的所有字段</span></span><br><span class="line">  <span class="attr">firstName</span>: e.<span class="property">target</span>.<span class="property">value</span>, <span class="comment">// 但是覆盖 firstName 字段</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>嵌套对象</strong>：</p><p>更新嵌套对象，需要多次展开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextArtwork = &#123; ...person.<span class="property">artwork</span>, <span class="attr">city</span>: <span class="string">&quot;New Delhi&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> nextPerson = &#123; ...person, <span class="attr">artwork</span>: nextArtwork &#125;;</span><br><span class="line"><span class="title function_">setPerson</span>(nextPerson);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** or */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPerson</span>(&#123;</span><br><span class="line">  ...person, <span class="comment">// 复制其它字段的数据</span></span><br><span class="line">  <span class="attr">artwork</span>: &#123;</span><br><span class="line">    <span class="comment">// 替换 artwork 字段</span></span><br><span class="line">    ...person.<span class="property">artwork</span>, <span class="comment">// 复制之前 person.artwork 中的数据</span></span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New Delhi&quot;</span>, <span class="comment">// 但是将 city 的值替换为 New Delhi！</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="array-update"><a href="#array-update" class="headerlink" title="array update"></a>array update</h3><table><thead><tr><th></th><th>change arr</th><th>return new arr</th></tr></thead><tbody><tr><td>add</td><td>push、unshift</td><td>concat、[…arr]</td></tr><tr><td>del</td><td>pop、shift、splice</td><td>filter、slice</td></tr><tr><td>rep</td><td>splice、arr[i] &#x3D; xx</td><td>map</td></tr><tr><td>sor</td><td>reverse、sort</td><td>clone and sort</td></tr></tbody></table><p>同对象一样，也要看做不可变数据。</p><p>数组中的对象，实际上存储的也是对象的地址，所以直接修改也是不可以的，可以使用 map 生成新的数组进行更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setMyList</span>(</span><br><span class="line">  myList.<span class="title function_">map</span>(<span class="function">(<span class="params">artwork</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (artwork.<span class="property">id</span> === artworkId) &#123;</span><br><span class="line">      <span class="comment">// 创建包含变更的*新*对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123; ...artwork, <span class="attr">seen</span>: nextSeen &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有变更</span></span><br><span class="line">      <span class="keyword">return</span> artwork;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"><span class="title function_">updateMyTodos</span>(<span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> artwork = draft.<span class="title function_">find</span>(<span class="function">(<span class="params">a</span>) =&gt;</span> a.<span class="property">id</span> === artworkId);</span><br><span class="line">  artwork.<span class="property">seen</span> = nextSeen;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Immer"><a href="#Immer" class="headerlink" title="Immer"></a>Immer</h3><p><strong>Immer 简化更新</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">updatePerson</span>(<span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">  draft.<span class="property">artwork</span>.<span class="property">city</span> = <span class="string">&quot;Lagos&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>由 Immer 提供的 <code>draft</code> 是一种特殊类型的对象，被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，它会记录你用它所进行的操作。这就是你能够随心所欲地直接修改对象的原因所在！从原理上说，Immer 会弄清楚 <code>draft</code> 对象的哪些部分被改变了，并会依照你的修改创建出一个全新的对象。</p></blockquote><h3 id="flushSync"><a href="#flushSync" class="headerlink" title="flushSync"></a>flushSync</h3><p>同步更新 state，将直接更新 DOM。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; flushSync &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">setTodos</span>([...todos, newTodo]);</span><br><span class="line">&#125;);</span><br><span class="line">listRef.<span class="property">current</span>.<span class="property">lastChild</span>.<span class="title function_">scrollIntoView</span>();</span><br></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p><code>createRoot -&gt; render</code></p><p><strong>React 仅在渲染之间存在差异时才会更改 DOM 节点。</strong></p><h2 id="stateManage"><a href="#stateManage" class="headerlink" title="stateManage"></a>stateManage</h2><p><strong>核心</strong>：<code>UI = fn(state)</code></p><p><strong>避免冗余、矛盾、重复、深度嵌套的 state</strong>。</p><p><strong>UI 树：</strong></p><img src="https://react.docschina.org/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fpreserving_state_dom_tree.png&w=1920&q=75" title="" alt="Diagram with three sections arranged horizontally. In the first section, there are three rectangles stacked vertically, with labels 'Component A', 'Component B', and 'Component C'. Transitioning to the next pane is an arrow with the React logo on top labeled 'React'. The middle section contains a tree of components, with the root labeled 'A' and two children labeled 'B' and 'C'. The next section is again transitioned using an arrow with the React logo on top labeled 'React'. The third and final section is a wireframe of a browser, containing a tree of 8 nodes, which has only a subset highlighted (indicating the subtree from the middle section)." data-align="inline"><blockquote><p><strong>对 React 来说重要的是组件在 UI 树中的位置,而不是在 JSX 中的位置！</strong></p></blockquote><p><strong>所以如果希望在重新渲染的时候保留 state 需要保证几次渲染的树结构中应该互相“匹配”</strong></p><p>基本上一些 ui 上的 bug 都是渲染出错导致，主要检查 key 值的设置。</p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p>纯函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReducerAction</span>&lt;T&gt; = &#123; <span class="attr">type</span>: <span class="built_in">string</span> &#125; | T;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> useReducer&lt;T&gt;(</span><br><span class="line">  <span class="attr">callback</span>: <span class="function">(<span class="params">state: T, action: ReducerAction&lt;T&gt;</span>) =&gt;</span> <span class="built_in">void</span>,</span><br><span class="line">  <span class="attr">initState</span>: T</span><br><span class="line">): [<span class="attr">state</span>: T, <span class="attr">dispatch</span>: <span class="function">(<span class="params">action: ReducerAction&lt;T&gt;</span>) =&gt;</span> <span class="built_in">void</span>];</span><br></pre></td></tr></table></figure><h3 id="useImmerReducer"><a href="#useImmerReducer" class="headerlink" title="useImmerReducer"></a>useImmerReducer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useImmerReducer &#125; <span class="keyword">from</span> <span class="string">&quot;use-immer&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tasksReducer</span>(<span class="params">draft, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;added&quot;</span>: &#123;</span><br><span class="line">      draft.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: action.<span class="property">id</span>,</span><br><span class="line">        <span class="attr">text</span>: action.<span class="property">text</span>,</span><br><span class="line">        <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;changed&quot;</span>: &#123;</span><br><span class="line">      <span class="keyword">const</span> index = draft.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t.<span class="property">id</span> === action.<span class="property">task</span>.<span class="property">id</span>);</span><br><span class="line">      draft[index] = action.<span class="property">task</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;deleted&quot;</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> draft.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t.<span class="property">id</span> !== action.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>: &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&quot;未知 action：&quot;</span> + action.<span class="property">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>类似 Vue 中的 provide&#x2F;injext，主要用来解决 props 逐级透传问题。</p><p>react 作为单向数据流，数据来自上层，但如果<strong>状态提升</strong>到太高的层级就会导致“逐层透传 props”的情况。</p><p><img src="https://s2.loli.net/2023/07/25/23Tdlw8hItBMJAV.png" alt="image.png"></p><p>context 则是先下注入数据，不论深度，但存在<strong>就近原则</strong>：</p><p><img src="https://s2.loli.net/2023/07/25/a8Vk2WGdfAgQTem.png" alt="image.png"></p><p><code>createContext(value) -&gt; &lt;XxxContext.Provider&gt; -&gt; useContext(XxxContext)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** createContext */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">LevelContext</span> = <span class="title function_">createContext</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** XxxContext.Provider */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LevelContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./LevelContext.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Section</span>(<span class="params">&#123; level, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LevelContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;level&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LevelContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** useContext */</span></span><br><span class="line"><span class="keyword">import</span> &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LevelContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./LevelContext.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Heading</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> level = <span class="title function_">useContext</span>(<span class="title class_">LevelContext</span>);</span><br><span class="line">  <span class="keyword">switch</span> (level) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;未知的 level：&#x27;</span> + level);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景：颜色主题、全局数据共享、局部数据向下透传。</p><p>Context 不局限于静态值。如果你在下一次渲染时传递不同的值，React 将会更新读取它的所有下层组件！这就是 context 经常和 state 结合使用的原因。</p><p><strong>技巧：</strong></p><ol><li><p>当文件中存在多个 context 时，可进行整合并声明新的组件（<strong>注意预留 children</strong>）。</p></li><li><p>将相关逻辑迁移到一个文件当中，生产自定义 Hook：<code>createContext -&gt; useContext -&gt; useHook</code></p></li></ol><h3 id="Reduce-amp-Context"><a href="#Reduce-amp-Context" class="headerlink" title="Reduce &amp; Context"></a>Reduce &amp; Context</h3><p>通过 Context 将 Reduce 的 state 以及 dispatch 分发到子孙组件中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** App.js */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AddTask</span> <span class="keyword">from</span> <span class="string">&quot;./AddTask.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TaskList</span> <span class="keyword">from</span> <span class="string">&quot;./TaskList.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TasksProvider</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./TasksContext.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TaskApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TasksProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Day off in Kyoto<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AddTask</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TaskList</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">TasksProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** TaskContext.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createContext, useContext, useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TasksContext</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TasksDispatchContext</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">TasksProvider</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [tasks, dispatch] = <span class="title function_">useReducer</span>(tasksReducer, initialTasks);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TasksContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;tasks&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TasksDispatchContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;dispatch&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">TasksDispatchContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">TasksContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useHooks</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTasks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">TasksContext</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useTasksDispatch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useContext</span>(<span class="title class_">TasksDispatchContext</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tasksReducer</span>(<span class="params">tasks, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;added&quot;</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...tasks,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: action.<span class="property">id</span>,</span><br><span class="line">          <span class="attr">text</span>: action.<span class="property">text</span>,</span><br><span class="line">          <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;changed&quot;</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> tasks.<span class="title function_">map</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t.<span class="property">id</span> === action.<span class="property">task</span>.<span class="property">id</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> action.<span class="property">task</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;deleted&quot;</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> tasks.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t.<span class="property">id</span> !== action.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>: &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&quot;Unknown action: &quot;</span> + action.<span class="property">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialTasks = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&quot;Philosopher’s Path&quot;</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&quot;Visit the temple&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&quot;Drink matcha&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><code>useRef&lt;T&gt;(initState: T): &#123; curretn: T&#125;</code></p><p>数据由 React 保存，与 state 不同的是，ref 更变不触发 render 。</p><table><thead><tr><th align="center">ref</th><th align="center">state</th></tr></thead><tbody><tr><td align="center"><code>useRef&lt;T&gt;(initialValue: T): &#123; current: T&#125;</code></td><td align="center"><code>useState&lt;T&gt;(initState: T): [state: T, setState: (state: T) =&gt; void]</code></td></tr><tr><td align="center">更改时不会触发重新渲染</td><td align="center">更改时触发重新渲染。</td></tr><tr><td align="center">可变 —— 你可以在渲染过程之外修改和更新 current 的值。</td><td align="center">“不可变” —— 你必须使用 state 设置函数来修改 state 变量，从而排队重新渲染。</td></tr><tr><td align="center">你不应在渲染期间读取（或写入） current 值。</td><td align="center">你不应在渲染期间读取（或写入） current 值。</td></tr></tbody></table><p><strong>使用场景：</strong></p><ol><li><p>timeoutID</p></li><li><p>DOM</p></li><li><p>JSX</p></li></ol><h3 id="get-DOM"><a href="#get-DOM" class="headerlink" title="get DOM"></a>get DOM</h3><ol><li><p>字符串形式（回调形式简写，接收 DOM 赋值给 ref.current）</p></li><li><p>回调函数形式</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> buttonRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (buttonRef.current = c)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        聚焦输入框</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>React 内部：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useRef</span>(<span class="params">initialValue</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [ref, unused] = <span class="title function_">useState</span>(&#123; <span class="attr">current</span>: initialValue &#125;);</span><br><span class="line">  <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多 ref 管理：</strong></p><ol><li><p>ref 绑到父层，通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/querySelectorAll">querySelectorAll</a> 获取，但 DOM 结构发生变化，可能会失效。</p></li><li><p>通过 ref 回调的形式存储多个 DOM 至 map 中，map 也是需要通过 ref 保存。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> refs = <span class="title function_">useref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Singal model</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getRefs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!refs.<span class="property">current</span>) refs.<span class="property">current</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">return</span> refs.<span class="property">current</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;list.map((item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;(node)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            const refs = getRefs();</span></span><br><span class="line"><span class="language-xml">            if (node) refs.set(item.id, node);</span></span><br><span class="line"><span class="language-xml">            else refs.delete(item.id);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h3><p><strong>仅原生 DOM，自定义组件不生效且报错</strong>，但可以通过 <code>forwardRef</code> 将 <code>ref</code> 进行<strong>透传</strong>到内部 <strong>DOM</strong> 上，并返回给上层 ref 回调中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forwardRef, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyInput</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>聚焦输入框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h3><p>主动返回 DOM 节点。</p><p>通过 useImperativeHandle 返回一个对象给上层 ref 回调中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forwardRef, useRef, useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyInput</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> realInputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 只暴露 focus，没有别的</span></span><br><span class="line">    <span class="title function_">focus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      realInputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">ref</span>=<span class="string">&#123;realInputRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inputRef.<span class="property">current</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      //</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyInput</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span> =&gt;</span> (inputRef.current = c)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">            </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>聚焦输入框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h2><p><strong>渲染引起的副作用，渲染（包括初次）之后执行</strong>。</p><p>每一个 Effect 都是一个独立的同步过程，多个之间互不影响。</p><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>基础用法：</p><ol><li><p>声明 Effect</p></li><li><p>指定 Effect 依赖。</p></li><li><p>必要时添加 cleanup 清理函数。</p></li></ol><p>React 使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> 比较依赖项的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里的代码会在每次渲染后执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里的代码只会在组件挂载后执行</span></span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里的代码只会在每次渲染后，并且 a 或 b 的值与上次渲染不一致时执行</span></span><br><span class="line">  <span class="comment">// cleanup</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;, [a, b]);</span><br></pre></td></tr></table></figure><p>在依赖数组中可以省略 <strong>ref</strong>，React 保证每次渲染过程中调用 <strong>useRef</strong> 产生的引用对象时，获取的对象引用始终不变，但若 ref 由父层传递过来时需要添加到依赖数组中的。</p><blockquote><p>在开发环境中，React 会在初始挂载组件后，立即再挂载一次（压力测试）。</p></blockquote><p>因此开发环境下 Effect 会执行两次，此时就需要设置 cleanup 清理函数，来避免一些额外的副作用的出现。</p><h3 id="cleanup"><a href="#cleanup" class="headerlink" title="cleanup"></a>cleanup</h3><p><strong>执行时机：</strong></p><ol><li><p>组件卸载</p></li><li><p>执行下一轮渲染的 Effect 之前</p></li></ol><p><strong>工作原理：</strong><code>depArr -&gt; compare -&gt; isShouldSyncEffect</code></p><p><strong>生命周期：</strong></p><ol><li><p>开始同步</p></li><li><p>停止同步</p></li></ol><h3 id="useEffectEvent"><a href="#useEffectEvent" class="headerlink" title="useEffectEvent"></a>useEffectEvent</h3><p>将 Effect 中一些响应式数据包装起来，不作为依赖项，但 EffectEvent 中的函数仍是响应式的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChatRoom</span>(<span class="params">&#123; roomId, theme &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> onConnected = <span class="title function_">useEffectEvent</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">showNotification</span>(<span class="string">&quot;Connected!&quot;</span>, theme);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> connection = <span class="title function_">createConnection</span>(serverUrl, roomId);</span><br><span class="line">    connection.<span class="title function_">on</span>(<span class="string">&quot;connected&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">onConnected</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.<span class="title function_">connect</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> connection.<span class="title function_">disconnect</span>();</span><br><span class="line">  &#125;, [roomId]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to the &#123;roomId&#125; room!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Effect &amp; 事件处理：</strong></p><table><thead><tr><th align="center">Effect</th><th align="center">事件处理</th></tr></thead><tbody><tr><td align="center">需要同步的时候运行</td><td align="center">响应特定交互时运行</td></tr><tr><td align="center">内部的逻辑是响应式的</td><td align="center">函数内部的逻辑是非响应式的</td></tr></tbody></table><h2 id="Custom-Hooks"><a href="#Custom-Hooks" class="headerlink" title="Custom Hooks"></a>Custom Hooks</h2><p>状态逻辑共享，而不是状态本身。</p><p><code>effect -&gt; hooks</code></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一本摄影书</title>
      <link href="/2023/06/28/%E9%9A%8F%E7%AC%94/%E4%B8%80%E6%9C%AC%E6%91%84%E5%BD%B1%E4%B9%A6/"/>
      <url>/2023/06/28/%E9%9A%8F%E7%AC%94/%E4%B8%80%E6%9C%AC%E6%91%84%E5%BD%B1%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="一本摄影书"><a href="#一本摄影书" class="headerlink" title="一本摄影书"></a>一本摄影书</h1><h2 id="摄影基础知识"><a href="#摄影基础知识" class="headerlink" title="摄影基础知识"></a>摄影基础知识</h2><h3 id="曝光"><a href="#曝光" class="headerlink" title="曝光"></a>曝光</h3><p>光 -&gt; CMOS（感光元件） -&gt; 电流信号 -&gt; 图像文件 -&gt; 存储</p><p>对同一场景而言，光线越强，形成的电流信号越强，最终形成图像的时间也就越短。</p><p>曝光控制也就是确定拍摄中的各种参数：快门速度、光圈、ISO（曝光的三大要素）。</p><h4 id="快门"><a href="#快门" class="headerlink" title="快门"></a>快门</h4><p>快门实际上是 CMOS 的感光时间。</p><p>快门速度除了能直观影响进光量以外，还对清晰度有影响：短快门能能好的捕捉运动中的物体，同样也能减小相机不稳造成的模糊。</p><p>当然快门过短，可能导致曝光不足；快门过长，可能导致曝光过剩。</p><h4 id="光圈"><a href="#光圈" class="headerlink" title="光圈"></a>光圈</h4><p>控制镜头进光面积，f 值越大，光圈越小；f 值越小，光圈越大。</p><p><img src="https://s2.loli.net/2023/06/11/1t5feIXQ7q6kpli.png" alt="image-20230611150643789"></p><p>实际上光圈除了控制进光量，还影响着照片的<strong>景深</strong>（小景深大光圈）。</p><p>小光圈让远处的景色更加清晰，如同眯着眼睛看远处更清楚。</p><blockquote><p>小景深是指在摄影中，只有一小部分区域处于焦点范围内，而其他区域则呈现出模糊的效果。</p><p>通俗地说，就是主体清晰、背景虚化的效果。小景深通常由较大光圈（如f&#x2F;2.8、f&#x2F;1.8等）和较近拍摄距离所产生。</p></blockquote><p>至于光圈档数，我是这么理解的：0.8 -&gt; 1.6 -&gt; 3.2 -&gt; 6.4，小数部分四舍不五入 &#x3D;&gt; 0.8 -&gt; 1.6 -&gt; 3 -&gt; 6</p><h4 id="光圈和快门的关系（易倒率）"><a href="#光圈和快门的关系（易倒率）" class="headerlink" title="光圈和快门的关系（易倒率）"></a>光圈和快门的关系（易倒率）</h4><p>所谓控制变量嘛！</p><p>ISO 不变时，光圈大小和快门速度是可以<strong>互补</strong>的，也叫做<strong>易倒率</strong>。</p><p>比如你想拍风景，在 f&#x2F;4.0 下对应的快门速度是 1&#x2F;500s，但是拍风景需要小景深，这时候缩小三挡光圈：f&#x2F;4 -&gt; f&#x2F;5.6 -&gt; f&#x2F;8 -&gt; f&#x2F;11，快门速度则要延长三挡：1&#x2F;500s -&gt; 1&#x2F;250s -&gt; 1&#x2F;125s -&gt; 1&#x2F;60。</p><h4 id="感光度（ISO）"><a href="#感光度（ISO）" class="headerlink" title="感光度（ISO）"></a>感光度（ISO）</h4><p>感光元件对光的敏感度。</p><p>ISO越低，成像越清晰，但对光不够敏感，在光线不足的情况下，拍摄很困难。提高 ISO 有利于在暗环境下拍摄，但也会导致出现噪点，画质下降，不清晰。</p><p><img src="https://s2.loli.net/2023/06/11/rPQ2WmpM9zkRobD.png" alt="image-20230611154622340"></p><h3 id="如何得到更清晰的照片"><a href="#如何得到更清晰的照片" class="headerlink" title="如何得到更清晰的照片"></a>如何得到更清晰的照片</h3><h4 id="手势姿势和呼吸控制"><a href="#手势姿势和呼吸控制" class="headerlink" title="手势姿势和呼吸控制"></a>手势姿势和呼吸控制</h4><p><img src="https://s2.loli.net/2023/06/13/tl17g2MmHIAqan8.png" alt="image-20230613172256069"></p><h4 id="物理外挂"><a href="#物理外挂" class="headerlink" title="物理外挂"></a>物理外挂</h4><p>三脚架，但感觉怪麻烦的哈哈哈哈🤪</p><p>暂不考虑，跳过跳过！</p><h4 id="提高快门速度"><a href="#提高快门速度" class="headerlink" title="提高快门速度"></a>提高快门速度</h4><p>较高的快门速度可以将运动物体凝固。</p><p>曝光时间短，运动物体的影响在画面上所经过的距离就相应变短，在时间短到一定程度，运动物体的摄像便近乎静止。</p><p><strong>以焦距倒数为安全快门速度</strong>，在安全快门速度下可以保证成像清晰。</p><p>也就是说：50mm 镜头拍着 -&gt; 则快门速度要低于 1&#x2F;50s 即可保证成像清晰。</p><blockquote><p>但这种规律存在一些问题：</p><ol><li>与拍摄者的手持稳定性有关，若握持不稳定，则安全快门根本不能保证。</li><li>还是要根据对应的机器来做相应的调整。</li><li>对于有防抖的镜头，安全快门也可以大幅降低。</li></ol></blockquote><h4 id="防抖功能"><a href="#防抖功能" class="headerlink" title="防抖功能"></a>防抖功能</h4><p>相机的防抖功能是在镜头中加一块儿补偿镜片，在相机抖动是进行反向补偿，将抖动对成像的影响降低值最低。</p><p><img src="https://s2.loli.net/2023/06/13/E5w68KvoO4UJWS9.png" alt="image-20230613173723305"></p><h4 id="景深"><a href="#景深" class="headerlink" title="景深"></a>景深</h4><p>景深是指在一张照片或图像中，能够清晰呈现出的距离范围。通俗来说，就是在一张照片中，从前景到背景有多少部分是清晰的。</p><p>如果一张照片的景深很浅，那么只有很小的一部分是清晰的，而其他区域则会模糊或者变得不清楚。而如果照片的景深很深，那么整个画面的主体和背景都可以保持相对清晰的状态。</p><p><img src="https://s2.loli.net/2023/06/13/kDpaJLWgwR2Kn1P.png" alt="image-20230613181941478"></p><p>影响景深的因素主要有如下四点：</p><ol><li><p>光圈</p><p>光圈越大，景深越小；光圈越小，景深越大。</p><p>光圈越大，进光量更多。这种情况下只有靠近相机的物体才能处于焦点内，且靠近的物体需要较少的光线就能呈现清晰的图像。距离较远的则需要更多的光线才能显示清晰，因此会变得模糊虚化，即浅景深。 </p></li><li><p>焦距</p><p>焦距越长，景深越小；焦距越短，景深越大。</p><p>焦距越长，远处的物体越清晰，近处也就越模糊。</p></li></ol><p><img src="https://s2.loli.net/2023/06/13/wkJIui8X74EKrDS.png" alt="image-20230613184939626"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改typora字体</title>
      <link href="/2023/04/15/Tool/%E4%BF%AE%E6%94%B9typora%E5%AD%97%E4%BD%93/"/>
      <url>/2023/04/15/Tool/%E4%BF%AE%E6%94%B9typora%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="修改typora字体"><a href="#修改typora字体" class="headerlink" title="修改typora字体"></a>修改typora字体</h1><ol><li><p>打开主题文件夹</p><p><img src="https://s2.loli.net/2023/05/26/3ez9ZtSEDORqH7w.png" alt="image-20230526095620420"></p></li><li><p>打开对应主题的 css 文件，并备份</p><p><img src="https://s2.loli.net/2023/05/26/PVA87imQZ3vrfzp.png" alt="image-20230526095716062"></p></li><li><p>搜索 font-family 并修改，只需要修改 –font-family。（但也需要根据每个主题具体情况来）</p><p><img src="https://s2.loli.net/2023/05/26/NxDkEH9KTut6Foz.png" alt="image-20230526095809045"></p></li><li><p>大功告成！🎉</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React 笔记</title>
      <link href="/2023/04/14/React/React%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/14/React/React%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="关于-React"><a href="#关于-React" class="headerlink" title="关于 React"></a>关于 React</h2><ol><li><p>什么是 React？</p><p><strong>React</strong> 是一个用于构建用户界面的 JavaScript 库。</p><ul><li>是一个将数据渲染为 HTML 视图的开源 JS 库。</li><li>它遵循基于组件的方法，有助于构建可重用的 UI 组件。</li><li>它用于开发复杂的交互式的 web 和移动 UI。</li></ul></li><li><p>React 有什么特点？</p><ul><li>使用虚拟 DOM 而不是真正的 DOM。</li><li>它可以用服务器渲染。</li><li>它遵循单向数据流或数据绑定。</li><li>高效。</li><li>声明式编码，组件化编码。</li></ul></li><li><p>React 的一些主要优点？</p><ul><li><p>它提高了应用的性能。</p></li><li><p>可以方便在客户端和服务器端使用。</p></li><li><p>由于使用 JSX，代码的可读性更好。</p></li><li><p>使用React，编写 UI 测试用例变得非常容易。</p></li></ul></li></ol><h2 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h2><ol><li>定义虚拟DOM，不能使用<code>“”</code></li><li>标签中混入JS表达式的时候使用<code>&#123;&#125;</code>：<code>id = &#123;myId.toUpperCase()&#125;</code></li><li>样式的类名指定不能使用class，使用<code>className</code></li><li>内敛样式要使用<code>&#123;&#123;&#125;&#125;</code>包裹：<code>style=&#123;&#123;color:'skyblue',fontSize:'24px'&#125;&#125;</code></li><li>不能有多个根标签，只能有一个根标签。</li><li>标签必须闭合，自闭合也行。</li><li>如果小写字母开头，就将标签转化为 html 同名元素，如果 html 中无该标签对应的元素，就报错；如果是大写字母开头，react 就去渲染对应的组件，如果没有就报错。</li></ol><h1 id="面向组件编程"><a href="#面向组件编程" class="headerlink" title="面向组件编程"></a>面向组件编程</h1><p><strong>渲染类组件标签的基本流程</strong>：</p><ol><li>React 内部会创建组件实例对象。</li><li>调用<code>render()</code>得到虚拟 DOM ,并解析为真实 DOM。</li><li>插入到指定的页面元素内部。</li></ol><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.先创建函数，函数可以有参数，也可以没有，但是必须要有返回值 返回一个虚拟DOM</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.进行渲染</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title class_">Render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Welcom</span> <span class="attr">name</span> = <span class="string">&quot;ljc&quot;</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>));</span><br></pre></td></tr></table></figure><p>上面的代码经历了以下几步：</p><ol><li>我们调用 <code>ReactDOM.render()</code> 函数，并传入 <code>&lt;Welcome name=&quot;ljc&quot; /&gt;</code> 作为参数。</li><li>React 调用 <code>Welcome</code> 组件，并将 <code>&#123;name: &#39;ljc&#39;&#125;</code> 作为 props 传入。</li><li><code>Welcome</code> 组件将 <code>Hello, ljc</code> 元素作为返回值。</li><li>React DOM 将 DOM 高效地更新为 <code>Hello,ljc</code>。</li></ol><h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot?&#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.test&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>在优化过程中遇到的问题：</strong></p><ol><li><p>组件中的 render 方法中的 this 为组件实例对象。</p></li><li><p>组件自定义方法中由于开启了严格模式，this 指向 <code>undefined</code> 如何解决。</p><ul><li><p>通过 bind 改变 this 指向。</p></li><li><p>推荐采用箭头函数，箭头函数的 <code>this</code> 指向。</p></li></ul></li><li><p>state 数据不能直接修改或者更新。</p></li></ol><h2 id="组件实例的三大属性"><a href="#组件实例的三大属性" class="headerlink" title="组件实例的三大属性"></a>组件实例的三大属性</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote><p>React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。</p><p>React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p></blockquote><p>简单的说就是组件的状态，也就是该组件所存储的数据。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="comment">// this.state = &#123; weather: &#x27;凉爽&#x27; &#125;;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">weather</span>: <span class="string">&#x27;炎热&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.state.weather &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>state 即当前组件的实例属性。</p><p>在类组件中可以直接修改 state 值，但修改之后页面内容是不会变化的。</p><p>原因是 React 中不建议 <code>state</code>不允许直接修改，而是通过类的原型对象上的方法 <code>setState()</code></p><blockquote><p>页面的渲染靠的是 <code>render</code> 函数。</p></blockquote><p><strong>setState()</strong></p><p><code>this.setState(partialState, [callback]);</code></p><ul><li><code>partialState</code>：需要更新的状态的部分对象。</li><li><code>callback</code>：更新完状态后的回调函数。</li></ul><p>两种写法：</p><ol><li>对象形式：<code>this.setState(&#123; weather: &#39;凉爽&#39; &#125;)</code>;</li><li>回调形式：<code>this.setState(state =&gt; (&#123; count: state.count+1 &#125;));</code></li></ol><blockquote><p><code>setState</code> 是一种合并操作，并不是替换操作。</p><p>每一次调用 <code>setState</code> 将会触发 <code>render</code> 进行页面渲染，因此 <code>react</code> 内部会将本次更新所涉及到的所有 <code>setState</code> 进行收集合并，避免重复渲染。</p></blockquote><ul><li>在执行 <code>setState</code>操作后，React 会自动调用一次 <code>render()</code></li><li><code>render()</code> 的执行次数是 1+n (1 为初始化时的自动调用，n 为状态更新的次数)</li></ul><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>与<code>state</code>不同，<code>state</code>是组件自身的状态，而<code>props</code>则是外部传入的数据。</p><p><strong>类组件中：</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123; this.props.name &#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123; this.props.age &#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用的时候可以通过 <code>this.props</code> 来获取值 类式组件的 <code>props</code>:</p><ol><li>通过在组件标签上传递值，在组件中就可以获取到所传递的值</li><li>在构造器里的 <code>props</code> 参数里可以获取到 <code>props</code></li><li>可以分别设置 <code>propTypes</code> 和 <code>defaultProps</code> 两个属性来分别操作 <code>props</code> 的规范和默认值，两者都是直接添加在类式组件的<strong>原型对象</strong>上的（所以需要添加 <code>static</code> ）</li><li>同时可以通过 <code>...</code> 运算符来简化</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123; this.props.name &#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123; this.props.age &#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">    <span class="attr">age</span>: propTypes.<span class="property">string</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultPorps = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Akira&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 使用 */</span></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;AkiraIce&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;</span><br><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123; <span class="attr">...p</span> &#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>函数组件中：</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123; props.name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123; props.age &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数组件的 <code>props</code>定义:</p><ol><li>在组件标签中传递 <code>props</code>的值</li><li>组件函数的参数为 <code>props</code></li><li>对 <code>props</code>的限制和默认值同样设置在原型对象上</li></ol><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>如同 Vue 中的 ref，用来获取 DOM 节点的。</p><p>有三种操作<code>refs</code>的方法，分别为：</p><ul><li><p>字符串形式</p></li><li><p>回调形式</p></li><li><p><code>createRef</code>形式</p></li></ul><ol><li><p>字符串形式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  inputHanddle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; input &#125; = <span class="variable language_">this</span>.<span class="property">refs</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>回调形式</p><p>ref 的回调函数将自动接收当前 DOM 节点。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input ref=&#123; <span class="function"><span class="params">c</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">input1</span> = c &#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>createRef 形式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title class_">MyRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  <span class="title class_">MyRef1</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//调用</span></span><br><span class="line">  btnOnClick = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//创建之后，将自身节点，传入current中</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">MyRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.MyRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击弹出&quot;</span> /&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.MyRef1&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击弹出&quot;</span> /&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击事件</p><p>React 使用的是自定义事件，而不是原生的 DOM 事件</p><p>React 的事件是通过事件委托方式处理的（为了更加的高效）</p><p>可以通过事件的 <code>event.target</code>获取发生的 DOM 元素对象，可以尽量减少 <code>refs</code>的使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  clickHanddle = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.clickHanddle</span> &#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        )</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>React 生命周期主要包括三个节点：初始化阶段、更新阶段、销毁阶段。</p><h2 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p><code>constructor</code> 在组建初始化的时候只会执行一次。</p><p>通常它用于做这两件事</p><ol><li>初始化函数内部 <code>state</code></li><li>绑定函数</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进入构造器&#x27;</span>);</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static-getDerivedStateFormPorps"><a href="#static-getDerivedStateFormPorps" class="headerlink" title="static getDerivedStateFormPorps"></a>static getDerivedStateFormPorps</h3><p>这是 React 新版本中新增的两个钩子之一，据说很少用。</p><p><code>getDerivedStateFormProps</code> 在初始化和更新中都会被调用，它接收两个参数 <code>props</code> 和 <code>state</code>，且在 <code>render</code> 方法之前调用，它返回一个对象用来更新 <code>state</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedFromProps</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">count</span>: props.<span class="property">count</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123; this.count &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Component</span> count=<span class="string">&quot;111&quot;</span>&gt; <span class="comment">// 111</span></span><br></pre></td></tr></table></figure><h3 id="componentWillMount（即将废除）"><a href="#componentWillMount（即将废除）" class="headerlink" title="componentWillMount（即将废除）"></a>componentWillMount（即将废除）</h3><blockquote><p>如果存在 <code>getDerivedStateFromProps</code> 和 <code>getSnapshotBeforeUpdate</code> 就不会执行生命周期<code>componentWillMount</code></p></blockquote><p>该方法只在挂在的时候调用一次，表示组件将要挂载，并且在 <code>render</code> 方法之前调用。</p><p>这个方法在 React 18版本中将要被废弃，官方解释是在 React 异步机制下，如果滥用这个钩子可能会有 Bug。</p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p><code>render</code> 方法是组件中必须实现的方法，用于渲染 DOM，但是它不会真正的操作 DOM，它的作用是吧需要的东西返回出去，实现渲染 DOM 操作的是 <code>ReactDOM.render()</code></p><blockquote><p>注意：避免在 <code>render</code> 中使用 <code>setState</code>，否则会死循环，因为每一次 setState 将会重新执行 render 一次。</p></blockquote><h3 id="初始化阶段总结"><a href="#初始化阶段总结" class="headerlink" title="初始化阶段总结"></a>初始化阶段总结</h3><p>执行顺序 <code>constructor</code> -&gt; <code>getDerivedStateFromProps</code> 或者 <code>componentWillMount</code> -&gt; <code>render</code> -&gt; <code>componentDidMount</code></p><p><img src="https://s2.loli.net/2023/06/25/VP1UJLka35hc9eH.png" alt="image-20230625151832472"></p><h2 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h2><p><img src="https://s2.loli.net/2023/06/25/IOpzrCiUkZDKAf6.png" alt="image-20230625145804292"></p><h3 id="getDeriveStateFormProps"><a href="#getDeriveStateFormProps" class="headerlink" title="getDeriveStateFormProps"></a>getDeriveStateFormProps</h3><p>执行生命周期<code>getDerivedStateFromProps</code>， 返回的值用于合并 <code>state</code>，生成新的<code>state</code>。</p><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p><code>shouldComponentUpdate()</code> 在组件更新之前调用，可以通过返回值来控制组件是否更新，允许更新返回 <code>true</code> ，反之不更新。</p><h3 id="render-1"><a href="#render-1" class="headerlink" title="render"></a>render</h3><p>在控制是否更新的函数中，如果返回 <code>true</code> 才会执行 <code>render</code> ,得到最新的 <code>React element</code></p><h3 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h3><p>在最近一次的渲染输出之前被提交之前调用，也就是即将挂载时调用。</p><p>相当于淘宝购物的快照，会保留下单前的商品内容，在 React 中就相当于是 即将更新前的状态。</p><blockquote><p>它可以使组件在 DOM 真正更新之前捕获一些信息（例如滚动位置），此生命周期返回的任何值都会作为参数传递给 <code>componentDidUpdate()</code>。如不需要传递任何值，那么请返回 null。</p></blockquote><h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><p>组件在更新完毕后会立即被调用，首次渲染不会调用。</p><h2 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h2><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p>在组件即将被卸载或销毁时进行调用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>初始化</strong></p><ul><li>constructor()</li><li>static getDerivedStateFromProps()</li><li>render()</li><li>componentDidMount()</li></ul><p><strong>更新</strong></p><ul><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate()</li></ul><p><strong>销毁</strong></p><ul><li>componentWillUnmount()</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>padding 导致滚动内容不全</title>
      <link href="/2023/03/14/bugRoad/padding%20%E5%AF%BC%E8%87%B4%E6%BB%9A%E5%8A%A8%E5%86%85%E5%AE%B9%E4%B8%8D%E5%85%A8/"/>
      <url>/2023/03/14/bugRoad/padding%20%E5%AF%BC%E8%87%B4%E6%BB%9A%E5%8A%A8%E5%86%85%E5%AE%B9%E4%B8%8D%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="padding-导致滚动内容不全"><a href="#padding-导致滚动内容不全" class="headerlink" title="padding 导致滚动内容不全"></a>padding 导致滚动内容不全</h1><p>如果元素的上下 Padding 过大，可能会导致元素的内容溢出并隐藏，从而导致滚动不全的问题。这是因为元素的高度被上下 Padding 增加，而容器的高度没有相应地增加，导致内容被裁剪。这种情况下，可以考虑以下两种方法来解决问题：</p><h2 id="使用-box-sizing-属性"><a href="#使用-box-sizing-属性" class="headerlink" title="使用 box-sizing 属性"></a>使用 <code>box-sizing</code> 属性</h2><p><code>box-sizing</code> 属性可以用来调整元素盒模型的布局方式，从而避免上下 Padding 对元素高度的影响。通过将元素的 <code>box-sizing</code> 属性设置为 <code>border-box</code>，可以使元素的内边距和边框大小被包含在元素的总宽度和高度内，不会对元素的高度产生影响。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用内部容器元素"><a href="#使用内部容器元素" class="headerlink" title="使用内部容器元素"></a>使用内部容器元素</h2><p>如果上述方法无法解决问题，可以考虑在元素内部添加一个容器元素，并将上下 Padding 应用到容器元素上，而不是应用到外部元素上。这样可以避免上下 Padding 对元素高度的影响，同时保证元素的内容不会被裁剪。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner-element&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.element</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 其他样式 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.inner-element</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>.inner-element</code> 元素被用作容器元素，上下 Padding 被应用到了容器元素上，而不是应用到外部的 <code>.element</code> 元素上。这样可以避免上下 Padding 对元素高度的影响，并保证元素的内容不会被裁剪。</p><p>需要注意的是，上述两种解决方法都需要根据实际情况进行调整和适配，以达到最佳的效果。同时，在调整元素的上下 Padding 时，也需要考虑元素的内容和布局需求，以避免出现其他的问题。</p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端埋点</title>
      <link href="/2023/03/10/JS/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9/"/>
      <url>/2023/03/10/JS/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="前端埋点"><a href="#前端埋点" class="headerlink" title="前端埋点"></a>前端埋点</h1><h2 id="什么是埋点？"><a href="#什么是埋点？" class="headerlink" title="什么是埋点？"></a>什么是埋点？</h2><p>前端埋点是一种在 Web 应用程序中用于监控和记录用户行为的技术，通常通过客户端脚本来实现。</p><p>前端埋点可以对用户访问网站的路径、浏览器信息、操作行为、错误日志等进行跟踪和分析。通过收集这些数据，开发人员可以更好地了解用户使用应用程序的方式，并做出相应的决策来优化用户体验和提高应用程序的性能。</p><h2 id="埋点方式"><a href="#埋点方式" class="headerlink" title="埋点方式"></a>埋点方式</h2><p>目前常见的埋点上报方式有：ajax、img、navigator.sendBeacon。</p><h3 id="基于-ajax-的埋点上报"><a href="#基于-ajax-的埋点上报" class="headerlink" title="基于 ajax 的埋点上报"></a>基于 ajax 的埋点上报</h3><p>埋点实际上是对关键节点的数据进行上报和服务端交互的一个过程，因此与后端约定的接口是必要的。</p><p>实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buryingPointAjax</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resole, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：一般而言，埋点域名不是当前域名，因此请求存在跨域问题。</p><h3 id="基于-img-的埋点上报"><a href="#基于-img-的埋点上报" class="headerlink" title="基于 img 的埋点上报"></a>基于 img 的埋点上报</h3><p>介于 ajax 可能存在跨域问题，我们采用一些支持跨域的标签无疑是更好的选择，比如：script、link、img。</p><p>但 script 以及 link 是需要创建 dom 节点，并挂载到页面上的，反复操作 dom 必然会导致页面的卡顿，并且载入 js&#x2F;css 资源还会阻塞页面的渲染，因此这俩并不合适。</p><p>img 标签本身不会阻塞页面的解析和渲染，因为浏览器此时采用的是渐进式渲染，在遇到 img 标签时，会立即下载图片资源，并不会等待图片加载完成后在继续解析和渲染下面的内容，而是预留相应的空间保证后续的渲染。</p><p>实现方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buryingPointImg = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">buryingPointImg.<span class="property">src</span> = <span class="string">&quot;http://example.com/xxx.png&quot;</span>;</span><br></pre></td></tr></table></figure><p>优点：</p><ol><li>img 兼容性好</li><li>无需挂载到 dom，反复操作 dom</li><li>img 的加载不会阻塞页面的解析与渲染</li></ol><p>缺点：不适合处理大量数据和复杂的同级需求</p><blockquote><p>通常埋点上报会使用 GIF 图，合法的 GIF 只需要 43 个字节。</p></blockquote><h3 id="基于-Navigator-sendBeanCon-的埋点上报"><a href="#基于-Navigator-sendBeanCon-的埋点上报" class="headerlink" title="基于 Navigator.sendBeanCon 的埋点上报"></a>基于 Navigator.sendBeanCon 的埋点上报</h3><p><code>Navigator.sendBeanCon(url: string, params: any)：boolean</code></p><p>该方法是通过 HTTP POST 将少量数据，异步传输到服务器，避免了传统技术（XML）发送数据的一些问题。</p><p><code>navigator.sendBeacon()</code> 方法将数据发送到服务器时，这个方法会在后台异步地创建一个 HTTP 请求，并将数据发送给指定的 URL，并返回一个 boolean 值：true 表示成功加入执行队列，false 表示因浏览器执行队列栈已满，未加入其中，因此发的返回值并不能判断请求是否成功，但浏览器会尽力保证。</p><p>优点：</p><ol><li>相对于 img，更加规范，数据上传可以传输资源类型更多。</li><li>异步传输，不回影响页面之间跳转，且不受同域限制。</li></ol><h2 id="常见埋点"><a href="#常见埋点" class="headerlink" title="常见埋点"></a>常见埋点</h2><h3 id="点击触发埋点"><a href="#点击触发埋点" class="headerlink" title="点击触发埋点"></a>点击触发埋点</h3><p>绑定点击事件，当点击目标元素时，触发埋点上报。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clickButton</span>(<span class="params">url, data</span>) &#123;</span><br><span class="line">  navigator.<span class="title function_">sendBeacon</span>(url, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面停留时间上报埋点"><a href="#页面停留时间上报埋点" class="headerlink" title="页面停留时间上报埋点"></a>页面停留时间上报埋点</h3><p>路由文件中，初始化一个 startTime，当页面离开时通过路由守卫计算停留时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&quot;&quot;</span>; <span class="comment">// 上报地址</span></span><br><span class="line"><span class="keyword">let</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="keyword">let</span> currentTime = <span class="string">&quot;&quot;</span>;</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to) &#123;</span><br><span class="line">    currentTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    stayTime = <span class="built_in">parseInt</span>(currentTime - startTime);</span><br><span class="line">    navigator.<span class="title function_">sendBeacon</span>(url, &#123; <span class="attr">time</span>: stayTime &#125;);</span><br><span class="line">    startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="错误监听埋点"><a href="#错误监听埋点" class="headerlink" title="错误监听埋点"></a>错误监听埋点</h3><p>通过监听函数去接收错误信息。</p><h4 id="vue-错误捕获"><a href="#vue-错误捕获" class="headerlink" title="vue 错误捕获"></a>vue 错误捕获</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">config</span>.<span class="property">errorHandler</span> = <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  navigator.<span class="title function_">sendBeacon</span>(url, &#123; <span class="attr">error</span>: error.<span class="property">message</span>, <span class="attr">text</span>: <span class="string">&quot;vue运行异常&quot;</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="JS-异常与静态资源加载异常"><a href="#JS-异常与静态资源加载异常" class="headerlink" title="JS 异常与静态资源加载异常"></a>JS 异常与静态资源加载异常</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;error&quot;</span>,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">message</span>) &#123;</span><br><span class="line">      navigator.<span class="title function_">sendBeacon</span>(url, &#123; <span class="attr">error</span>: error.<span class="property">message</span>, <span class="attr">text</span>: <span class="string">&quot;js执行异常&quot;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      navigator.<span class="title function_">sendBeacon</span>(url, &#123; <span class="attr">error</span>: error.<span class="property">filename</span>, <span class="attr">text</span>: <span class="string">&quot;资源加载异常&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="请求错误捕获"><a href="#请求错误捕获" class="headerlink" title="请求错误捕获"></a>请求错误捕获</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回错误逻辑</span></span><br><span class="line">    navigator.<span class="title function_">sendBeacon</span>(url, &#123; <span class="attr">error</span>: error, <span class="attr">text</span>: <span class="string">&quot;请求错误异常&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="内容可见埋点"><a href="#内容可见埋点" class="headerlink" title="内容可见埋点"></a>内容可见埋点</h3><p>通过交叉观察器去监听当前元素是否出现在页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可见性发生变化后的回调</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  navigator.<span class="title function_">sendBeacon</span>(url, &#123; <span class="attr">target</span>: data[<span class="number">0</span>].<span class="property">target</span>, <span class="attr">text</span>: <span class="string">&quot;内容可见&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 交叉观察器配置项</span></span><br><span class="line"><span class="keyword">let</span> options = &#123;&#125;;</span><br><span class="line"><span class="comment">// 生成交叉观察器</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback);</span><br><span class="line"><span class="comment">// 获取目标节点</span></span><br><span class="line"><span class="keyword">let</span> target = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;target&quot;</span>);</span><br><span class="line"><span class="comment">// 监听目标元素</span></span><br><span class="line">observer.<span class="title function_">observe</span>(target);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://mp.weixin.qq.com/s/yV35Fy1lGWbeH5AS97Hzjg">三分钟，教你 3 种前端埋点方式！</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js</title>
      <link href="/2023/03/05/vue/Nuxt/Nuxt.js%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/05/vue/Nuxt/Nuxt.js%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Nuxt-js"><a href="#Nuxt-js" class="headerlink" title="Nuxt.js"></a>Nuxt.js</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>使用 npx</p><p><code>npx create-nuxt-app &lt;项目名&gt;</code></p></li><li><p>使用 yarn</p><p><code>yarn create-nuxt-app &lt;项目名&gt;</code></p></li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>约定俗成的目录结构 -&gt; 良好的起点</p><h3 id="nuxt"><a href="#nuxt" class="headerlink" title=".nuxt"></a>.nuxt</h3><p>生产目录，由 nuxt 自动生成的一些文件。</p><h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><p>nuxt 根据该目录自动生成路由配置，也就是通常所熟知的路由组件的位置。</p><p>不同的是，nuxt 在原有的基础上增加了一些特殊的属性。</p><p><strong>动态路由</strong></p><p>类似动态设置路由的 params 参数，通过  <code>_paramName.vue</code> 创建路由组件。</p><p><strong>忽略路由</strong></p><p>倘若需要忽略某些路由，通过 <code>-xxx.vue</code> 即可。</p><p>当通过 <code>/paramValue</code> 访问时，可通过上下文(context.params)可接收 paramValue。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; slug &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    async asyncData(&#123; params &#125;) &#123;</span><br><span class="line">      const slug = params.slug // When calling /abc the slug will be &quot;abc&quot;</span><br><span class="line">      return &#123; slug &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>额外的配置</strong></p><ol><li><p>asyncData: Function</p><p>组件加载前调用，可接受一个 context 函数参数，即当前页面上下文，返回值将被 nuxt 混入到 data 中去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">asyncData</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fetch: Function</p><p>用于获取异步数据，和 asyncData 类似，但只能在服务端路由渲染时调用，且只在首次加载页面时触发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        posts: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    async fetch() &#123;</span><br><span class="line">      this.posts = await fetch(&#x27;https://api.nuxtjs.dev/posts&#x27;).then(res =&gt;</span><br><span class="line">        res.json()</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>head: Function</p><p>设置当前页面的一些 head 信息，nuxt 通过 <code>vue-meta</code> 进行更新。</p></li><li><p>layout: String</p><p>配置当前页面的布局。</p></li><li><p>loading: Boolean</p><p>配置当前是否使用顶部加载样式。</p><p>若设为 false，可手动通过 <code>this.$nuxt.$loading.finish()</code> 和 <code>this.$nuxt.$loading.start()</code>。</p></li><li><p>transition: Object</p><p>配置页面动效。</p></li><li><p>scrollToTop: Boolean</p><p>配置当前页面是否回调顶部。</p></li><li><p>middleware: String | Array</p><p>配置当前页面中间件，将在页面渲染前调用。</p></li><li><p>key: String</p><p>类似 Vue 组件上的 key，只不过这里是作用在 router-link 上。</p></li></ol><h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3><p>非路由组件。</p><p>通过 nuxt.config.js 下的 components 配置是否自动扫描 components 下的所有组件。</p><p><strong>懒加载</strong></p><p>直接在组件前面加上 <code>Lazy</code> 即可，在一些事件之后加载渲染组件。</p><p><strong>嵌套路由</strong></p><p>例如以下目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components/</span><br><span class="line">  base/</span><br><span class="line">      foo/</span><br><span class="line">         CustomButton.vue</span><br></pre></td></tr></table></figure><p>得到的最终路由：<code>&lt;BaseFooCustomButton /&gt;</code></p><h3 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h3><p>资源文件：Stylus、Sass、images、fonts。</p><p><strong>Images</strong></p><p>在 template 中，可通过 <code>~/assets/xxx.png</code> 访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;~/assets/your_image.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但在 css 文件中，则不需要斜杠。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;~assets/banner.svg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>Styles</strong></p><p>nuxt 允许通过 nuxt.config.js 配置全局样式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">    <span class="comment">// Load a Node.js module directly (here it&#x27;s a Sass file)</span></span><br><span class="line">    <span class="string">&#x27;bulma&#x27;</span>,</span><br><span class="line">    <span class="comment">// CSS file in the project</span></span><br><span class="line">    <span class="string">&#x27;~/assets/css/main.css&#x27;</span>,</span><br><span class="line">    <span class="comment">// SCSS file in the project</span></span><br><span class="line">    <span class="string">&#x27;~/assets/css/main.scss&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>静态资源，改目录下一般包含一些永远不会改变的资源，且将会直接映射到服务器的根目录下。</p><p>static 下的文件可通过 <code>/</code> 直接访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Static image from static directory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/my-image.png&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- webpacked image from assets directory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;~/assets/my-image-2.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>若 nuxt.config.js 中配置了 router.base 属性，项目将在子目录下部署，届时就需要加上 base 才能访问到静态资源。</p><p>当然也可以通过配置 static.prefix 为 false 来取消前缀。</p><h3 id="nuxt-config-js"><a href="#nuxt-config-js" class="headerlink" title="nuxt.config.js"></a>nuxt.config.js</h3><p>nuxt 的配置文件。</p><ol><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-alias/">alias</a></p><p>配置目录别名。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-build/">build</a></p><p>配置 webpack，包括 loader、filenames、transpilation。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-css/">css</a></p><p>配置全局 css 文件。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-generate/">generate</a></p><p>命令 <code>nuxt g</code> 相关配置。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-head/">head</a></p><p>配置 web head。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-loading/">loading</a></p><p>配置页面加载。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-modules/">modules</a></p><p>加载第三方库。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-plugins/">plugins</a></p><p>加载插件。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-router/">router</a></p><p>配置 nuxt 路由。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-server/">server</a></p><p>配置服务相关属性。</p></li><li><p>srcDir</p><p>配置当前 nuxt 应用的源目录。</p></li><li><p>.gitignore</p><p>配置忽略文件。</p></li></ol><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p><img src="https://www.nuxtjs.cn/nuxt-views-schema.svg" alt="nuxt-views-schema"></p><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>同 Vue 组件一致，只不过 nuxt 为每一个页面添加了一些特殊的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1 class=&quot;red&quot;&gt;Hello &#123;&#123; name &#125;&#125;!&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    asyncData (context) &#123;</span><br><span class="line">      // called every time before loading the component</span><br><span class="line">      return &#123; name: &#x27;World&#x27; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    fetch () &#123;</span><br><span class="line">      // The fetch method is used to fill the store before rendering the page</span><br><span class="line">    &#125;,</span><br><span class="line">    head () &#123;</span><br><span class="line">      // Set Meta Tags for this Page</span><br><span class="line">    &#125;,</span><br><span class="line">    // and more functionality to discover</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .red &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>配置项：</p><blockquote><p>只要是函数式写法，第一个参数都可以接收到当前页面的上下文(context)。</p></blockquote><ol><li><p><code>asyncData: Function</code></p><p>服务端获取并渲染数据，asyncData 在组件<strong>初始化之前</strong>执行。</p></li><li><p><code>fetch: Function</code></p><p>用于渲染前处理状态机(store)中的数据，与 <code>asyncData</code> 方法类似，但他不会设置组件的数据。</p></li><li><p><code>head: Object | Function</code></p><p>配置head、html。</p></li><li><p><code>key: String | Function</code></p><p>配置 <code>&lt;router-view&gt;</code> 组件的 <code>key</code> 属性。</p></li><li><p><code>layout: String | Function</code></p><p>配置页面布局文件。</p></li><li><p><code>loading: Boolean</code></p><p>配置是否加载进度条选项。</p></li><li><p><code>middleware: String | Array</code></p><p>配置中间件文件。</p></li><li><p><code>scrollToTop: Boolean</code></p><p>控制页面渲染前是否滚动至页面顶部。</p></li><li><p><code>transition: String | Object | Function</code></p><p>配置过渡动效。</p></li><li><p><code>validate: (context: any) =&gt; Boolean</code></p><p>配置路由参数校验。</p></li><li><p><code>watchQuery: Boolean | Array</code></p><p>监听属性变化，执行所有组件方法(asyncData, fetch, validate, layout,…)</p></li></ol><h4 id="动态页面"><a href="#动态页面" class="headerlink" title="动态页面"></a>动态页面</h4><p>通过 _name.vue 来实现动态参数的页面，name 将整合到路由的 params 参数中。</p><h4 id="忽略页面"><a href="#忽略页面" class="headerlink" title="忽略页面"></a>忽略页面</h4><p>通过 -name.vue 来实现。</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>layout 目录下创建自定义布局。</p><h4 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h4><p>入口：<code>layouts/default.vue</code></p><p><strong>注意</strong>：在布局文件中需要添加 <code>&lt;nuxt/&gt;</code> 组件用于显示页面的主体内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nuxt /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h4><p>每个页面可以配置独自的布局，自定义布局文件应在 <code>layouts</code> 目录下，且需要确保在布局文件中添加 <code>&lt;Nuxt/&gt;</code> 来显示页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/** layouts/blob.vue */</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;My blog navigation bar here&lt;/div&gt;</span><br><span class="line">    &lt;Nuxt /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">/** pages/posts.vue */</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- Your template --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    layout: &#x27;blog&#x27;</span><br><span class="line">    // page component definitions</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/** layouts/error.vue */</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 v-if=&quot;error.statusCode === 404&quot;&gt;Page not found&lt;/h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;An error occurred&lt;/h1&gt;</span><br><span class="line">    &lt;NuxtLink to=&quot;/&quot;&gt;Home page&lt;/NuxtLink&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: [&#x27;error&#x27;],</span><br><span class="line">    layout: &#x27;error&#x27; // you can set a custom layout for the error page</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="app-html"><a href="#app-html" class="headerlink" title="app.html"></a>app.html</h3><p>可根据 nuxt.config.js 中的配置动态配置根入口文件的相关属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> &#123;&#123; <span class="attr">HTML_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span> &#123;&#123; <span class="attr">HEAD_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">    &#123;&#123; HEAD &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> &#123;&#123; <span class="attr">BODY_ATTRS</span> &#125;&#125;&gt;</span></span><br><span class="line">    &#123;&#123; APP &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><p><img src="https://s2.loli.net/2023/05/31/6wLcWYTUzMymNOZ.png" alt="c12c33"></p><p>context 在 nuxt 提供的一些函数中是可用的，比如：asyncData、plugins、middleware、nuxtServerInit，其属性如上图。</p><blockquote><p>不要与 action 中的 context 混淆！</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> (<span class="params">context</span>) &#123; <span class="comment">// Could be asyncData, nuxtServerInit, ...</span></span><br><span class="line">  <span class="comment">// Always available</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    app,</span><br><span class="line">    store,</span><br><span class="line">    route,</span><br><span class="line">    params,</span><br><span class="line">    query,</span><br><span class="line">    env,</span><br><span class="line">    isDev,</span><br><span class="line">    isHMR,</span><br><span class="line">    redirect,</span><br><span class="line">    error,</span><br><span class="line">    $config</span><br><span class="line">  &#125; = context</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Only available on the Server-side</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">server</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; req, res, beforeNuxtRender, beforeSerialize &#125; = context</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Only available on the Client-side</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">client</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="keyword">from</span>, nuxtState &#125; = context</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取路由-params-参数"><a href="#获取路由-params-参数" class="headerlink" title="获取路由 params 参数"></a>获取路由 params 参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">asyncData</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = context.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Using the nuxtjs/http module here exposed via context.app</span></span><br><span class="line">      <span class="keyword">const</span> post = <span class="keyword">await</span> context.<span class="property">app</span>.<span class="property">$http</span>.$get(</span><br><span class="line">        <span class="string">`https://api.nuxtjs.dev/posts/<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> &#123; post &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      context.<span class="title function_">error</span>(e) <span class="comment">// Show the nuxt error page with the thrown error</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问-store-并重定向（鉴权）"><a href="#访问-store-并重定向（鉴权）" class="headerlink" title="访问 store 并重定向（鉴权）"></a>访问 store 并重定向（鉴权）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">middleware</span>(<span class="params">&#123; store, redirect &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// retrieving keys via object destructuring</span></span><br><span class="line">    <span class="keyword">const</span> isAuthenticated = store.<span class="property">state</span>.<span class="property">authenticated</span></span><br><span class="line">    <span class="keyword">if</span> (!isAuthenticated) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Helper"><a href="#Helper" class="headerlink" title="Helper"></a>Helper</h2><p>nuxt 的辅助器。</p><h3 id="nuxt-1"><a href="#nuxt-1" class="headerlink" title="$nuxt"></a>$nuxt</h3><p><code>$nuxt</code> 可以在 vue 组件中通过 <code>this.$nuxt</code> 访问，在客户端也可以通过 <code>window.$nuxt</code> 访问。</p><h4 id="检查用户是否联网"><a href="#检查用户是否联网" class="headerlink" title="检查用户是否联网"></a>检查用户是否联网</h4><p><code>$nuxt.isOffline</code> 提供了快速查明用户是否连接互联网。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;$nuxt.isOffline&quot;</span>&gt;</span>You are offline<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Nuxt</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="刷新页面数据"><a href="#刷新页面数据" class="headerlink" title="刷新页面数据"></a>刷新页面数据</h4><p><code>$nuxt.refresh</code> 方法将重新调用 asyncData、fetch 重新获取数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; content &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;refresh&quot;</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">asyncData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; <span class="attr">content</span>: <span class="string">&#x27;Created at: &#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">refresh</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$nuxt</span>.<span class="title function_">refresh</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="控制加载条"><a href="#控制加载条" class="headerlink" title="控制加载条"></a>控制加载条</h4><p>可通过 <code>$nuxt.$loading</code> 实现对加载条的控制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$nuxt</span>.<span class="property">$loading</span>.<span class="title function_">start</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">$nuxt</span>.<span class="property">$loading</span>.<span class="title function_">finish</span>(), <span class="number">500</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="window-onNuxtReady"><a href="#window-onNuxtReady" class="headerlink" title="window.onNuxtReady"></a>window.onNuxtReady</h3><p>在 nuxt 应用加载就绪之后执行一些回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">onNuxtReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Nuxt is ready and mounted&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p>nuxt 集成了三个标志（client、server、static），用于判断当前应用程序在服务器、客户端或静态站点上呈现，通常在 asyncData 中使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am rendered on the &#123;&#123; renderedOn &#125;&#125; side<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">asyncData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; <span class="attr">renderedOn</span>: process.<span class="property">client</span> ? <span class="string">&#x27;client&#x27;</span> : <span class="string">&#x27;server&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><p>服务端渲染，nuxt 亦为此而生，所谓服务端渲染，即在服务端进行页面编译解析成 html，再交给客户端渲染，至此不需要浏览器进行 js 的解析以及执行。</p><p>Node.js server 是必要的：</p><ol><li>js 的执行需要 node 环境的。</li><li>node 环境还需要做一些配置来实现编译执行 vue 应用。</li></ol><p>nuxt 也可以通过 serverMiddleware 来拓展和控制服务端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** server-middleware/logger.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** nuxt.config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">serverMiddleware</span>: [<span class="string">&#x27;~/server-middleware/logger&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是在服务端的原因，通常情况是不可以访问到浏览器独有的 <code>window</code> 对象的，只能在  <code>beforeMount</code> 和 <code>mounted</code> 中访问。</p><p>ssr的步骤：</p><ol><li><p>客户端 -&gt; 服务端</p><p>浏览器给 nodejs 服务端发出初始化请求。Nuxt 将生成 html 并返回给浏览器，并且会执行 asyncData、nuxtServerInit、Fetch。</p></li><li><p>服务端 -&gt; 浏览器</p><p>浏览器接收到 html 进行渲染页面，然后 Vue.js 的 hydration 机制开始运作，使页面响应式，进而实现页面交互。</p></li><li><p>浏览器 -&gt; 浏览器</p><p>页面之间的跳转通过 <code>&lt;NuxtLink&gt;</code> 来完成，除非你刷新页面，整个 ssr 流程将重新进行。</p></li></ol><p>注意事项：</p><ol><li><p>window or document is undefined</p><p>这基本是由于在服务端执行的缘故，建议使用 <code>process.cilent</code> 判断之后执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">client</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;external_library&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Nuxt生命周期"><a href="#Nuxt生命周期" class="headerlink" title="Nuxt生命周期"></a>Nuxt生命周期</h2><p><img src="https://s2.loli.net/2023/06/01/vpoL8D9CRBxzMae.png" alt="de48ca"></p><p>下面是常用的生命周期：</p><ol><li><p><code>nuxtServerInit</code></p><p>在服务器渲染间执行的方法，初始化 Vuex 的状态或从 API 中获取数据等操作。</p></li><li><p><code>middleware</code></p><p>执行相关的中间件，顺序是：Global middleware -&gt; Layout middleware -&gt; Route middleware。</p></li><li><p><code>asyncData</code></p><p>在组件渲染前运行，在客户端和服务端都可以执行。用于异步获取数据在渲染，通常和服务端配合使用。</p></li><li><p><code>fetch</code></p><p>组件实例化之后，在页面加载前执行。主要用于客户端获取数据，不支持服务端渲染。</p></li><li><p><code>created</code></p><p>在组件实例化后立即被调用，在服务器端和客户端均可用。常用于初始化数据请求和事件监听器等任务。</p></li><li><p><code>mounted</code></p><p>在组件挂载到页面上后调用，只能在客户端中使用。适合进行 DOM 操作和使用第三方库初始化页面。</p></li><li><p><code>updated</code></p><p>在组件更新时被调用，只能在客户端中使用。常用于更新数据和操作 DOM。</p></li><li><p><code>beforeDestory</code></p><p>在组件被销毁之前调用，适合做一些清理工作或者事件解绑定等任务。</p></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>nuxt 将根据 pages 目录下文件自动生成路由配置。</p><h3 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h3><p>文件树：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| user/</span><br><span class="line">-----| index.vue</span><br><span class="line">-----| one.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>自动生成路由配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">router</span>: &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/user/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user-one&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/one&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/user/one.vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>类似原 vue-router 中 <code>/:id</code>，在 nuxt 中通过 <code>_id.vue</code> 这种下划线命名方式实现。</p><p>文件树：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| _slug/</span><br><span class="line">-----| comments.vue</span><br><span class="line">-----| index.vue</span><br><span class="line">--| users/</span><br><span class="line">-----| _id.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>自动生成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">router</span>: &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;users-id&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/users/:id?&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/users/_id.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;slug&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/:slug&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/_slug/index.vue&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;slug-comments&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/:slug/comments&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/_slug/comments.vue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><p>在路由组件本地可通过 <code>this.$route.params.parameterName</code>。</p><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>即子路由。nuxt 中通过创建于子目录同名的 vue 文件实现。</p><blockquote><p>注意：需要在父级添加 <code>&lt;NuxtChild/&gt;</code> ；来显示子组件内容。</p></blockquote><p>文件树：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| users/</span><br><span class="line">-----| _id.vue</span><br><span class="line">-----| index.vue</span><br><span class="line">--| users.vue</span><br></pre></td></tr></table></figure><p>自动生成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">router</span>: &#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/users&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&#x27;pages/users.vue&#x27;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="string">&#x27;pages/users/index.vue&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;users&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;:id&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="string">&#x27;pages/users/_id.vue&#x27;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;users-id&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由拓展"><a href="#路由拓展" class="headerlink" title="路由拓展"></a>路由拓展</h3><h4 id="nuxt-js-x2F-router"><a href="#nuxt-js-x2F-router" class="headerlink" title="@nuxt.js&#x2F;router"></a><a href="https://github.com/nuxt-community/router-module">@nuxt.js&#x2F;router</a></h4><p>该方式可以使用自己的路由配置来覆盖重写 nuxt 自动生成的路由配置。</p><p>具体使用参考官方库。</p><blockquote><p>注意：我们的 router.js 需要暴露 createRouter 出去。</p></blockquote><h4 id="router-extendRoutes"><a href="#router-extendRoutes" class="headerlink" title="router.extendRoutes"></a><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-router/#extendroutes">router.extendRoutes</a></h4><p>通过 nuxt.config.js 进行拓展路由。</p><p>添加路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="title function_">extendRoutes</span>(<span class="params">routes, resolve</span>) &#123;</span><br><span class="line">      routes.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;custom&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;pages/404.vue&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sortRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@nuxt/utils&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="title function_">extendRoutes</span>(<span class="params">routes, resolve</span>) &#123;</span><br><span class="line">      <span class="comment">// Add some routes here ...</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// and then sort them</span></span><br><span class="line">      <span class="title function_">sortRoutes</span>(routes)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>路由配置在 nuxt.config.js 中的 router 模块。</p><ol><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-router/#base">base: string</a></p><p>路由根路径。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-router/#extendroutes">extendRoutes: function</a></p><p>路由拓展。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-router/#fallback">fallback: boolean</a></p><p>当浏览器不支持 history 模式时，是否回退使用 hash 模式。</p></li><li><p><a href="https://v2.nuxt.com/docs/configuration-glossary/configuration-router/#mode">mode: ‘hash’ | ‘history’</a></p><p>配置路由模式，但不建议修改，因为会影响到服务端渲染。</p></li><li><p><a href="https://v3.router.vuejs.org/guide/advanced/scroll-behavior.html#async-scrolling">scrollBehavior</a></p><p>路由跳转后配置滚动条行为。</p></li></ol><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><p>nuxt 支持传统的数据获取方式，例如 vue 的 mounted 周期中获取数据。但只有使用 nuxt 特有的 hook 才能在服务器端渲染期间呈现数据。</p><p>nuxt 获取数据的钩子有：asyncData、fetch。</p><h3 id="执行周期"><a href="#执行周期" class="headerlink" title="执行周期"></a>执行周期</h3><p><code>fetch</code> 钩子函数和 <code>asyncData</code> 钩子函数都是用于在组件渲染前获取异步数据的钩子函数，但它们的调用周期和触发时机不完全一样。</p><p>在 Nuxt.js 应用程序中，<code>fetch</code> 钩子函数会在服务端渲染（SSR）期间和客户端渲染（CSR）期间分别被调用。具体来说：</p><ul><li>在 SSR 期间，<code>fetch</code> 钩子函数会在服务器端组件实例化之后、页面渲染之前被调用，此时可以获取到异步数据并将其保存到 Vuex store 中，以便在页面渲染时使用。</li><li>在 CSR 期间，<code>fetch</code> 钩子函数会在每次路由导航切换时被调用，此时也可以获取异步数据并更新 Vuex store 中的状态。</li></ul><p>而对于 <code>asyncData</code> 钩子函数，则仅在客户端渲染时被调用，在服务端渲染期间不会执行。具体来说：</p><ul><li>在 CSR 期间，<code>asyncData</code> 钩子函数会在组件实例化之前被调用，并且会等待 Promise 对象被解决后再继续页面的渲染过程。这个阶段可以理解为初始化前。</li><li>在组件实例化完成之后，会进入<code>created</code>生命周期钩子函数，此时组件的 DOM 节点已经生成，但是尚未被渲染到页面上。</li><li>等到组件的 <code>mounted</code> 生命周期钩子函数调用时，组件的 DOM 节点已经成功地渲染到了页面上。</li></ul><p>因此，在 Nuxt.js 应用程序中，如果需要在组件渲染前就获取异步数据并使用，应该优先考虑使用 <code>fetch</code> 钩子函数；如果异步数据获取与页面渲染无关，可以考虑使用 <code>asyncData</code> 钩子函数。</p><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>在渲染页面前填充状态树(store)数据，不会设置组件的数据，可应用在所有组件上。</p><p>其还提供了 this.$fetchState 用于获取 fetch 状态，并在页面展示相关信息。</p><p>$fetchState 示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;$fetchState.pending&quot;</span>&gt;</span>Fetching mountains...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;$fetchState.error&quot;</span>&gt;</span>An error occurred :(<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nuxt Mountains<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;mountain of mountains&quot;</span>&gt;</span>&#123;&#123; mountain.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$fetch&quot;</span>&gt;</span>Refresh<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mountains</span>: []</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">mountains</span> = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.nuxtjs.dev/mountains&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      ).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听路由参数信息，进行调用 fetch 更新数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;$route.query&#x27;</span>: <span class="string">&#x27;$fetch&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Called also on query changes</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，在 <code>&lt;nuxt&gt;</code> 组件上使用 <code>keep-alive</code> 可进行组件数据缓存。</p><p>nuxt 还提供了 <code>this.$fetchState.timestamp</code> 用于记录最后一次 fetch 的时间戳，可在缓存组件超过一定时间后，进行数据刷新。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">posts</span>: []</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Call fetch again if last fetch more than 30 sec ago</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$fetchState</span>.<span class="property">timestamp</span> &lt;= <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="number">30000</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$fetch()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">posts</span> = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.nuxtjs.dev/posts&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span></span></span><br><span class="line"><span class="language-javascript">        res.<span class="title function_">json</span>()</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="asyncData"><a href="#asyncData" class="headerlink" title="asyncData"></a>asyncData</h3><p>在服务器端获取渲染数据，并返回给当前组件的 data，且不能访问到 this 以及 组件实例。不同于 fetch，该钩子函数只能应用于组件页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.description &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">asyncData</span>(<span class="params">&#123; params, $http &#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> post = <span class="keyword">await</span> $http.$get(<span class="string">`https://api.nuxtjs.dev/posts/<span class="subst">$&#123;params.id&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; post &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Meta-和-SEO"><a href="#Meta-和-SEO" class="headerlink" title="Meta 和 SEO"></a>Meta 和 SEO</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>nuxt.config.js -&gt; head。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">head</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;my website title&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;viewport&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;width=device-width, initial-scale=1&#x27;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">hid</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;my website description&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">link</span>: [&#123; <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;image/x-icon&#x27;</span>, <span class="attr">href</span>: <span class="string">&#x27;/favicon.ico&#x27;</span> &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h3><p>对象形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">head</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Home page&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">hid</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;Home page description&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>函数形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="string">&#x27;Home page&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">head</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">title</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">meta</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hid</span>: <span class="string">&#x27;description&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>: <span class="string">&#x27;Home page description&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部资源"><a href="#外部资源" class="headerlink" title="外部资源"></a>外部资源</h3><p>通过 head.script 引入外部资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">head</span>: &#123;</span><br><span class="line">    <span class="attr">script</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">link</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>,</span><br><span class="line">        <span class="attr">href</span>: <span class="string">&#x27;https://fonts.googleapis.com/css?family=Roboto&amp;display=swap&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>nuxt 中允许通过配置文件配置全局 css。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">    <span class="comment">// Load a Node.js module directly (here it&#x27;s a Sass file)</span></span><br><span class="line">    <span class="string">&#x27;bulma&#x27;</span>,</span><br><span class="line">    <span class="comment">// CSS file in the project</span></span><br><span class="line">    <span class="string">&#x27;~/assets/css/main.css&#x27;</span>,</span><br><span class="line">    <span class="comment">// SCSS file in the project</span></span><br><span class="line">    <span class="string">&#x27;~/assets/css/main.scss&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且，nuxt 支持你忽略文件后缀名。但存在优先级：[‘css’, ‘pcss’, ‘postcss’, ‘styl’, ‘stylus’, ‘scss’, ‘sass’, ‘less’]</p><blockquote><p>同名文件，将按照该顺序解析。</p></blockquote><h3 id="外部资源-1"><a href="#外部资源-1" class="headerlink" title="外部资源"></a>外部资源</h3><p>主要通过 head 中的 script 以及 link 实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">head</span>: &#123;</span><br><span class="line">    <span class="attr">script</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">link</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>,</span><br><span class="line">        <span class="attr">href</span>: <span class="string">&#x27;https://fonts.googleapis.com/css?family=Roboto&amp;display=swap&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h3><p>nuxt 配置可替代 postcss.config.js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="comment">// Add plugin names as key and arguments as value</span></span><br><span class="line">      <span class="comment">// Install them before as dependencies with npm or yarn</span></span><br><span class="line">      <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="comment">// Disable a plugin by passing false as value</span></span><br><span class="line">        <span class="string">&#x27;postcss-url&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&#x27;postcss-nested&#x27;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&#x27;postcss-responsive-type&#x27;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&#x27;postcss-hexrgba&#x27;</span>: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">preset</span>: &#123;</span><br><span class="line">        <span class="comment">// Change the postcss-preset-env settings</span></span><br><span class="line">        <span class="attr">autoprefixer</span>: &#123;</span><br><span class="line">          <span class="attr">grid</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>nuxt 通过 <a href="https://github.com/nuxt/nuxt/tree/2.x-dev/packages/babel-preset-app">@nuxt&#x2F;babel-preset-app</a>，实现 JSX 的编译渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>&#123;this.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ignore-files"><a href="#Ignore-files" class="headerlink" title="Ignore files"></a>Ignore files</h3><p><strong>.nuxtignore</strong></p><p>您可以使用 .nuxtignore 文件来让 Nuxt 在构建阶段忽略项目根目录中的布局、页面、存储和中间件文件。</p><p>.nuxtignore 文件遵循与 .gitignore 和 .eslintignore 文件相同的规范，其中每行都是一个 glob 模式，指示应忽略哪些文件。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ignore layout foo.vue</span></span><br><span class="line"></span><br><span class="line">layouts/foo.vue</span><br><span class="line"></span><br><span class="line"><span class="section"># ignore layout files whose name ends with -ignore.vue</span></span><br><span class="line"></span><br><span class="line">layouts/<span class="emphasis">*-ignore.vue</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># ignore page bar.vue</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">pages/bar.vue</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># ignore page inside ignore folder</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">pages/ignore/*</span>.vue</span><br><span class="line"></span><br><span class="line"><span class="section"># ignore store baz.js</span></span><br><span class="line"></span><br><span class="line">store/baz.js</span><br><span class="line"></span><br><span class="line"><span class="section"># ignore store files match <span class="emphasis">_.test._</span></span></span><br><span class="line"></span><br><span class="line">store/ignore/<span class="emphasis">_.test._</span></span><br><span class="line"></span><br><span class="line"><span class="section"># ignore middleware files under foo folder except foo/bar.js</span></span><br><span class="line"></span><br><span class="line">middleware/foo/<span class="emphasis">*.js !middleware/foo/bar.js</span></span><br></pre></td></tr></table></figure><p>同样，你也可以通过特殊的命名方式来实现忽略文件：<code>-xxx.xxx</code></p><p>在配置文件中也可以通过 ignore 模块配置忽略文件。</p><h3 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h3><p>nuxt 通过配置文件下 build 模块进 行配置 webpack，build 是一个对象，对象中包含一个 extend 函数。</p><p>该函数接收两个参数，第一个参数是从 nuxt 的 webpack 配置中导出的 webpack 配置对象。第二个参数是一个带有以下布尔属性的上下文对象：<code>&#123; isDev, isClient, isServer, loaders &#125;</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="title function_">extend</span>(<span class="params">config, &#123; isClient &#125;</span>) &#123;</span><br><span class="line">      <span class="comment">// Extend only webpack config for client-bundle</span></span><br><span class="line">      <span class="keyword">if</span> (isClient) &#123;</span><br><span class="line">        config.<span class="property">devtool</span> = <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义-chunks"><a href="#自定义-chunks" class="headerlink" title="自定义 chunks"></a>自定义 chunks</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="title function_">extend</span>(<span class="params">config, &#123; isClient &#125;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isClient) &#123;</span><br><span class="line">        config.<span class="property">optimization</span>.<span class="property">splitChunks</span>.<span class="property">maxSize</span> = <span class="number">200000</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查看webpack配置"><a href="#查看webpack配置" class="headerlink" title="查看webpack配置"></a>查看webpack配置</h4><p>通过 <code>nuxt webpack</code> 命令查看最终的 webpack 配置。</p><h4 id="添加webpack-plugins"><a href="#添加webpack-plugins" class="headerlink" title="添加webpack plugins"></a>添加webpack plugins</h4><p>nuxt 通过 build 模块下 <code>plugins: Object</code> 进行添加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webpack <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">        <span class="comment">// global modules</span></span><br><span class="line">        <span class="attr">$</span>: <span class="string">&#x27;jquery&#x27;</span>,</span><br><span class="line">        <span class="attr">_</span>: <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理音频文件"><a href="#处理音频文件" class="headerlink" title="处理音频文件"></a>处理音频文件</h4><p>音频文件应该由 <code>file-loader</code> 进行处理，但默认并没有进行配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="title function_">extend</span>(<span class="params">config, ctx</span>) &#123;</span><br><span class="line">      config.<span class="property">module</span>.<span class="property">rules</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ogg|mp3|wav|mpe?g)$/i</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;[path][name].[ext]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里配置完之后，就可以直接通过 require 直接引入音频文件提供给 audio 标签使用：<code>&lt;audio :src=&quot;require(&#39;@/assets/water.mp3&#39;)&quot; controls&gt;&lt;/audio&gt;</code> </p><p>若不想使用 require 可通过配置 <code>vue-loader</code> 自动加载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">loaders</span>: &#123;</span><br><span class="line">      <span class="attr">vue</span>: &#123;</span><br><span class="line">        <span class="attr">transformAssetUrls</span>: &#123;</span><br><span class="line">          <span class="attr">audio</span>: <span class="string">&#x27;src&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">extend</span>(<span class="params">config, ctx</span>) &#123;</span><br><span class="line">      config.<span class="property">module</span>.<span class="property">rules</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ogg|mp3|wav|mpe?g)$/i</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;[path][name].[ext]&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改主机和端口号"><a href="#修改主机和端口号" class="headerlink" title="修改主机和端口号"></a>修改主机和端口号</h3><p>在配置文件下的 server 模块可进行修改 host 和 port。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0&#x27;</span> <span class="comment">// default: localhost</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8000</span> <span class="comment">// default: 3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但不建议这样做，因为可能在网站托管时引起问题。最好直接在 dev 命令中修改主机和端口号。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev:host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nuxt --hostname &#x27;0&#x27; --port 8000&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="异步配置"><a href="#异步配置" class="headerlink" title="异步配置"></a>异步配置</h3><p>nuxt 可将通过异步函数返回值的形式进行配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.nuxtjs.dev/posts&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">head</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: data.<span class="property">title</span></span><br><span class="line">      <span class="comment">//... rest of config</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载条"><a href="#加载条" class="headerlink" title="加载条"></a>加载条</h2><h3 id="自定义进度条"><a href="#自定义进度条" class="headerlink" title="自定义进度条"></a>自定义进度条</h3><p>nuxt 配置文件的 loading 模块下进行配置。</p><table><thead><tr><th>Key</th><th>Type</th><th>Default</th><th>Description</th><th></th></tr></thead><tbody><tr><td>color</td><td>String</td><td>‘black’</td><td>CSS color of the progress bar</td><td></td></tr><tr><td>failedColor</td><td>String</td><td>‘red’</td><td>CSS color of the progress bar when an error appended while rendering the route (if data or fetch sent back an error, for example).</td><td></td></tr><tr><td>height</td><td>String</td><td>‘2px’</td><td>Height of the progress bar (used in the style property of the progress bar)</td><td></td></tr><tr><td>throttle</td><td>Number</td><td>200</td><td>In ms, wait for the specified time before displaying the progress bar. Useful for preventing the bar from flashing.</td><td></td></tr><tr><td>duration</td><td>Number</td><td>5000</td><td>In ms, the maximum duration of the progress bar, Nuxt assumes that the route will be rendered before 5 seconds.</td><td></td></tr><tr><td>continuous</td><td>Boolean</td><td>false</td><td>Keep animating progress bar when loading takes longer than duration.</td><td></td></tr><tr><td>css</td><td>Boolean</td><td>true</td><td>Set to false to remove default progress bar styles (and add your own).</td><td></td></tr><tr><td>rtl</td><td>Boolean</td><td>false</td><td>Set the direction of the progress bar from right to left.</td><td></td></tr></tbody></table><h3 id="禁用进度条"><a href="#禁用进度条" class="headerlink" title="禁用进度条"></a>禁用进度条</h3><p>通过 <code>loading: false</code> 禁用进度条，无论是全局配置还是局部配置均可。</p><h3 id="编程式调用"><a href="#编程式调用" class="headerlink" title="编程式调用"></a>编程式调用</h3><p>nuxt 提供 <code>$loading</code> 进行直接控制进度条。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$nuxt</span>.<span class="property">$loading</span>.<span class="title function_">start</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">$nuxt</span>.<span class="property">$loading</span>.<span class="title function_">finish</span>(), <span class="number">500</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><h3 id="Nuxt"><a href="#Nuxt" class="headerlink" title="Nuxt"></a>Nuxt</h3><p>用于显示路由组件，只能用于布局文件(layouts)中使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** layouts/default.vue */</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>My nav bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Nuxt</span> <span class="attr">:nuxt-child-key</span>=<span class="string">&quot;somekey&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>My footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>:nuxt-child-key</code> 将传递给 <code>&lt;RouterView&gt;</code>，以便在动态页面正确处理过渡效果。</p><h3 id="NuxtChild"><a href="#NuxtChild" class="headerlink" title="NuxtChild"></a>NuxtChild</h3><p>用于显示子路由(嵌套路由)。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-| pages/</span><br><span class="line">---| parent/</span><br><span class="line">------| child.vue</span><br><span class="line">---| parent.vue</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am the parent view<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NuxtChild</span> <span class="attr">:foobar</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h3><p>作用于 <code>&lt;NuxtChild&gt;</code> 和 <code>&lt;Nuxt&gt;</code>，进行组件缓存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Nuxt</span> <span class="attr">keep-alive</span> <span class="attr">:keep-alive-props</span>=<span class="string">&quot;&#123; exclude: [&#x27;modal&#x27;] &#125;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- will be converted into something like this --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:exclude</span>=<span class="string">&quot;[&#x27;modal&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RouterView</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>keep-alive-props</code> 是原 keep-alive 上的一些属性，包括：exclude、include等。</p><h3 id="NuxtLink"><a href="#NuxtLink" class="headerlink" title="NuxtLink"></a>NuxtLink</h3><p>路由跳转。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home page<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 nuxt 中 NuxtLink 是默认<strong>预取</strong>的，也就是说在浏览器空闲的时候，将会预取并加载资源，以便用户点击链接时他们已经准备好。</p><p>当然你也可以关闭 prefetch。</p><p>局部关闭：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">no-prefetch</span>&gt;</span>About page not pre-fetched<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">:prefetch</span>=<span class="string">&quot;false&quot;</span>&gt;</span>About page not pre-fetched<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br></pre></td></tr></table></figure><p>全局关闭：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="attr">prefetchLinks</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部开启：</p><blockquote><p>Nuxt v2.10.0 之后</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">NuxtLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">prefetch</span>&gt;</span>About page pre-fetched<span class="tag">&lt;/<span class="name">NuxtLink</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="linkActiveClass"><a href="#linkActiveClass" class="headerlink" title="linkActiveClass"></a>linkActiveClass</h3><p>nuxt 默认链接激活类名是：<code>nuxt-link-active</code></p><p>当然你也可以自定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="attr">linkActiveClass</span>: <span class="string">&#x27;my-custom-active-link&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="client-only"><a href="#client-only" class="headerlink" title="client-only"></a>client-only</h3><p>显示仅在客户端渲染的组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sidebar</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">client-only</span> <span class="attr">placeholder</span>=<span class="string">&quot;Loading...&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- this component will only be rendered on client-side --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comments</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">client-only</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用插槽：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sidebar</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">client-only</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- this component will only be rendered on client-side --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comments</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- loading indicator, rendered on server-side --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">placeholder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comments-placeholder</span> /&gt;</span>        </span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">client-only</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>有时在服务器渲染的页面中，即使使用 $nextTick，<code>&lt;client-only&gt;</code> 中的 $refs 也可能还没有准备好。技巧可能是多次调用 $nextTick：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">initClientOnlyComp</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">initClientOnlyComp</span>(<span class="params">count = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">myComp</span>) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initClientOnlyComp</span>(count - <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>在 Nuxt &lt; v2.9.0 中可以使用 <code>&lt;no-ssr&gt;</code> 替代 <code>&lt;client-only&gt;</code></p></blockquote><h2 id="非路由组件"><a href="#非路由组件" class="headerlink" title="非路由组件"></a>非路由组件</h2><h3 id="自动导入"><a href="#自动导入" class="headerlink" title="自动导入"></a>自动导入</h3><p>nuxt 中支持自动引入，在全局配置的 component 属性进行配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h3><p>非路由组件的命名是基于文件夹名和文件名生成的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">| components/</span><br><span class="line">--| base/</span><br><span class="line">----| foo/</span><br><span class="line">------| Button.vue</span><br><span class="line"></span><br><span class="line">/** 最终的组件名 */</span><br><span class="line">&lt;BaseFooButton /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>建议还是将最终的组件名提前根据文件夹命名一致。</p></blockquote><p>忽略某个文件夹对命名的影响，可通过 component 下的 dirs 进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">  <span class="built_in">dirs</span>: [</span><br><span class="line">    <span class="string">&#x27;~/components&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;~/components/base&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>nuxt 中懒加载直接在组件前面加上 Lazy 即可。</p><p>懒加载的组件在打包的过程中将会被单独分块儿打包，这将优化打包的大小。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mountains<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LazyMountainsList</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;!show&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;show = true&quot;</span>&gt;</span>Show List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">show</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>作用于路由，过渡动效。</p><p>有三种写法：string、object、function。</p><p>默认的全局 transition-name 为 page。</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 类型主要配置 transition 的 name，后续根据 .name-enter-active 等类名编写 css 动效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  transition: &#x27;home&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;transition name=&quot;home&quot;&gt;&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .home-enter-active, .home-leave-active &#123; transition: opacity .5s; &#125;</span><br><span class="line">  .home-enter, .home-leave-active &#123; opacity: 0; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>对象配置的属性相对 string 就多了一些，比如：name、mode、duration等等，以及可以调用一些<a href="https://v2.vuejs.org/v2/guide/transitions.html#JavaScript-Hooks">钩子函数</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">transition</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;out-in&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">transition</span>: &#123;</span><br><span class="line">    <span class="title function_">afterLeave</span>(<span class="params">el</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterLeave&#x27;</span>, el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>能够获取到路由信息：to、from。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">transition</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">from</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;slide-left&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> +to.<span class="property">query</span>.<span class="property">page</span> &lt; +<span class="keyword">from</span>.<span class="property">query</span>.<span class="property">page</span> ? <span class="string">&#x27;slide-right&#x27;</span> : <span class="string">&#x27;slide-left&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局配置-1"><a href="#全局配置-1" class="headerlink" title="全局配置"></a>全局配置</h3><p>nuxt.config.js 的全局过渡配置主要有俩：layoutTransition、pageTransition。</p><p>写法和上述一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">layoutTransition</span>: <span class="string">&#x27;my-layouts&#x27;</span></span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  <span class="attr">layoutTransition</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;my-layouts&#x27;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;out-in&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">pageTransition</span>: <span class="string">&#x27;my-page&#x27;</span></span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  <span class="attr">pageTransition</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;my-page&#x27;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;out-in&#x27;</span>,</span><br><span class="line">    beforeEnter (el) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Before enter...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>nuxt 中可定义一些自定义函数作为中间件，在（一组）页面渲染前执行。</p><p>共享的中间件应当放置在 <code>/middleware</code> 下，文件名则是中间件的名称。</p><p>每一个中间件函数可接收一个 context 参数。</p><p>通常情况下，中间件将在首次服务端渲染（第一次请求 nuxt app 或者 刷新页面）时以及客户端路由跳转时执行。</p><p>多个中间件的执行顺序：</p><ol><li>nuxt.config.js 中的全局中间件</li><li>layouts 中的中间件</li><li>pages 中的中间件</li></ol><h3 id="Router-Middleware"><a href="#Router-Middleware" class="headerlink" title="Router Middleware"></a>Router Middleware</h3><p>类似路由守卫，需要在 nuxt.config.js 中 router 模块下配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** middleware/stats.js */</span></span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">&#123; route &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> http.<span class="title function_">post</span>(<span class="string">&#x27;http://my-stats-api.com&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">url</span>: route.<span class="property">fullPath</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** nuxt.config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="attr">middleware</span>: <span class="string">&#x27;stats&#x27;</span> <span class="comment">// middleware: [&quot;stats&quot;],</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名中间件"><a href="#匿名中间件" class="headerlink" title="匿名中间件"></a>匿名中间件</h3><p>局部中间件，直接在特殊的页面中直接通过 middleware 配置当前页面的中间件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Secret page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">middleware</span>(<span class="params">&#123; store, redirect &#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// If the user is not authenticated</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!store.<span class="property">state</span>.<span class="property">authenticated</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>nuxt 中的插件系统主要功能涵盖：全局注入、Vue 插件、外部包（模块），在 <code>/plugins</code> 中进行管理。</p><p><img src="https://v2.nuxt.com/_nuxt/image/5d7783.svg" alt="img"></p><h3 id="inject"><a href="#inject" class="headerlink" title="inject"></a>inject</h3><p>nuxt 允许通过 <code>inject(key, value)</code> 实现将一些函数或变量注入贯穿整个应用中，注入到 $root 以及 context 当中。</p><blockquote><p>重要的是 Vue 的生命周期中只有 beforeCreate 和 created 钩子能在客户端以及服务端中被调用，其他的都只能在客户端中调用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** plugins/hello.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; app &#125;, inject) =&gt; &#123;</span><br><span class="line">  <span class="comment">// Inject $hello(msg) in Vue, context and store.</span></span><br><span class="line">  <span class="title function_">inject</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;msg&#125;</span>!`</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** nuxt.config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;~/plugins/hello.js&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** example-component.vue */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$hello(<span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">    <span class="comment">// will console.log &#x27;Hello mounted!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">asyncData</span>(<span class="params">&#123; app, $hello &#125;</span>) &#123;</span><br><span class="line">    $hello(<span class="string">&#x27;asyncData&#x27;</span>)</span><br><span class="line">    <span class="comment">// If using Nuxt &lt;= 2.12, use 👇</span></span><br><span class="line">    app.$hello(<span class="string">&#x27;asyncData&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-Plugins"><a href="#Vue-Plugins" class="headerlink" title="Vue Plugins"></a>Vue Plugins</h3><p>与原生的 Vue 插件安装一样，通过 <code>Vue.use()</code> 进行安装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** plugins/vue-tooltip.js */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VTooltip</span> <span class="keyword">from</span> <span class="string">&#x27;v-tooltip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VTooltip</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** nuxt.config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;~/plugins/vue-tooltip.js&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 ES6 的模块，可以通过配置文件下 build.transpile 进行 babel 转义为 ES5。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">transpile</span>: [<span class="string">&#x27;vue-tooltip&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-or-Server-side-only"><a href="#Client-or-Server-side-only" class="headerlink" title="Client or Server side only"></a>Client or Server side only</h3><ol><li><p>通过特殊命名后缀</p><p><code>xxx.client.js</code> 或 <code>xxx.server.js</code> 可限制插件的执行区域。</p></li><li><p>配置下 plugins 模块每个插件通过对象的形式配置，并配置 mode。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">&#x27;~/plugins/both-sides.js&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">&#x27;~/plugins/client-only.js&#x27;</span>, <span class="attr">mode</span>: <span class="string">&#x27;client&#x27;</span> &#125;, <span class="comment">// only on client side</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">&#x27;~/plugins/server-only.js&#x27;</span>, <span class="attr">mode</span>: <span class="string">&#x27;server&#x27;</span> &#125; <span class="comment">// only on server side</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="extendPlugins"><a href="#extendPlugins" class="headerlink" title="extendPlugins"></a>extendPlugins</h3><p>配置文件中 extendPlugins 模块可进行对当前 plugins 配置进行编程式处理（排序、删除）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** nuxt.config.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">extendPlugins</span>(<span class="params">plugins</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pluginIndex = plugins.<span class="title function_">findIndex</span>(</span><br><span class="line">      <span class="function">(<span class="params">&#123; src &#125;</span>) =&gt;</span> src === <span class="string">&#x27;~/plugins/shouldBeFirst.js&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">const</span> shouldBeFirstPlugin = plugins[pluginIndex]</span><br><span class="line"></span><br><span class="line">    plugins.<span class="title function_">splice</span>(pluginIndex, <span class="number">1</span>)</span><br><span class="line">    plugins.<span class="title function_">unshift</span>(shouldBeFirstPlugin)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plugins</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Nuxt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络基础 OSI 网际互联</title>
      <link href="/2023/02/26/Work/Eccom/CCNA%20(%20R&amp;S%20)/"/>
      <url>/2023/02/26/Work/Eccom/CCNA%20(%20R&amp;S%20)/</url>
      
        <content type="html"><![CDATA[<h1 id="网络基础-OSI-网际互联"><a href="#网络基础-OSI-网际互联" class="headerlink" title="网络基础 OSI 网际互联"></a>网络基础 OSI 网际互联</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>网络概念</li><li>网际互联</li><li>OSI 七层模型</li></ul><h2 id="网络的概念"><a href="#网络的概念" class="headerlink" title="网络的概念"></a>网络的概念</h2><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><p>任何通信节点，在网络当中的标识符</p><h3 id="hub"><a href="#hub" class="headerlink" title="hub"></a>hub</h3><p>数据通信冲突，共享资源</p><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p>端口有独立带宽，不冲突</p><p><code>广播域 == 网段</code></p><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>数据转发</p><p><img src="https://s2.loli.net/2023/02/23/MORBhLxezPNtYHb.png" alt="image-20230223103447248"></p><ul><li>路由协议支持</li><li>数据转发</li><li>广域网链路支持</li></ul><p>局域网：本地区域私有网络、城域网、广域网</p><h2 id="OSI-网际互联"><a href="#OSI-网际互联" class="headerlink" title="OSI 网际互联"></a>OSI 网际互联</h2><p>Open System Intercinnect 框架 &#x2F; 模型</p><ul><li><p>应用层</p><ul><li>定义程序接口</li></ul></li><li><p>表示层</p><ul><li>数据转换、加密、压缩</li></ul></li><li><p>会话层</p><ul><li>建立、管理和终止会话</li></ul></li><li><p>传输层</p><ul><li>提供可靠的端到端的报文传输和差错控制</li></ul></li><li><p>网络层（ip 【网段考虑】）</p><ul><li>将分组从源端传送到目的端，提供网络互联</li><li>寻址</li><li>路由器</li></ul></li><li><p>数据链路层（mac【局域网考虑】 &#x3D;&#x3D; 本地）</p><ul><li>在不可靠的物理链路上，提供可靠的数据传输服务，把帧从一跳移动到另一跳（结点）</li><li>组帧、物理编址、流量控制、差错控制、接入控制</li><li>交换机<ul><li>每个端口独立冲突域</li><li>整个交换机是一个广播域</li></ul></li></ul></li><li><p>物理层</p><ul><li>负责把逐一的比特进行传递</li><li><h2 id="集线器-同意冲突域-共享网络带宽"><a href="#集线器-同意冲突域-共享网络带宽" class="headerlink" title="集线器- 同意冲突域- 共享网络带宽"></a>集线器<br>- 同意冲突域<br>- 共享网络带宽</h2></li></ul></li></ul><blockquote><p>ip 类似 身份证，在某个网段考虑</p><p>mac 类似 名字，在局域网考虑，本地，一般厂商烧录在网卡上的</p></blockquote><p><img src="https://s2.loli.net/2023/03/02/AGtnYgDJ2ks5MBP.png" alt="image-20230302153453021"></p><h2 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h2><h3 id="DOD"><a href="#DOD" class="headerlink" title="DOD"></a>DOD</h3><ul><li>应用层</li><li>主机到主机层<ul><li>TCP（传输控制协议）属于面向连接的网络协议<ul><li>面向连接</li><li>可靠传输</li><li>流控</li><li>web 浏览器、电子邮件、文件传输</li></ul></li><li>UDP（用户报文协议）属于无连接的网络协议<ul><li>无连接</li><li>不可靠</li><li>视频通话、域名系统、IP 语音</li></ul></li></ul></li><li>因特网层</li><li>网络接入层</li></ul><blockquote><p>端口号： 区分本地服务或者应用程序、物理接口 ~65535</p></blockquote><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="https://s2.loli.net/2023/03/04/yuXLloJDs8qe2WO.png" alt="image-20230304123827160"></p><ul><li>确定 A 发送能力</li><li>确定 B 接收能力</li><li>确定 B 发送能力</li><li>确定 A 接收能力</li></ul><h3 id="窗口机制"><a href="#窗口机制" class="headerlink" title="窗口机制"></a>窗口机制</h3><p><img src="https://s2.loli.net/2023/03/04/TJS93Cn5BGkDqvw.png" alt="image-20230304124203658"></p><ul><li>滑动窗口</li><li>连续传输</li><li>连续接收</li></ul><h3 id="ARP-协议"><a href="#ARP-协议" class="headerlink" title="ARP 协议"></a>ARP 协议</h3><ul><li><p>IPv4 地址解析为 MAC 地址</p></li><li><p>维护映射的缓存</p></li><li><p>A -&gt; 局域网 -&gt; 路由器 -&gt; 广域网 -&gt; 路由器 -&gt; 局域网 -&gt; B</p><p>(mac, ip)——–ip———–ip———-ip———-ip———ip———(mac, ip)</p></li></ul><h2 id="VLSM"><a href="#VLSM" class="headerlink" title="VLSM"></a>VLSM</h2><p><code>可变子网掩码</code></p><p>ip： 网络号 + 主机号</p><p>127.0.0.1 特殊，本地回环，测试本地协议是否安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> Work </category>
          
          <category> Eccom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> Eccom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云培训 - MySQL基础</title>
      <link href="/2023/02/23/Work/Eccom/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%B9%E8%AE%AD/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/02/23/Work/Eccom/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%B9%E8%AE%AD/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><h2 id="MySQL-介绍"><a href="#MySQL-介绍" class="headerlink" title="MySQL 介绍"></a>MySQL 介绍</h2><p><strong>关系型数据库</strong>管理系统</p><p>体积小、速度快、总体拥有成本低</p><h2 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h2><ol><li><p>MyISAM</p><p>MySQL 5.0 以前默认的数据库引擎，最常用，拥有较高的插入、查询速度，蛋不支持事务。</p></li><li><p>InnoDB</p><p>事务型数据库的首选引擎，支持 ACID 事务，支持行级锁定，MySQL 5.5 起成为默认数据库引擎。</p></li><li><p>MEMORY</p><p>MEMORY 存储引擎提供 “内存表”，也不支持事务、外键。</p></li><li><p>ARCHIVE</p><p>ARCHIVE 存储引擎是被设计用来存储企业中的大量流水数据的存储引擎。</p></li></ol><h2 id="MySQL-系统命令"><a href="#MySQL-系统命令" class="headerlink" title="MySQL 系统命令"></a>MySQL 系统命令</h2><h3 id="MySQL-服务管理"><a href="#MySQL-服务管理" class="headerlink" title="MySQL 服务管理"></a>MySQL 服务管理</h3><ol><li><p>服务状态查询</p><p><code>service mysqld status</code></p></li><li><p>启动服务</p><p><code>service mysqld start</code></p></li><li><p>停止服务</p><p><code>service mysqld stop</code></p></li><li><p>检查 MySQL 端口</p><p><code>netstat -antulp | grep mysqld</code></p></li></ol><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ol><li><p>获取帮助</p><p><code>help(\?)</code></p></li><li><p>选择数据库</p><p><code>use(\u)</code></p></li><li><p>执行 SQL 文件</p><p><code>source(\.)</code></p></li><li><p>清空当前的输入语句</p><p><code>clear(\c)</code></p></li></ol><h3 id="元数据查询"><a href="#元数据查询" class="headerlink" title="元数据查询"></a>元数据查询</h3><ol><li><p>服务器版本信息</p><p><code>SELECT VERSION()</code></p></li><li><p>当前数据库名</p><p><code>SELECT DATABASE()</code></p></li><li><p>当前用户名</p><p><code>SELECT USER()</code></p></li><li><p>服务器配置变量</p><p><code>SHOW VARIABLES</code></p></li><li><p>服务器状态</p><p><code>SHOW STATUS</code></p></li></ol><h3 id="MySQL-配置文件"><a href="#MySQL-配置文件" class="headerlink" title="MySQL 配置文件"></a>MySQL 配置文件</h3><ol><li><p>MySQL 配置文件默认路径</p><p><code>/etc/my.cnf</code></p></li><li><p>常用配置参数</p><p><code>basedir</code> —— MySQL 根目录</p><p><code>datadir</code> —— 数据库文件目录</p><p><code>socket</code> —— 为 MySQL 客户端与服务器之间本地通信指定的一个套接字文件</p><p><code>character-set-server</code> —— 新数据库或数据库的默认字符集</p></li></ol><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p><code>Structured Query Language</code></p><h3 id="语法组成"><a href="#语法组成" class="headerlink" title="语法组成"></a>语法组成</h3><ol><li><p>DML</p><p>查询、插入、删除和修改数据库中的数据。</p><p>SELECT、INSERT、UPDATE、DELETE 等。</p></li><li><p>DCL</p><p>用来控制存取许可、存取权限等。</p><p>GRANT、REVOKE 等。</p></li><li><p>DDL</p><p>用来建立数据库、数据库对象和定义其列。</p><p>CREATE TABLE、DROP TABLE、ALTER TABLE 等。</p></li><li><p>功能函数</p><p>日期函数、数据函数、字符函数、系统函数等。</p></li></ol><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ol><li><p>显示数据库</p><p><code>show databases;</code></p></li><li><p>选择操作数据库</p><p><code>use &lt;dbname&gt;;</code></p></li><li><p>创建数据库</p><p><code>create database &lt;dbname&gt; [charset=utf8];</code></p></li><li><p>显示数据库创建语句</p><p><code>show create database &lt;dbname&gt;;</code></p></li><li><p>删除数据库</p><p><code>drop &lt;dbname&gt;;</code></p></li><li><p>显示数据库中创建的所有表</p><p><code>show tables;</code></p></li><li><p>显示表结构</p><p><code>desc[rive] &lt;tbname&gt;;</code></p><p><code>show colums from &lt;tbname&gt;;</code></p></li><li><p>现实数据表创建语句</p><p><code>show create table &lt;tbname&gt;;</code></p></li></ol><h3 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><h4 id="自增类型-auto-increment"><a href="#自增类型-auto-increment" class="headerlink" title="自增类型 - auto_increment"></a>自增类型 - auto_increment</h4><ol><li><p>字段值每次自动增长 1。</p></li><li><p>自增型的整数字段</p><p>只适用于整数，在数据类型后加 auto_increment 关键字表示。如：<code>smallint unsigned auto_increment;</code></p></li></ol><p>注意：</p><ol><li><p>mysql 中每个表只能设置一个自增字段。</p></li><li><p>该列必须是 NOT NULL</p></li><li><p>该列必须定义唯一索引，如逐渐 primary key 或唯一键 unique key，以避免重复。</p></li><li><p>该列的最大值受其数据类型约束。如 tinyint 型的最大只为 127，加上 unsigned，则为 255.一单打到上限，auto_increment 就会失效。</p></li></ol><h4 id="小数类型-decimal"><a href="#小数类型-decimal" class="headerlink" title="小数类型 - decimal"></a>小数类型 - decimal</h4><ol><li>小数可通过 unsigned 设置为非负数。</li><li><code>decimal(m,d)</code> 表示述职中共有 m 位数，其中整数 m-d 位，小数 d 位。</li></ol><p>如： <code>decimal(5,2)</code>，取值范围为：-999.99 ~ 999.99。</p><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p><img src="https://s2.loli.net/2023/05/23/muMqIx8z27laOZv.png" alt="image-20230523143815654"></p><ol><li>CHAR：定长字符串</li><li>VARCHAR：变长字符串</li><li>TEXT：长文本数据</li></ol><h4 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h4><p><img src="https://s2.loli.net/2023/05/23/tgZNQjeXYnVP4K7.png" alt="image-20230523144009500"></p><ol><li>DATE：日期值</li><li>DATETIME：混合日期和时间值</li></ol><h3 id="数据表创建"><a href="#数据表创建" class="headerlink" title="数据表创建"></a>数据表创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbname (</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  sex tinyint <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  birthday <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h3><p>保存一些临时数据时使用的表</p><p><code>create TEMPORARY tbname (xxx);</code></p><p>特性：</p><ol><li>临时表只在<strong>当前</strong>连接可见</li><li>当关闭连接时，MySQL 会<strong>自动删除</strong>表并释放所有空间。</li></ol><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p><strong>CRUD</strong></p><h4 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h4><p><code>INSERT [INFO] &lt;表名&gt;(&lt;列名&gt;) VALUES(&lt;值列表&gt;)；</code></p><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT [DISTINCET | DISTINCTROW | ALL] select_expression [</span><br><span class="line">    FROM table_references //指定查询数据的表</span><br><span class="line">        [WHERE where_definition] //查询数据的过滤条件</span><br><span class="line">        [GROUP BY col_name,...] // 对匹配 where 子句的查询结果进行分组</span><br><span class="line">        [HAVING where_definition] //对分组后的结果进行条件限制</span><br><span class="line">        [ORDER BY &#123;unsigned_integer | col_name | formula&#125; [ASC | DESC],...] // 对查询结果进行排序</span><br><span class="line">        [LIMIT [offset] rows] //对查询的显示结果限制数目</span><br><span class="line">        [PROCEDURE procedure_name] //查询存储过程返回的结果集数据</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="SQL-集函数"><a href="#SQL-集函数" class="headerlink" title="SQL 集函数"></a>SQL 集函数</h5><p>主要集函数：</p><ol><li>记数函数：<code>count(列名)</code> 计算元素的个数。</li><li>求和函数：<code>sum(列名)</code> 对某一列的值求和，但属性必须是整数。</li><li>计算平均值：<code>avg(列名)</code> 对某一列的值计算平均值。</li><li>求最大值：<code>max(列名)</code> 找出某一列的最大值。</li><li>求最小值：<code>min(列名)</code> 找出某一列最小值。</li></ol><h5 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h5><p>谓语：</p><ol><li><code>BETWEEN AND</code>：在两数之间。</li><li><code>NOT BETWEEN AND</code>：不在两数之间。</li><li><code>IN &lt;值表&gt;</code>：是否在特定的集合里面（枚举）。</li><li><code>NOT IN &lt;值表&gt;</code>：与上面相反。</li><li><code>LIKE</code>： 是否匹配与一个模式。</li><li><code>IS NULL（为空）或 IS NOT NULL（不为空） REGEXP</code>：检查一个值是否匹配一个常规表达式。</li></ol><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><ol><li><p>连接查询</p><p>同时涉及多个表的查询称为连接查询</p><p>用来连接两个表的条件称为连接条件</p></li><li><p>连接查询的方式</p><ol><li>内连接</li><li>外连接<ol><li>左外连接</li><li>右外连接</li></ol></li><li>查询结果合并</li><li>子查询</li></ol></li></ol><h5 id="内连接（INER-JOIN）"><a href="#内连接（INER-JOIN）" class="headerlink" title="内连接（INER JOIN）"></a>内连接（INER JOIN）</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S.SName,C.score</span><br><span class="line"><span class="keyword">From</span> Score <span class="keyword">AS</span> C</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Students <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">ON</span> C.Student_id <span class="operator">=</span> S.student_id</span><br><span class="line">## <span class="keyword">or</span></span><br><span class="line"><span class="keyword">SELECT</span> S.SName,C.score</span><br><span class="line"><span class="keyword">From</span> Score <span class="keyword">AS</span> C, Students <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">Where</span> c.Student_id <span class="operator">=</span> S.Student_id;</span><br></pre></td></tr></table></figure><h5 id="外连接-左连接"><a href="#外连接-左连接" class="headerlink" title="外连接 - 左连接"></a>外连接 - 左连接</h5><p>以一张表为中心，往外找，找到返回，未找到返回<code>null</code>。</p><p>做外连以前面的表作为主表，返回所有主表中的所有行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,number</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score <span class="keyword">AS</span> C</span><br><span class="line"><span class="keyword">ON</span> S.sid <span class="operator">=</span> C.student_id;</span><br></pre></td></tr></table></figure><h5 id="外连接-右连接"><a href="#外连接-右连接" class="headerlink" title="外连接 - 右连接"></a>外连接 - 右连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname,number</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> score <span class="keyword">AS</span> C</span><br><span class="line"><span class="keyword">ON</span> S.sid <span class="operator">=</span> C.student_id;</span><br></pre></td></tr></table></figure><h5 id="合并查询数据记录"><a href="#合并查询数据记录" class="headerlink" title="合并查询数据记录"></a>合并查询数据记录</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t2</span><br></pre></td></tr></table></figure><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>通俗说，就是嵌套查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sname <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> age <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname<span class="operator">=</span><span class="string">&#x27;赵六&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>语法：<code>UPDATE &lt;表名&gt; SET &lt;列名 = 更新值&gt; [WHERE &lt;更新条件&gt;]</code></p><h4 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h4><p>语法：<code>DELETE FROM &lt;表名&gt; [WHERE &lt;更新条件&gt;]</code></p><blockquote><p><strong>生产环境禁止使用 UPDATE 和 DELETE</strong>，且在使用时需要些 WHERE，否则将修改整张表的数据，且无法修复。</p></blockquote><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><ol><li><p>错误日志</p><p>记录 MySQL 服务器启动、关闭和运行时出错等信息。</p></li><li><p>查询日志</p><p>记录 MySQL 服务器的启动和关闭信息、客户端的连接信息、更新数据库记录 SQL 语句和查询数据库记录 SQL 语句。</p></li><li><p>慢查询日志</p><p>记录执行时间超过指定时间的查询语句，通过工具分析慢查询日志开一定位 MySQL 服务器性能瓶颈所在。</p></li><li><p>二进制日志</p><p>以二进制形式记录数据库的各种操作，但不记录查询语句。</p></li></ol><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>日志路径：<code>mysql&gt; show variables like &#39;log_error&#39;</code></p><p>默认路径为：<code>/var/log/mysqld.log</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>日志路径：<code>show variables like &#39;slow_query_log%&#39;</code></p><p><img src="https://s2.loli.net/2023/05/24/dj58HGVAXLJFlZo.png" alt="image-20230524152158771"></p><h2 id="备份还原"><a href="#备份还原" class="headerlink" title="备份还原"></a>备份还原</h2><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p><code>mysqldump</code> 是 mysql 用于转存储数据库的实用程序。</p><p>产生一个 SQL 脚本。</p><p>语法：<code>mysqldump -u root -p Password [databaseName]</code></p><blockquote><p>值备份所有表，不包括数据库本身。</p></blockquote><h3 id="数据还原"><a href="#数据还原" class="headerlink" title="数据还原"></a>数据还原</h3><ol><li><p>mysql 命令导入</p><p><code>mysql -u root -p password &lt; sql文件</code></p></li><li><p>source</p><p><code>source sql文件</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Work </category>
          
          <category> Eccom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云培训 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云培训 - Linux基础</title>
      <link href="/2023/02/22/Work/Eccom/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%B9%E8%AE%AD/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/02/22/Work/Eccom/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%B9%E8%AE%AD/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-基础"><a href="#Linux-基础" class="headerlink" title="Linux 基础"></a>Linux 基础</h1><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>用于连接文件并打印到标准输出设备上</p><p><code>cat /etc/issue</code></p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>类似 cat 命令，以分页的方式显示文件内容</p><p><code>more /etc/issue</code></p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>与 more 类似，但使用 less 可以随意浏览文件</p><p><code>less /etc/issue</code></p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>用于显示文件的开头至标准输出中</p><p><code>head -n 20 /etc/fstab</code></p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>用于显示文件的末端至标准输出中</p><p><code>tail-n 20 /etc/fstab</code></p><h3 id="vim-文本编辑器"><a href="#vim-文本编辑器" class="headerlink" title="vim 文本编辑器"></a>vim 文本编辑器</h3><p><img src="https://s2.loli.net/2023/05/18/PGNk7BQWReILlZr.png" alt="image-20230518145505809"></p><h4 id="常用模式"><a href="#常用模式" class="headerlink" title="常用模式"></a>常用模式</h4><ul><li>命令模式</li><li>插入模式</li><li>ex 模式</li><li>可视模式</li></ul><h3 id="文本统计"><a href="#文本统计" class="headerlink" title="文本统计"></a>文本统计</h3><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>用于计算字数</p><p><code>wc file</code></p><p><code>wc -l file</code></p><p><code>w|wc -l</code></p><h3 id="删除文本重复行"><a href="#删除文本重复行" class="headerlink" title="删除文本重复行"></a>删除文本重复行</h3><h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>用于检查及删除文本文件中重复出现的行列</p><p><code>uniq testfile</code> 删除重复行</p><p><code>uniq -c testfile</code> 删除并统计重复的行数</p><p><code>uniq -d testfile</code>只显示重复的行数</p><h3 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h3><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>处理文本文件的语言，强大的文本分析工具。</p><p>查看个挂载点的可用空间：<code>df -h | awk &#39;print 1234&#39;</code></p><p>查看每个用户的 shell：<code> awk -F &#39;:&#39; &#39;&#123;print $1, $7&#125;&#39; /etc/pawword</code></p><p>查看长度大于 80 字节的日志信息：<code>awk &#39;length &gt; 80&#39; /var/log/messages</code></p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><code>find . -name &#39;c&#39;</code></p><p><code>find . -type f</code></p><p><code>find . -ctime -20</code></p><h3 id="查看当前目录"><a href="#查看当前目录" class="headerlink" title="查看当前目录"></a>查看当前目录</h3><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>显示工作目录</p><p><code>pwd [-L]</code></p><p><code>pwd -p</code></p><h4 id="pwdx"><a href="#pwdx" class="headerlink" title="pwdx"></a>pwdx</h4><p>查看进程运行的目录</p><p><code>pwdx PID</code></p><h3 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h3><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><p>挂在 Linux 系统外的文件。</p><p><code>mount</code> 查看当前所有的挂载</p><p><code>mount /dev/sdb1/mnt</code></p><p><code>mount -o ro /dev/sdb1/mnt</code></p><p><code>mount -o loop /tmp/</code></p><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>显示当前进程的状态</p><p><code>ps -ef | grep http</code></p><p><code>ps aux | grep http</code></p><p><code>ps -A</code></p><p><code>ps -u root</code></p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>实时查看进程状态</p><p><code>top -p PID</code><br>实时查看某一个进程</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p><code>kill PID</code></p><p><code>kill -9 PID</code></p><p>强制结束进程</p><h4 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h4><p>后台运行进程</p><p><code>nohup ./start.sh &amp;</code></p><h3 id="查看打开文件"><a href="#查看打开文件" class="headerlink" title="查看打开文件"></a>查看打开文件</h3><h4 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h4><p>查看进程打开的文件，打开文件的进程，进程打开的端口（TCP、UDP）</p><p><code>lsof abc.txt</code></p><p><code>lsof -c abc</code></p><p><code>lsof -i 8080</code></p><h3 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h3><h4 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h4><p><code>hostname xxx</code></p><p>临时修改</p><h3 id="系统运行时间"><a href="#系统运行时间" class="headerlink" title="系统运行时间"></a>系统运行时间</h3><h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h4><p>查看机器启动运行多久、负载</p><h3 id="系统监测"><a href="#系统监测" class="headerlink" title="系统监测"></a>系统监测</h3><h4 id="tsar"><a href="#tsar" class="headerlink" title="tsar"></a>tsar</h4><p><code>tsar --swap --load</code></p><p>监控虚拟内存</p><p><code>tsar --mem</code></p><p>监控内存</p><p><code>tsar --io</code></p><p>监控 io</p><p><code>tsar --traffic</code></p><p>监控网络</p><p><code>tsar --check --cpu --io</code></p><p>监控警告信息</p><h2 id="NTP"><a href="#NTP" class="headerlink" title="NTP"></a>NTP</h2><p>网络时间协议</p><h3 id="NTPServer-的时间来源"><a href="#NTPServer-的时间来源" class="headerlink" title="NTPServer 的时间来源"></a>NTPServer 的时间来源</h3><ol><li>GPS、北斗等卫星系统</li><li>原子钟</li><li>移动基站</li><li>恒温晶振</li></ol><h3 id="安装-NTP"><a href="#安装-NTP" class="headerlink" title="安装 NTP"></a>安装 NTP</h3><h4 id="检查是否安装"><a href="#检查是否安装" class="headerlink" title="检查是否安装"></a>检查是否安装</h4><p><code>rpm -q ntp</code></p><h4 id="安装-NTP-1"><a href="#安装-NTP-1" class="headerlink" title="安装 NTP"></a>安装 NTP</h4><p><code>yum install ntp</code></p><h3 id="配置-NTP-客户端"><a href="#配置-NTP-客户端" class="headerlink" title="配置 NTP 客户端"></a>配置 NTP 客户端</h3><p>配置文件：<code>/etc/ntp.conf</code></p><h3 id="NTP-服务管理"><a href="#NTP-服务管理" class="headerlink" title="NTP 服务管理"></a>NTP 服务管理</h3><p>服务状态查看：<code>service ntpd status</code></p><p>服务启用：<code>service ntpd start</code></p><p>服务重启：<code>service ntpd restart</code></p><p>服务开启启动：<code>service ntpd on</code></p><h3 id="NTP-常用命令"><a href="#NTP-常用命令" class="headerlink" title="NTP 常用命令"></a>NTP 常用命令</h3><h4 id="查询-NTP-服务器时间"><a href="#查询-NTP-服务器时间" class="headerlink" title="查询 NTP 服务器时间"></a>查询 NTP 服务器时间</h4><p><code>ntpdate -q ntp1.aliyun.com</code></p><h4 id="检查-NTP-时间同步情况"><a href="#检查-NTP-时间同步情况" class="headerlink" title="检查 NTP 时间同步情况"></a>检查 NTP 时间同步情况</h4><p><code>ntpq -p</code></p><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>自动处理依赖关系。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>/etc/yum.repos.d/*.repo</code></p><ul><li>[名称] - yum 源名称</li><li>name - yum 源的描述信息</li><li>baseurl - yum 源地址</li><li>gpgcheck - 是否检查 GPGKEy</li><li>enable - 是否可用</li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>查看可用包版本</p><p><code>yum list packname</code></p></li><li><p>安装</p><p><code>yum install packname</code></p></li><li><p>搜索</p><p><code>yum search xx</code></p></li><li><p>删除</p><p><code>yum remove packname</code></p></li></ul><h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>dig aliyun.com</code></p><h4 id="查看反向解析"><a href="#查看反向解析" class="headerlink" title="查看反向解析"></a>查看反向解析</h4><p><code>dig -x 104.205.34.3</code></p><h4 id="从根服务器开始追踪一个域名的解析过程"><a href="#从根服务器开始追踪一个域名的解析过程" class="headerlink" title="从根服务器开始追踪一个域名的解析过程"></a>从根服务器开始追踪一个域名的解析过程</h4><p><code>dig +trace aliyun.com</code></p><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><h4 id="直接查询"><a href="#直接查询" class="headerlink" title="直接查询"></a>直接查询</h4><p><code>nslookup aliyun.com</code></p><h4 id="反向查询"><a href="#反向查询" class="headerlink" title="反向查询"></a>反向查询</h4><p><code>nslookup ip</code></p><h3 id="DNS-问题排查思路"><a href="#DNS-问题排查思路" class="headerlink" title="DNS 问题排查思路"></a>DNS 问题排查思路</h3><ul><li><p>用户不能访问，运维可访问</p><ul><li>用户 DNS 设置问题</li></ul></li><li><p>用户与运维都不能访问</p><ul><li><p>检查 DNS 服务是否能 ping 通</p></li><li><p>查看 DNS 服务器的 53 端口是否可用</p><p><code>telnet &lt;IP&gt; 53</code></p></li></ul></li></ul><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>用于显示或设置网络设备。</p><p>查看活动网卡：<code>ifconfig</code></p><p>查看指定网卡：<code>ifconfig eth0</code></p><p>查看所有网卡：<code>ifconfig -a</code></p><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>查看路由表：<code>netstat -rn 、 route -n</code></p><p>查看某端口：<code>netstat -antulp | grep ：80</code></p><p>查看所有监听端口：<code>netstat -antulp | grep LISTEN</code></p><h4 id="网卡配置文件"><a href="#网卡配置文件" class="headerlink" title="网卡配置文件"></a>网卡配置文件</h4><p>文件目录：<code>/etc/sysconfig/network-scripts/ifcfg-*</code></p><ul><li>IPADDR —— IP 地址</li><li>NETMASK —— 子网掩码</li><li>GATEWAY —— 网关</li></ul><h4 id="全局网络配置"><a href="#全局网络配置" class="headerlink" title="全局网络配置"></a>全局网络配置</h4><p>文件目录：<code>/etc/sysconfig/network</code></p><ul><li>HOSTNAME —— 主机名</li><li>GATEWAY —— 默认网关</li></ul><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><h3 id="系统登录日志"><a href="#系统登录日志" class="headerlink" title="系统登录日志"></a>系统登录日志</h3><p>登录成功日志：<code>last [userName]</code></p><p>登录失败日志：<code>lastb</code></p><p>命令记录：<code>history</code></p><h3 id="常用日志文件"><a href="#常用日志文件" class="headerlink" title="常用日志文件"></a>常用日志文件</h3><p>系统启动后的信息和错误日志：<code>/var/log/message</code></p><p>安全相关的日志：<code>/var/log/secure</code></p><p>定时任务相关的日志：<code>/var/log/corn</code></p><p>守护进程启动和停止相关的日志：<code>/var/log/boot.log</code></p><p>用户登录、注销及系统启动、停机的事件日志：<code>/var/log/wtmp</code></p>]]></content>
      
      
      <categories>
          
          <category> Work </category>
          
          <category> Eccom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云培训 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云培训 - 网络基础</title>
      <link href="/2023/02/21/Work/Eccom/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%B9%E8%AE%AD/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/02/21/Work/Eccom/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%B9%E8%AE%AD/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="网络虚拟化"><a href="#网络虚拟化" class="headerlink" title="网络虚拟化"></a>网络虚拟化</h1><h2 id="网络虚拟化协议"><a href="#网络虚拟化协议" class="headerlink" title="网络虚拟化协议"></a>网络虚拟化协议</h2><h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>多个用户共用一套物理网络环境</li><li>不同用户的 VM 分别采用一个 VLAN</li><li>一台物理机可以为多个用户服务</li></ul><p><img src="https://s2.loli.net/2023/05/06/lwi8rjQn9xu3mzL.png" alt="image-20230506151205862"></p><h4 id="协议报文"><a href="#协议报文" class="headerlink" title="协议报文"></a>协议报文</h4><p><img src="https://s2.loli.net/2023/05/06/pveIHjhsU3gRBnm.png" alt="image-20230506151243605"></p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><ul><li>网络设备规格限制</li><li>用户规模网络协议限制</li><li>网络隔离、分离能力限制</li><li>无法自定义网络</li></ul><h3 id="VXLAN"><a href="#VXLAN" class="headerlink" title="VXLAN"></a>VXLAN</h3><p>VXLAN 是 NVo3 中的一种网络虚拟化技术，采用 MAC in UDP 封装方式，将二层报文用三层协议封装，可对二层网络在三层范围进行扩展，同时支持 24bits 的 VNI ID （16M 租户能力），满足数据中心大二层 VM 迁移和多租户的需求</p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p><img src="https://s2.loli.net/2023/05/06/8JA5FMt2Tlpogrj.png" alt="image-20230506151610837"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>多个用户共用一套物理网络</li><li>不同用户 VM 分别采用一个 VXLAN</li><li>一台物理机可以为多个用户服务</li></ul><h4 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h4><ul><li>虚拟机规模受网络设备规格的限制</li><li>网络隔离能力限制</li><li>广播信息泛洪</li><li>用户可自定义网络</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><table><thead><tr><th align="center"></th><th>VLAN</th><th>VXLAN</th></tr></thead><tbody><tr><td align="center">原理</td><td>用 VID 来划分不同的 VLAN</td><td>用网络标识 VNI 区分 VXLAN 段</td></tr><tr><td align="center">协议标准</td><td>802.1Q</td><td>NVo3</td></tr><tr><td align="center">应用场景</td><td>将同一网络划分为多个逻辑上的虚拟子网</td><td>将处于不同网段网络设备整合在同一逻辑链路层网络中</td></tr></tbody></table><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>IP 报文发送的路径信息</p><h2 id="关键功能"><a href="#关键功能" class="headerlink" title="关键功能"></a>关键功能</h2><ul><li>检查数据包的目的地</li><li>确定信息源</li><li>发现可能的路由</li><li>选择最佳路由</li><li>验证和维护路由信息</li></ul><h2 id="OSPF-基本特点"><a href="#OSPF-基本特点" class="headerlink" title="OSPF 基本特点"></a>OSPF 基本特点</h2><ul><li>支持 VLSM</li><li>支持区域划分</li><li>路由变化收敛速度快</li><li>使用 IP 组播收发协议数据</li><li>支持多条等值路由</li><li>支持协议报文的认证</li></ul><h2 id="路由计算过程（OSPF）"><a href="#路由计算过程（OSPF）" class="headerlink" title="路由计算过程（OSPF）"></a>路由计算过程（OSPF）</h2><p><img src="https://s2.loli.net/2023/05/06/VGaZ27EqxHOIAzm.png" alt="image-20230506153203805"></p><h2 id="路由可信度问题——管理距离"><a href="#路由可信度问题——管理距离" class="headerlink" title="路由可信度问题——管理距离"></a>路由可信度问题——管理距离</h2><p><img src="https://s2.loli.net/2023/05/06/sH7XRJcgZ5uYwBn.png" alt="image-20230506153304427"></p><h2 id="等价路由"><a href="#等价路由" class="headerlink" title="等价路由"></a>等价路由</h2><p>负载分担</p><p><img src="https://s2.loli.net/2023/05/06/TbsHvWEFP1BDxGk.png" alt="image-20230506153332861"></p><h2 id="常用网络命令"><a href="#常用网络命令" class="headerlink" title="常用网络命令"></a>常用网络命令</h2><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><ul><li>检测主机</li><li>ICMP 传输协议</li></ul><h2 id="teInet"><a href="#teInet" class="headerlink" title="teInet"></a>teInet</h2><ul><li>远端登入</li><li>检测主机端口是否开放</li></ul><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><ul><li>显示 i 数据包到主机间的路径</li><li>追踪网络数据包的路由途径</li></ul>]]></content>
      
      
      <categories>
          
          <category> Work </category>
          
          <category> Eccom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 阿里云培训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 Summarize</title>
      <link href="/2023/01/01/%E9%9A%8F%E7%AC%94/2023.1.1/"/>
      <url>/2023/01/01/%E9%9A%8F%E7%AC%94/2023.1.1/</url>
      
        <content type="html"><![CDATA[<p><code>2023.1.1 10:48:48 Akira</code></p><p>新年快乐啦，最近真的玩的有点放肆了，是时候规划一下接下来的日子了。</p><p>先来回顾一下并不很顺的上一年趴。</p><ul><li><p>2022.6 - 2022.9</p><p>人生第一次面试，很顺利，也如愿的来到了沐坤科技。相识了我们的大牛毛组长，大我一两届且强的一塌糊涂的方宏哥，还有时刻激励着我的子豪哈哈哈哈，子豪真的很棒，相信他一定会是个大佬滴。</p><p>那段时间，最叫我印象深刻的，就是舒阳了吧。哇😯，怎么会有这么优秀的女孩子啊，琴棋书画，3A大作，样样精通呐，膜拜哈哈哈。妈妈看上了，但是，我何德何能呐。</p><p>……最后我润了，年少轻狂，实习3k转正8k的日子没有拴住我，一头扎进秋招了。</p><p>悔不当初啊，沐坤确实让我学到了很多东西，应该留下多学学的。</p></li><li><p>2022.9 - 2022.12</p><p>又是一个很顺利的面试，万朋数智，很开心，以为稳了，玩了一个月，最后人家鸽了，杀人的心都有了，为他我还放弃了力维的岗位🙄。</p><p>疯狂背面试题，学习新的东西……</p><p>等到了华讯，目前正在签三方，但愿顺利</p></li></ul><p>okey，大致也就这些，不是很顺，新年继续加油！</p><p>接下来的规划：</p><ul><li><p>华讯签三方</p><ul><li><p>争取汲取大佬的经验🤦‍♂️！！</p></li><li><p>多待一段时日，混工作经验</p></li></ul></li><li><p>React</p></li><li><p>微信小程序</p></li><li><p>vite</p></li><li><p>搞定毕设（也快了🤪）</p></li></ul><p>就这些吧，多了也做不到，加油！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>源码学习 - 模板编译</title>
      <link href="/2022/12/23/vue/Vue%20Resource%20Learing/6.%20%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91/"/>
      <url>/2022/12/23/vue/Vue%20Resource%20Learing/6.%20%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h1 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h1><h2 id="大体步骤"><a href="#大体步骤" class="headerlink" title="大体步骤"></a>大体步骤</h2><p>主要的步骤是：先将模板编译成 <code>AST</code>，然后再将其转换成 渲染函数，也就是熟悉的 <code>render</code>函数。</p><p>但是有一些不存在变量的节点，是不需要重新渲染的，所以 <code>Vue</code> 对其做了相应的优化，也就是将所有的静态节点进行标记，最终在生成 <code>render</code> 函数</p><p>所以大体逻辑，可以分成三个部分：</p><ul><li>将模板编译成 AST</li><li>遍历 AST 标记静态节点</li><li>使用 AST 生成渲染函数</li></ul><p>这三部分在源码中是分成三个模块去执行：</p><ul><li>解析器</li><li>优化器</li><li>代码生成器</li></ul><p><img src="https://s2.loli.net/2023/03/08/b5RofgcjlB6G1hI.png" alt="image-20230308103949419"></p><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><h3 id="解析器作用"><a href="#解析器作用" class="headerlink" title="解析器作用"></a>解析器作用</h3><p><code>template -&gt; AST</code></p><p>这一模块主要就是将 模板 编译成 AST。</p><p>例如： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>上面简单的模板编译成 AST 之后是这样的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;div&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;attrsList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;attrsMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rawAttrsMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;attrsList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;attrsMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rawAttrsMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[Circular ~]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;expression&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_s(name)&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;@binding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;static&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;plain&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;static&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;staticRoot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plain&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;static&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;staticRoot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>所谓的 <code>AST</code> 实际上就是通过 <code>Object</code> 的形式描述模板的各个状态以及属性。</p><h3 id="解析器内部原理"><a href="#解析器内部原理" class="headerlink" title="解析器内部原理"></a>解析器内部原理</h3><p><code>正则</code> </p><p>实际上，解析器内部拆分了好多个子解析器，例如：HTML解析器、文本解析器、过滤解析器…其中最重要的就是 HTML解析器，在解析的过程中，会不断的触发一系列的钩子函数：</p><ul><li>文本钩子</li><li>注释钩子</li><li>开始标签钩子</li><li>结束标签钩子</li></ul><p>解析器的工作过程，就是拿到模板之后进行循环遍历，通过正则进行匹配，一段一段的裁剪，以及采用栈的形式，确保 AST 的层级关系，直到模板被截取空。</p><p>其中需要注意的是，自闭合标签的处理。自闭合标签实际上就是在开始标签的末尾存在 <code>/</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 属性 */</span></span><br><span class="line"><span class="keyword">const</span> attribute = <span class="regexp">/^\s*([^\s&quot;&#x27;&lt;&gt;\/=]+)(?:\s*(=)\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\s&quot;&#x27;=&lt;&gt;`]+)))?/</span></span><br><span class="line"><span class="comment">/** 标签名 */</span></span><br><span class="line"><span class="comment">/** &lt;my-card&gt;&lt;/my-card&gt; */</span></span><br><span class="line"><span class="keyword">const</span> ncname = <span class="string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z<span class="subst">$&#123;unicodeRegExp.source&#125;</span>]*`</span></span><br><span class="line"><span class="comment">/** &lt;component:child&gt;&lt;/component:child&gt; */</span></span><br><span class="line"><span class="keyword">const</span> qnameCapture = <span class="string">`((?:<span class="subst">$&#123;ncname&#125;</span>\\:)?<span class="subst">$&#123;ncname&#125;</span>)`</span></span><br><span class="line"><span class="comment">/** &lt; */</span></span><br><span class="line"><span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;qnameCapture&#125;</span>`</span>)</span><br><span class="line"><span class="comment">/** &gt; || /&gt; */</span></span><br><span class="line"><span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span></span><br><span class="line"><span class="comment">/** &lt;/div&gt; */</span></span><br><span class="line"><span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;qnameCapture&#125;</span>[^&gt;]*&gt;`</span>)</span><br></pre></td></tr></table></figure><h3 id="大体过程"><a href="#大体过程" class="headerlink" title="大体过程"></a>大体过程</h3><p><code>实际上 开始标签 和 结束标签 之前还有 注释、条件注释、DOCTYPE</code></p><p><img src="https://s2.loli.net/2023/03/08/VMaqS3xOLyjDtEZ.png" alt="image-20230308144858685"></p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>所谓优化，即遍历 AST 将所有的静态节点找到，并且进行标记。</p><p>作用：</p><ul><li>每次重新渲染时，不需要为静态子树创建新节点</li><li>在 <code>patch</code> 过程中可以跳过</li></ul><p>主要标记有俩：<code>static</code>  <code>staticRoot</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** packages\vue-template-compiler\browser.js */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isStatic</span> (node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">2</span>) &#123; <span class="comment">// expression</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">3</span>) &#123; <span class="comment">// text</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> !!(node.<span class="property">pre</span> || (</span><br><span class="line">    !node.<span class="property">hasBindings</span> &amp;&amp; <span class="comment">// no dynamic bindings</span></span><br><span class="line">    !node.<span class="property">if</span> &amp;&amp; !node.<span class="property">for</span> &amp;&amp; <span class="comment">// not v-if or v-for or v-else</span></span><br><span class="line">    !<span class="title function_">isBuiltInTag</span>(node.<span class="property">tag</span>) &amp;&amp; <span class="comment">// not a built-in</span></span><br><span class="line">    <span class="title function_">isPlatformReservedTag</span>(node.<span class="property">tag</span>) &amp;&amp; <span class="comment">// not a component</span></span><br><span class="line">    !<span class="title function_">isDirectChildOfTemplateFor</span>(node) &amp;&amp;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(node).<span class="title function_">every</span>(isStaticKey)</span><br><span class="line">  ))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p><code>AST -&gt; render</code></p><p>所谓的 <code>render</code> 函数，实际上就是函数的嵌套，这个嵌套函数是通过遍历 <code>AST</code>，拼接而成的 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;el&quot;&gt;Hello &#123;&#123;name&#125;&#125;&lt;/div&gt; -&gt; AST -&gt; render</span></span><br><span class="line"><span class="comment">render: </span></span><br><span class="line"><span class="comment">with(this) &#123;</span></span><br><span class="line"><span class="comment">return _c(&quot;div&quot;, &#123;attrs: &#123; &quot;id&quot;: &quot;el&quot; &#125;&#125;, [_v(&quot;hello&quot; + _s(name))])</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>涉及到的函数有：<code>_c</code> <code>_v</code> <code>_s</code></p><p><code>_c</code>：其实就是 <code>createElement(tagName, attrs, children)</code></p><p>最为主要的函数就是 <code>genElement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">genElement</span>(<span class="params">el, state</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = el.<span class="property">plain</span> ? <span class="literal">undefined</span> : <span class="title function_">genData</span>(el, state)</span><br><span class="line">  <span class="keyword">const</span> children = <span class="title function_">genChildren</span>(el, state)</span><br><span class="line">  code = <span class="string">`_c(&#x27;<span class="subst">$&#123;el.tag&#125;</span>&#x27;<span class="subst">$&#123;data ? <span class="string">`,<span class="subst">$&#123;data&#125;</span>`</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><span class="subst">$&#123;children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span>: <span class="string">&#x27;&#x27;</span>&#125;</span>)`</span></span><br><span class="line">  <span class="keyword">return</span> code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Source-Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码学习 - 全局 API &amp; 实例方法</title>
      <link href="/2022/12/21/vue/Vue%20Resource%20Learing/5.%20%E5%85%A8%E5%B1%80%20API%20&amp;%20%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2022/12/21/vue/Vue%20Resource%20Learing/5.%20%E5%85%A8%E5%B1%80%20API%20&amp;%20%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="全局-API-amp-实例方法"><a href="#全局-API-amp-实例方法" class="headerlink" title="全局 API &amp; 实例方法"></a>全局 API &amp; 实例方法</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><strong>面试官 问</strong>：Vue.use(plugin) 做了什么？</p><p><strong>答</strong>：</p><p>负责安装 plugin 插件，其实就是执行插件提供的 install 方法。</p><ul><li>首先判断该插件是否已经安装过</li><li>如果没有，则执行插件提供的 install 方法安装插件，具体做什么有插件自己决定</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.mixin(options) 做了什么？</p><p><strong>答</strong>：</p><p>负责在 Vue 的全局配置上合并 options 配置。然后在每个组件生成 vnode 时会将全局配置合并到组件自身的配置上来。</p><ul><li>标准化 options 对象上的 props、inject、directive 选项的格式</li><li>处理 options 上的 extends 和 mixins，分别将他们合并到全局配置上</li><li>然后将 options 配置和全局配置进行合并，选项冲突时 options 配置会覆盖全局配置</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.component(compName, Comp) 做了什么？</p><p><strong>答</strong>：</p><p>负责注册全局组件。其实就是将组件配置注册到全局配置的 components 选项上（options.components），然后各个子组件在生成 vnode 时会将全局的 components 选项合并到局部的 components 配置项上。</p><ul><li>如果第二个参数为空，则表示获取 compName 的组件构造函数</li><li>如果 Comp 是组件配置对象，则使用 Vue.extend 方法得到组件构造函数，否则直接进行下一步</li><li>在全局配置上设置组件信息，<code>this.options.components.compName = CompConstructor</code></li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.directive(‘my-directive’, {xx}) 做了什么？</p><p><strong>答</strong>：</p><p>在全局注册 my-directive 指令，然后每个子组件在生成 vnode 时会将全局的 directives 选项合并到局部的 directives 选项中。原理同 Vue.component 方法：</p><ul><li>如果第二个参数为空，则获取指定指令的配置对象</li><li>如果不为空，如果第二个参数是一个函数的话，则生成配置对象 { bind: 第二个参数, update: 第二个参数 }</li><li>然后将指令配置对象设置到全局配置上，<code>this.options.directives[&#39;my-directive&#39;] = &#123;xx&#125;</code></li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.filter(‘my-filter’, function(val) {xx}) 做了什么？</p><p><strong>答</strong>：</p><p>负责在全局注册过滤器 my-filter，然后每个子组件在生成 vnode 时会将全局的 filters 选项合并到局部的 filters 选项中。原理是：</p><ul><li>如果没有提供第二个参数，则获取 my-filter 过滤器的回调函数</li><li>如果提供了第二个参数，则是设置 <code>this.options.filters[&#39;my-filter&#39;] = function(val) &#123;xx&#125;</code>。</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.extend(options) 做了什么？</p><p><strong>答</strong>：</p><p>Vue.extend 基于 Vue 创建一个子类，参数 options 会作为该子类的默认全局配置，就像 Vue 的默认全局配置一样。所以通过 Vue.extend 扩展一个子类，一大用处就是内置一些公共配置，供子类的子类使用。</p><ul><li>定义子类构造函数，这里和 Vue 一样，也是调用 _init(options)</li><li>合并 Vue 的配置和 options，如果选项冲突，则 options 的选项会覆盖 Vue 的配置项</li><li>给子类定义全局 API，值为 Vue 的全局 API，比如 <code>Sub.extend = Super.extend</code>，这样子类同样可以扩展出其它子类</li><li>返回子类 Sub</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.set(target, key, val) 做了什么</p><p><strong>答</strong>：</p><p>由于 Vue 无法探测普通的新增 property (比如 this.myObject.newProperty &#x3D; ‘hi’)，所以通过 Vue.set 为向响应式对象中添加一个 property，可以确保这个新 property 同样是响应式的，且触发视图更新。</p><ul><li>更新数组指定下标的元素：Vue.set(array, idx, val)，内部通过 splice 方法实现响应式更新</li><li>更新对象已有属性：Vue.set(obj, key ,val)，直接更新即可 &#x3D;&gt; <code>obj[key] = val</code></li><li>不能向 Vue 实例或者 $data 动态添加根级别的响应式数据</li><li>Vue.set(obj, key, val)，如果 obj 不是响应式对象，会执行 <code>obj[key] = val</code>，但是不会做响应式处理</li><li>Vue.set(obj, key, val)，为响应式对象 obj 增加一个新的 key，则通过 defineReactive 方法设置响应式，并触发依赖更新</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.delete(target, key) 做了什么？</p><p><strong>答</strong>：</p><p>删除对象的 property。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到 property 被删除的限制，但是你应该很少会使用它。当然同样不能删除根级别的响应式属性。</p><ul><li>Vue.delete(array, idx)，删除指定下标的元素，内部是通过 splice 方法实现的</li><li>删除响应式对象上的某个属性：Vue.delete(obj, key)，内部是执行 <code>delete obj.key</code>，然后执行依赖更新即可</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：Vue.nextTick(cb) 做了什么？</p><p><strong>答</strong>：</p><p>Vue.nextTick(cb) 方法的作用是延迟回调函数 cb 的执行，一般用于 <code>this.key = newVal</code> 更改数据后，想立即获取更改过后的 DOM 数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">key</span> = <span class="string">&#x27;new val&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// DOM 更新了</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其内部的执行过程是：</p><ul><li><code>this.key = &#39;new val</code>，触发依赖通知更新，将负责更新的 watcher 放入 watcher 队列</li><li>将刷新 watcher 队列的函数放到 callbacks 数组中</li><li>在浏览器的异步任务队列中放入一个刷新 callbacks 数组的函数</li><li><strong>Vue.nextTick(cb)</strong> 来插队，将 cb 函数放入 callbacks 数组</li><li>待将来的某个时刻执行刷新 callbacks 数组的函数</li><li>然后执行 callbacks 数组中的众多函数，触发 watcher.run 的执行，更新 DOM</li><li>由于 cb 函数是在后面放到 callbacks 数组，所以这就保证了先完成的 DOM 更新，再执行 cb 函数</li></ul></li><li><p><strong>面试官 问</strong>：vm.$set(obj, key, val) 做了什么？</p><p><strong>答</strong>：</p><p>vm.$set 用于向响应式对象添加一个新的 property，并确保这个新的 property 同样是响应式的，并触发视图更新。由于 Vue 无法探测对象新增属性或者通过索引为数组新增一个元素，比如：<code>this.obj.newProperty = &#39;val&#39;</code>、<code>this.arr[3] = &#39;val&#39;</code>。所以这才有了 vm.$set，它是 Vue.set 的别名。</p><ul><li>为对象添加一个新的响应式数据：调用 defineReactive 方法为对象增加响应式数据，然后执行 dep.notify 进行依赖通知，更新视图</li><li>为数组添加一个新的响应式数据：通过 splice 方法实现</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$delete(obj, key)  做了什么？</p><p><strong>答</strong>：</p><p>vm.$delete 用于删除对象上的属性。如果对象是响应式的，且能确保能触发视图更新。该方法主要用于避开 Vue 不能检测属性被删除的情况。它是 Vue.delete 的别名。</p><ul><li>删除数组指定下标的元素，内部通过 splice 方法来完成</li><li>删除对象上的指定属性，则是先通过 delete 运算符删除该属性，然后执行 dep.notify 进行依赖通知，更新视图</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$watch(expOrFn, callback, [options]) 做了什么？</p><p>答：</p><p>vm.$watch 负责观察 Vue 实例上的一个表达式或者一个函数计算结果的变化。当其发生变化时，回调函数就会被执行，并为回调函数传递两个参数，第一个为更新后的新值，第二个为老值。</p><p>这里需要 <strong>注意</strong> 一点的是：如果观察的是一个对象，比如：数组，当你用数组方法，比如 push 为数组新增一个元素时，回调函数被触发时传递的新值和老值相同，因为它们指向同一个引用，所以在观察一个对象并且在回调函数中有新老值是否相等的判断时需要注意。</p><p>vm.$watch 的第一个参数只接收简单的响应式数据的键路径，对于更复杂的表达式建议使用函数作为第一个参数。</p><p>至于 vm.$watch 的内部原理是：</p><ul><li>设置 options.user &#x3D; true，标志是一个用户 watcher</li><li>实例化一个 Watcher 实例，当检测到数据更新时，通过 watcher 去触发回调函数的执行，并传递新老值作为回调函数的参数</li><li>返回一个 unwatch 函数，用于取消观察</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$on(event, callback) 做了什么？</p><p><strong>答</strong>：</p><p>监听当前实例上的自定义事件，事件可由 vm.$emit 触发，回调函数会接收所有传入事件触发函数（vm.$emit）的额外参数。</p><p>vm.$on 的原理很简单，就是处理传递的 event 和 callback 两个参数，将注册的事件和回调函数以键值对的形式存储到 vm._event 对象中，vm._events &#x3D; { eventName: [cb1, cb2, …], … }。</p></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$emit(eventName, […args]) 做了什么？</p><p><strong>答</strong>：</p><p>触发当前实例上的指定事件，附加参数都会传递给事件的回调函数。</p><p>其内部原理就是执行 <code>vm._events[eventName]</code> 中所有的回调函数。</p><blockquote><p>备注：从 on和on 和 on和emit 的实现原理也能看出，组件的自定义事件其实是谁触发谁监听，所以在这会儿再回头看 <a href="https://juejin.cn/post/6950084496515399717">Vue 源码解读（2）—— Vue 初始化过程</a> 中关于 initEvent 的解释就会明白在说什么，因为组件自定义事件的处理内部用的就是 vm.on、vm.on、vm.on、vm.emit。</p></blockquote></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$off([event, callback]) 做了什么？</p><p><strong>答</strong>：</p><p>移除自定义事件监听器，即移除 vm._events 对象上相关数据。</p><ul><li>如果没有提供参数，则移除实例的所有事件监听</li><li>如果只提供了 event 参数，则移除实例上该事件的所有监听器</li><li>如果两个参数都提供了，则移除实例上该事件对应的监听器</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$once(event, callback)  做了什么？</p><p><strong>答</strong>：</p><p>监听一个自定义事件，但是该事件只会被触发一次。一旦触发以后监听器就会被移除。</p><p>其内部的实现原理是：</p><ul><li>包装用户传递的回调函数，当包装函数执行的时候，除了会执行用户回调函数之外还会执行 <code>vm.$off(event, 包装函数)</code> 移除该事件</li><li>用 <code>vm.$on(event, 包装函数)</code> 注册事件</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm._update(vnode, hydrating)  做了什么？</p><p><strong>答</strong>：</p><p>官方文档没有说明该 API，这是一个用于源码内部的实例方法，负责更新页面，是页面渲染的入口，其内部根据是否存在 prevVnode 来决定是首次渲染，还是页面更新，从而在调用 <strong>patch</strong> 函数时传递不同的参数。该方法在业务开发中不会用到。</p></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$forceUpdate()  做了什么？</p><p><strong>答</strong>：</p><p>迫使 Vue 实例重新渲染，它仅仅影响组件实例本身和插入插槽内容的子组件，而不是所有子组件。其内部原理到也简单，就是直接调用 <code>vm._watcher.update()</code>，它就是 <code>watcher.update()</code> 方法，执行该方法触发组件更新。</p></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$destroy()  做了什么？</p><p><strong>答</strong>：</p><p>负责完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令和事件监听器。在执行过程中会调用 <code>beforeDestroy</code> 和 <code>destroy</code> 两个钩子函数。在大多数业务开发场景下用不到该方法，一般都通过 v-if 指令来操作。其内部原理是：</p><ul><li>调用 beforeDestroy 钩子函数</li><li>将自己从老爹肚子里（$parent）移除，从而销毁和老爹的关系</li><li>通过 watcher.teardown() 来移除依赖监听</li><li>通过 vm.<strong>patch</strong>(vnode, null) 方法来销毁节点</li><li>调用 destroyed 钩子函数</li><li>通过 <code>vm.$off</code> 方法移除所有的事件监听</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm.$nextTick(cb)  做了什么？</p><p><strong>答</strong>：</p><p>vm.$nextTick 是 Vue.nextTick 的别名，其作用是延迟回调函数 cb 的执行，一般用于 <code>this.key = newVal</code> 更改数据后，想立即获取更改过后的 DOM 数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">key</span> = <span class="string">&#x27;new val&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// DOM 更新了</span></span><br><span class="line">&#125;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其内部的执行过程是：</p><ul><li><code>this.key = &#39;new val&#39;</code>，触发依赖通知更新，将负责更新的 watcher 放入 watcher 队列</li><li>将刷新 watcher 队列的函数放到 callbacks 数组中</li><li>在浏览器的异步任务队列中放入一个刷新 callbacks 数组的函数</li><li><strong>vm.$nextTick(cb)</strong> 来插队，直接将 cb 函数放入 callbacks 数组</li><li>待将来的某个时刻执行刷新 callbacks 数组的函数</li><li>然后执行 callbacks 数组中的众多函数，触发 watcher.run 的执行，更新 DOM</li><li>由于 cb 函数是在后面放到 callbacks 数组，所以这就保证了先完成的 DOM 更新，再执行 cb 函数</li></ul></li></ul><hr><ul><li><p><strong>面试官 问</strong>：vm._render  做了什么？</p><p><strong>答</strong>：</p><p>官方文档没有提供该方法，它是一个用于源码内部的实例方法，负责生成 vnode。其关键代码就一行，执行 render 函数生成 vnode。不过其中加了大量的异常处理代码。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Source-Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码学习 - 异步更新</title>
      <link href="/2022/12/20/vue/Vue%20Resource%20Learing/4.%20%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0/"/>
      <url>/2022/12/20/vue/Vue%20Resource%20Learing/4.%20%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="异步更新"><a href="#异步更新" class="headerlink" title="异步更新"></a>异步更新</h1><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>数据更新，通知依赖更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** src\core\observer\index.js */</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">reactiveGetter</span> () &#123; ... &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> <span class="title function_">reactiveSetter</span> (newVal) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.<span class="title function_">call</span>(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(newVal)</span><br><span class="line">      dep.<span class="title function_">notify</span>() <span class="comment">// =========================================异步更新入口</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="dep-notify"><a href="#dep-notify" class="headerlink" title="dep.notify()"></a>dep.notify()</h2><p>通知所有的依赖更新，收集到的所有 <code>watcher</code> 执行 <code>update</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">notify () &#123;</span><br><span class="line">  <span class="keyword">const</span> subs = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">slice</span>()</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !config.<span class="property">async</span>) &#123;</span><br><span class="line">    subs.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">id</span> - b.<span class="property">id</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">    subs[i].<span class="title function_">update</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="subs-i-update"><a href="#subs-i-update" class="headerlink" title="subs[i].update()"></a>subs[i].update()</h2><p>实际上 <code>update</code> 中最终是要执行 <code>this.run()</code> 的，<code>run</code> 最终执行 <code>get</code> 方法。</p><p>但是 <code>Vue</code> 在这里将所有需要执行 <code>run</code> 方法的 <code>watcher</code> 通过队列的形式进行存储起来，并且通过刷新队列函数的形式最终执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">update () &#123;</span><br><span class="line">  <span class="comment">/** computed */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">lazy</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sync</span>) &#123;</span><br><span class="line">    <span class="comment">/** 最终执行 run */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/** 入队 */</span></span><br><span class="line">    <span class="title function_">queueWatcher</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="queueWatcher"><a href="#queueWatcher" class="headerlink" title="queueWatcher"></a>queueWatcher</h2><p>将 <code>watcher</code> 入队，以及将刷新队列的函数放入 <code>nextTick</code> 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 将 watcher 放入 watcher 队列 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queueWatcher</span> (<span class="attr">watcher</span>: <span class="title class_">Watcher</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = watcher.<span class="property">id</span></span><br><span class="line">  <span class="comment">// 如果 watcher 已经存在，则跳过，不会重复入队</span></span><br><span class="line">  <span class="keyword">if</span> (has[id] == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 缓存 watcher.id，用于判断 watcher 是否已经入队</span></span><br><span class="line">    has[id] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (!flushing) &#123;</span><br><span class="line">      <span class="comment">// 当前没有处于刷新队列状态，watcher 直接入队</span></span><br><span class="line">      queue.<span class="title function_">push</span>(watcher)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 已经在刷新队列了</span></span><br><span class="line">      <span class="comment">// 从队列末尾开始倒序遍历，根据当前 watcher.id 找到它大于的 watcher.id 的位置，然后将自己插入到该位置之后的下一个位置</span></span><br><span class="line">      <span class="comment">// 即将当前 watcher 放入已排序的队列中，且队列仍是有序的</span></span><br><span class="line">      <span class="keyword">let</span> i = queue.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (i &gt; index &amp;&amp; queue[i].<span class="property">id</span> &gt; watcher.<span class="property">id</span>) &#123;</span><br><span class="line">        i--</span><br><span class="line">      &#125;</span><br><span class="line">      queue.<span class="title function_">splice</span>(i + <span class="number">1</span>, <span class="number">0</span>, watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// queue the flush</span></span><br><span class="line">    <span class="keyword">if</span> (!waiting) &#123;</span><br><span class="line">      waiting = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !config.<span class="property">async</span>) &#123;</span><br><span class="line">        <span class="comment">// 直接刷新调度队列</span></span><br><span class="line">        <span class="comment">// 一般不会走这儿，Vue 默认是异步执行，如果改为同步执行，性能会大打折扣</span></span><br><span class="line">        <span class="title function_">flushSchedulerQueue</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 熟悉的 nextTick =&gt; vm.$nextTick、Vue.nextTick</span></span><br><span class="line"><span class="comment">       *   1、将 回调函数（flushSchedulerQueue） 放入 callbacks 数组</span></span><br><span class="line"><span class="comment">       *   2、通过 pending 控制向浏览器任务队列中添加 flushCallbacks 函数</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="title function_">nextTick</span>(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>所有的回调放入到 <code>callbacks</code> 数组中，然后通过 <code>timerFunc</code> ，也就是浏览器的异步任务，或者宏任务，进行异步执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span> (cb?: <span class="title class_">Function</span>, ctx?: <span class="title class_">Object</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve</span><br><span class="line">  callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.<span class="title function_">call</span>(ctx)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      <span class="title function_">_resolve</span>(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">    <span class="title function_">timerFunc</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="timerFunc"><a href="#timerFunc" class="headerlink" title="timerFunc"></a>timerFunc</h2><p>优雅降级</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timerFunc</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(<span class="title class_">Promise</span>)) &#123;</span><br><span class="line">  <span class="comment">/** promise */</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    p.<span class="title function_">then</span>(flushCallbacks)</span><br><span class="line">    <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">  <span class="comment">/** MutationObserver */</span></span><br><span class="line">  <span class="title function_">isNative</span>(<span class="title class_">MutationObserver</span>) ||</span><br><span class="line">  <span class="title class_">MutationObserver</span>.<span class="title function_">toString</span>() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">)) &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks)</span><br><span class="line">  <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter))</span><br><span class="line">  observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">    <span class="attr">characterData</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(setImmediate)) &#123;</span><br><span class="line">  <span class="comment">/** setImmediate */</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setImmediate</span>(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">/** setTimeout */</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h2><p>更新，更新，最终是一定会执行到更新的：更新数据，更新视图，这里的数据更新指的是 watcher 中的 value 值。</p><p>只不过他采用的是<code>统一(callbacks,flushCallbacks)</code>的<code>异步(timerFunc,promise,setTimeout...)</code>更新。</p><p>统一：自然是通过队列的形式进行存储之后，在进行执行<code>刷新队列</code>的方法。</p><p>异步：就是通过浏览器的异步方式，在 <code>Vue</code> 中也就体现在 <code>nextTick</code> 当中 ，进行调用<code>刷新队列</code>的方法。</p><p><img src="https://s2.loli.net/2023/03/06/aswJTMAUuo4OCiE.png" alt="image-20230306100952238"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Source-Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习 - 响应式原理</title>
      <link href="/2022/12/18/vue/Vue%20Resource%20Learing/3.%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/"/>
      <url>/2022/12/18/vue/Vue%20Resource%20Learing/3.%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h1><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">initState</span>(<span class="params"></span>) &#123;</span><br><span class="line">  vm.<span class="property">_watchers</span> = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.<span class="property">$options</span></span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">props</span>) <span class="title function_">initProps</span>(vm, opts.<span class="property">props</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">methods</span>) <span class="title function_">initMethods</span>(vm, opts.<span class="property">methods</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">data</span>) <span class="title function_">initData</span>(vm)</span><br><span class="line">  <span class="keyword">else</span> <span class="title function_">observe</span>(vm.<span class="property">_data</span> = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">computed</span>) <span class="title function_">initComputed</span>(vm, opts.<span class="property">computed</span>)</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">watch</span> &amp;&amp; opts.<span class="property">watch</span> !== nativeWatch) <span class="title function_">initWatch</span>(vm, opts.<span class="property">watch</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h2><ul><li><code>initProps</code></li><li><code>initMethods</code></li><li><code>initData</code></li><li><code>initComputed</code></li><li><code>initWatch</code></li></ul><blockquote><p>思考：为什么 Vue 中能通过 this 直接访问，<code>props、methods、computed、data</code> 中的数据？</p><p>这也就是 <code>initProps、initMethods、initData、initComputed</code> 的作用，在内部会将数据通过 <code>proxy</code> 代理到全局的 <code>_data</code> 中，因此可以访问</p></blockquote><h2 id="initData"><a href="#initData" class="headerlink" title="initData"></a>initData</h2><ul><li><code>Object.defineProperty</code> 数据拦截</li><li><code>Dep</code> 依赖收集</li><li><code>Wathcer</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过程</span></span><br><span class="line"><span class="title class_">Observer</span> -&gt; defineReactive -&gt; dep = <span class="keyword">new</span> <span class="title class_">Dep</span>() -&gt; <span class="title class_">Object</span>.<span class="title function_">definProperty</span>() -&gt; getter、setter</span><br><span class="line">    getter -&gt; <span class="keyword">if</span>(<span class="title class_">Dep</span>.<span class="property">terget</span>) -&gt; dep.<span class="title function_">depend</span>() </span><br><span class="line">             -&gt; <span class="title class_">Dep</span>.<span class="property">target</span>.<span class="title function_">addDep</span>(<span class="variable language_">this</span>) -&gt; dep.<span class="title function_">addSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">    setter -&gt; dep.<span class="title function_">notify</span>() </span><br><span class="line">             -&gt; watcher.<span class="title function_">update</span>() -&gt; watcher.<span class="property">dirty</span> = <span class="literal">true</span> -&gt; watcher.<span class="title function_">run</span>() -&gt; watcher.<span class="title function_">get</span>()</span><br></pre></td></tr></table></figure><blockquote><p><code>Dep.target</code> 是什么？</p><p>Dep.target 为 Dep 类的一个静态属性，值为 watcher，在实例化 Watcher 时会被设置。</p><p>也就是说，当 new Watcher(vm, exp, cb, options) 时，会执行传递的回调函数，若回调中存在 vm.key 读取行为，将会设置 Dep.target 为当前的 watcher，进而进行后续的依赖收集。</p></blockquote><blockquote><p><code>watcher.dirty</code> 有什么作用？</p><p><code>dirty</code> 其实就是 <code>Computed</code> 属性的能够进行缓存的核心。</p><p><code>Computed</code> 实际上还是通过 <code>watch</code> 去实现的，只不过采用的是懒执行的方式。然而 <code>watcher</code> 懒执行的时候会执行 <code>evaluate</code> 方法，这里会将 <code>dirty</code> 置为 <code>false</code>。然而 <code>Computed</code> 在初始化的时候会创建一个专有的 <code>ComputedGetter</code>，类似普通的 <code>getter</code> 函数，每次执行<code>computedGetter</code>就会判断 <code>watcher.dirty</code> ，若为<code>true</code>执行 <code>evaluate</code>，最后返回 <code>watcher.value</code>。</p><p>那么什么时候 <code>dirty</code> 为 <code>true</code> 呢？</p><p>实际上是当调用 <code>Watcher.update</code> 方法的时候会将其置为 <code>true</code>。我们知道当数据发生变化时，会调用 <code>setter</code> 方法，并执行 <code>watcher.update</code> 。因此也保证了，在一次渲染中，<code>computed</code> 只会执行一次。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Source-Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习 - 初始化过程</title>
      <link href="/2022/12/16/vue/Vue%20Resource%20Learing/2.%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/12/16/vue/Vue%20Resource%20Learing/2.%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-初始化过程"><a href="#Vue-初始化过程" class="headerlink" title="Vue 初始化过程"></a>Vue 初始化过程</h1><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                                        <span class="comment">// src/core/instance/index.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="comment">// Vue.prototype._init</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_init</span>(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">initMixin</span>(); <span class="comment">// 定义 _init</span></span><br></pre></td></tr></table></figure><h2 id="initMixin"><a href="#initMixin" class="headerlink" title="initMixin"></a>initMixin</h2><ul><li>处理组件配置项 <ul><li>子组件性能优化 initInternalComponent(vm, options) 打平配置项，避免原型链查找，提高效率</li><li>根组件选项合并</li></ul></li><li>initCycle(vm) <ul><li>定义关系属性 $parent $children $root $refs</li></ul></li><li>initEvent(vm)<ul><li>初始化自定义事件</li></ul></li><li>initRender(vm)<ul><li>初始化插槽，获取 &#96;this.$slots，定义 this._c，即 create Element 方法，平时使用的 h 函数</li></ul></li><li>callHook(vm, ‘beforeCreate’)</li><li>initInjecttions(vm)<ul><li>针对 provide&#x2F;inject，数据注入，一般使用在封装高阶插件的时候使用，不推荐在普通应用程序中使用</li><li>初始化 inject 选项，得到 {key: val} 形式的配置对象，并做响应式处理</li><li>provide 实际上并非真正的注入到每一个子代，而是存在祖代的，通过 inject 向上查询 provide 选项</li></ul></li><li>initState(vm)<ul><li>响应式原理核心，处理 props、methods、computed、data、watch</li></ul></li><li>initProvide(vm) </li><li>callHook(vm, ‘created’)</li><li>挂载</li></ul><h2 id="inject、state、provide-顺序问题"><a href="#inject、state、provide-顺序问题" class="headerlink" title="inject、state、provide 顺序问题"></a>inject、state、provide 顺序问题</h2><p>重点在于 <code>state</code>：</p><ul><li><code>state</code> 中需要访问到上层收集到的 inject 数据。</li><li><code>provide</code> 中需要访问到 state 中的数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Source-Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码学习 - 前言</title>
      <link href="/2022/12/15/vue/Vue%20Resource%20Learing/1.%20%E5%89%8D%E8%A8%80/"/>
      <url>/2022/12/15/vue/Vue%20Resource%20Learing/1.%20%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>源码下载</p><p><code>git clone https://github.com/vuejs/vue.git</code></p></li><li><p>source map：</p><p>在 <code>package.json.script</code> 中的 <code>dev</code> 命令中添加 <code>--sourcemap</code>，形成源码映射，便于调试。</p></li></ol><h2 id="扫盲"><a href="#扫盲" class="headerlink" title="扫盲"></a>扫盲</h2><blockquote><p>执行 <code>npm run build</code> 命令之后会发现 <code>dist</code> ，目录下生成了多个 <code>vue.*.js</code> 文件，各有什么含义呢？</p></blockquote><ol><li><p>构建文件分类</p><table><thead><tr><th></th><th>UMD</th><th>CommonJS</th><th>ES Module</th></tr></thead><tbody><tr><td>Full</td><td>vue.js</td><td>vue.common.js</td><td>vue.esm.js</td></tr><tr><td>Runtime-only</td><td>vue.runtime.js</td><td>vue.runtime.common.js</td><td>vue.runtime.esm.js</td></tr><tr><td>Full (prod)</td><td>vue.min.js</td><td>vue.common.prod.js</td><td></td></tr><tr><td>Runtime-only (prod)</td><td>vue.runtime.min.js</td><td>vue.runtime.common.js</td><td></td></tr></tbody></table></li><li><p>名词解释</p><ul><li><strong>Full：</strong> 全量包，包含编译器<code>(complier)</code>和运行<code>(runtime)</code>时。</li><li><strong>Compiler：</strong>编译器，负责讲模板字符串编译为 <code>JavaScript</code> 语法的 <code>rander</code> 函数。</li><li><strong>Runtime：</strong>负责创建 <code>Vue</code> 实例、渲染函数、<code>path</code> 虚拟 <code>DOM</code> 等，基本上除了编译器之外的代码都属于运行时代码。</li><li><strong>UMD：</strong>兼容 <code>CommonJS</code> 和 <code>AMD</code> 规范。</li><li><strong>CommonJS：</strong>经典 <code>nodeJS</code> 规范。</li></ul></li></ol><h2 id="源码目录结构"><a href="#源码目录结构" class="headerlink" title="源码目录结构"></a>源码目录结构</h2><p>通过目录结构的阅读，对源码有一个大致的了解，知道哪些东西需要去哪看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├── benchmarks                  性能、基准测试</span><br><span class="line">├── dist                        构建打包的输出目录</span><br><span class="line">├── examples                    案例目录</span><br><span class="line">├── flow                        flow 语法的类型声明</span><br><span class="line">├── packages                    一些额外的包，比如：负责服务端渲染的包 vue-server-renderer、配合 vue-loader 使用的的 vue-template-compiler，还有 weex 相关的</span><br><span class="line">│   ├── vue-server-renderer</span><br><span class="line">│   ├── vue-template-compiler</span><br><span class="line">│   ├── weex-template-compiler</span><br><span class="line">│   └── weex-vue-framework</span><br><span class="line">├── scripts                     所有的配置文件的存放位置，比如 rollup 的配置文件</span><br><span class="line">├── src                         vue 源码目录</span><br><span class="line">│   ├── compiler                编译器</span><br><span class="line">│   ├── core                    运行时的核心包</span><br><span class="line">│   │   ├── components          全局组件，比如 keep-alive</span><br><span class="line">│   │   ├── config.js           一些默认配置项</span><br><span class="line">│   │   ├── global-api          全局 API，比如熟悉的：Vue.use()、Vue.component() 等</span><br><span class="line">│   │   ├── instance            Vue 实例相关的，比如 Vue 构造函数就在这个目录下</span><br><span class="line">│   │   ├── observer            响应式原理</span><br><span class="line">│   │   ├── util                工具方法</span><br><span class="line">│   │   └── vdom                虚拟 DOM 相关，比如熟悉的 patch 算法就在这儿</span><br><span class="line">│   ├── platforms               平台相关的编译器代码</span><br><span class="line">│   │   ├── web</span><br><span class="line">│   │   └── weex</span><br><span class="line">│   ├── server                  服务端渲染相关</span><br><span class="line">├── test                        测试目录</span><br><span class="line">├── types                       TS 类型声明</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Source-Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化</title>
      <link href="/2022/12/03/JS/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2022/12/03/JS/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h1><h2 id="模块化解决了什么问题？"><a href="#模块化解决了什么问题？" class="headerlink" title="模块化解决了什么问题？"></a>模块化解决了什么问题？</h2><p>在软件工程的设计原则中，有一个原则叫“单一职责”</p><p>“单一职责” 的目的就是减少功能维护带来的风险，把代码块的职责单一化，让代码的可维护性更高。</p><p>一个完整业务的内部实现，不应该把各种代码都耦合在一起，而应该按照职责去划分好代码块，再进行组合，形成一个 “高内聚，低耦合” 的工程设计。</p><p>模块化就是由此而来，在前端工程里，每个单一职责的代码块，就叫做模块（ Module ） ，模块有自己的作用域，功能与业务解耦，非常方便复用和移植。</p><h2 id="实现模块化的方式"><a href="#实现模块化的方式" class="headerlink" title="实现模块化的方式"></a>实现模块化的方式</h2><ul><li>CommonJS</li><li>ES Module</li><li>UMD</li><li>AMD</li></ul><p>如今基本都是 ESM 和 CJS 的天下。</p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>CJS 使用 <code>module.exports</code> 语法导出模块，可以导出任意合法的 JavaScript 类型，例如：字符串、布尔值、对象、数组、函数等等。</p><p>使用 <code>require</code> 导入模块，在导入的时候，当文件扩展名是 <code>.js</code> 时，可以只写文件名，而此时使用的是 <code>.cjs</code> 扩展名，所以需要完整的书写。</p><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 导出 */</span></span><br><span class="line">modules.<span class="property">exports</span> = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 导入 */</span></span><br><span class="line"><span class="keyword">const</span> h = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h)</span><br></pre></td></tr></table></figure><h3 id="命名导出（对象）"><a href="#命名导出（对象）" class="headerlink" title="命名导出（对象）"></a>命名导出（对象）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 导出 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;Akira&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; foo, bar &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 导入*/</span></span><br><span class="line"><span class="keyword">const</span> h = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br><span class="line"><span class="comment">/** 导入通过对象解构 更改命名 */</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">newFoo</span>: foo, <span class="attr">newBar</span>: bar &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h) <span class="comment">// &#123; foo: [Function: foo], bar: &#x27;Akira&#x27; &#125;</span></span><br><span class="line">h.<span class="title function_">foo</span>() <span class="comment">// hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h.<span class="property">bar</span>) <span class="comment">// Akira</span></span><br></pre></td></tr></table></figure><h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p>ES Module 是新一代的模块化标准，它是在 ES6（ ECMAScript 2015 ）版本推出的，是原生 JavaScript 的一部分。</p><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><p>ESM 使用 <code>export default</code> （默认导出）和 <code>export</code> （命名导出）这两个语法导出模块，和 CJS 一样， ESM 也可以导出任意合法的 JavaScript 类型，例如：字符串、布尔值、对象、数组、函数等等。</p><p>使用 <code>import ... from ...</code> 导入模块，在导入的时候，如果文件扩展名是 <code>.js</code> 则可以省略文件名后缀，否则需要把扩展名也完整写出来。</p><h3 id="默认导出-1"><a href="#默认导出-1" class="headerlink" title="默认导出"></a>默认导出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 导出1 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 导出2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;Akira&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; foo, bar &#125; <span class="comment">// 虽然默认导出对象，但不能直接通过解构获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 导入1 */</span></span><br><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 导出2 */</span></span><br><span class="line"><span class="keyword">import</span> h <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="命名导出"><a href="#命名导出" class="headerlink" title="命名导出"></a>命名导出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 导出 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar = <span class="string">&#x27;Akira</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/** 导入 */</span></span><br><span class="line"><span class="string">import &#123; foo, bar &#125; from &#x27;</span>./<span class="variable language_">module</span>.<span class="property">js</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">/** 命名导入 */</span></span><br><span class="line"><span class="string">import * as h from &#x27;</span>./<span class="variable language_">module</span>.<span class="property">js</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">import &#123; foo as newFoo, bar as newB &#125; from &#x27;</span>./<span class="variable language_">module</span>.<span class="property">js</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>element-plus 表单自定义验证</title>
      <link href="/2022/11/16/bugRoad/element-plus%20%E8%A1%A8%E5%8D%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81/"/>
      <url>/2022/11/16/bugRoad/element-plus%20%E8%A1%A8%E5%8D%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="element-plus-表单自定义验证"><a href="#element-plus-表单自定义验证" class="headerlink" title="element-plus 表单自定义验证"></a>element-plus 表单自定义验证</h1><p>类似我们需要验证只由 <code>数字和英文字母组成</code> 的表单：</p><h2 id="validator"><a href="#validator" class="headerlink" title="validator"></a>validator</h2><p>要验证英文和数字的组合类型，可以使用 Element Plus 表单验证中的自定义验证函数来实现。自定义验证函数可以接收一个参数，即当前验证字段的值，然后根据需求进行验证并返回一个布尔值表示验证结果。</p><p>以下是一个示例，演示如何验证英文和数字的组合类型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;英文+数字&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;alphanumeric&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.alphanumeric&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">alphanumeric</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">alphanumeric</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入英文和数字的组合类型&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">validator</span>: <span class="variable language_">this</span>.<span class="property">validateAlphanumeric</span>, <span class="attr">message</span>: <span class="string">&quot;请输入英文和数字的组合类型&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">validateAlphanumeric</span>(<span class="params">rule, value, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> alphanumericRegex = <span class="regexp">/^[a-zA-Z0-9]+$/</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (value &amp;&amp; !alphanumericRegex.<span class="title function_">test</span>(value)) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请输入英文和数字的组合类型&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">callback</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单验证通过</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;验证通过&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单验证失败</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;验证失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，定义了一个自定义验证函数 <code>validateAlphanumeric</code>，用于验证英文和数字的组合类型。在验证函数中，使用了一个正则表达式 <code>/^[a-zA-Z0-9]+$/</code> 来匹配英文和数字的组合类型，如果验证失败则返回一个错误信息，否则返回空。</p><p>在表单验证规则中，使用了 <code>validator</code> 属性来指定自定义验证函数，并将验证失败时的错误信息设置为“请输入英文和数字的组合类型”。</p><p>需要注意的是，这个示例中的正则表达式只能验证英文和数字的组合类型，如果需要验证其他类型的组合，需要根据实际情况进行调整。同时，也可以根据需求在自定义验证函数中添加其他的验证逻辑，例如最小长度、最大长度等等。</p><h2 id="pattern"><a href="#pattern" class="headerlink" title="pattern"></a>pattern</h2><p>除了使用自定义验证函数之外，还可以使用正则表达式来验证英文和数字的组合类型。使用正则表达式可以更加灵活地控制验证规则，但需要熟悉正则表达式的语法和用法。</p><p>以下是一个示例，演示如何使用正则表达式来验证英文和数字的组合类型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;英文+数字&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;alphanumeric&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.alphanumeric&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">alphanumeric</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">alphanumeric</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入英文和数字的组合类型&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">pattern</span>: <span class="regexp">/^[a-zA-Z0-9]+$/</span>, <span class="attr">message</span>: <span class="string">&quot;请输入英文和数字的组合类型&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">submitForm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单验证通过</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;验证通过&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单验证失败</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;验证失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，使用了正则表达式 <code>/^[a-zA-Z0-9]+$/</code> 来验证英文和数字的组合类型。在表单验证规则中，使用了 <code>pattern</code> 属性来指定正则表达式，并将验证失败时的错误信息设置为“请输入英文和数字的组合类型”。</p><p>需要注意的是，正则表达式中的 <code>/^</code> 表示匹配字符串的开头，<code>[a-zA-Z0-9]</code> 表示匹配英文和数字，<code>+</code> 表示匹配前面的字符至少一次，<code>$</code> 表示匹配字符串的结尾。因此，这个正则表达式可以确保输入的字符串仅包含英文和数字，并且不为空。</p><p>使用正则表达式的优点是可以更加灵活地控制验证规则，可以根据实际情况进行调整。但需要注意正则表达式的语法和用法，避免出现错误。</p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> element-plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FormValidator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量任务拆分</title>
      <link href="/2022/11/06/JS/%E6%89%B9%E9%87%8F%E4%BB%BB%E5%8A%A1%E6%8B%86%E5%88%86/"/>
      <url>/2022/11/06/JS/%E6%89%B9%E9%87%8F%E4%BB%BB%E5%8A%A1%E6%8B%86%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="批量任务拆分"><a href="#批量任务拆分" class="headerlink" title="批量任务拆分"></a>批量任务拆分</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Akira</span></span><br><span class="line"><span class="comment"> * @Date: 2023-05-08 13:56:25</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2023-05-08 15:03:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/** id 生成器 */</span></span><br><span class="line"><span class="keyword">const</span> genId = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ++id;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * id 缓存</span></span><br><span class="line"><span class="comment"> * key: _requestIdleCallback 返回 id</span></span><br><span class="line"><span class="comment"> * value: requestAnimationFrame 返回 id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">idMap</span>: &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟 requestIdleCallback</span></span><br><span class="line"><span class="comment"> * 主要利用 requestAnimationFrame、web workers(MessageChannel)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">cb</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">options</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">_requestIdleCallback</span>: <span class="function">(<span class="params">cb: (idleDeadline: IdleDeadline) =&gt; <span class="built_in">void</span>, options?: &#123; timeout: <span class="built_in">number</span> &#125;</span>) =&gt;</span> <span class="built_in">number</span> = <span class="keyword">function</span> (<span class="params">cb, options</span>) &#123;</span><br><span class="line">  <span class="comment">/** 新建通道 */</span></span><br><span class="line">  <span class="keyword">const</span> &#123; port1, port2 &#125; = <span class="keyword">new</span> <span class="title class_">MessageChannel</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 超时时间 */</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">deadlineTime</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">/** 当前帧的截止时间 */</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">frameDeadlineTime</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">/** requestIdleCallback 执行回调 */</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">callback</span>: <span class="function">(<span class="params">idleDeadline: IdleDeadline</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 生成 id */</span></span><br><span class="line">  <span class="keyword">const</span> id = <span class="title function_">genId</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** port2 进程 onmessage 监听 */</span></span><br><span class="line">  port2.<span class="property">onmessage</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="regexp">/n** 获取当前帧剩余时间 */</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">frameTimeRemaining</span> = (<span class="params"></span>) =&gt; frameDeadlineTime - performance.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">/** 是否超时 */</span></span><br><span class="line">    <span class="keyword">const</span> didTimeout = performance.<span class="title function_">now</span>() &gt;= deadlineTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (didTimeout || <span class="title function_">frameTimeRemaining</span>() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">/** 有空闲时间 */</span></span><br><span class="line">      <span class="keyword">const</span> idleDeadline = &#123;</span><br><span class="line">        <span class="attr">timeRemaining</span>: frameTimeRemaining,</span><br><span class="line">        didTimeout,</span><br><span class="line">      &#125;;</span><br><span class="line">      callback &amp;&amp; <span class="title function_">callback</span>(idleDeadline);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">/** 帧剩余时间不足,放到下一帧 */</span></span><br><span class="line">      idMap[id] = <span class="title function_">requestAnimationFrame</span>(<span class="function">(<span class="params">timeStamp</span>) =&gt;</span> &#123;</span><br><span class="line">        frameDeadlineTime = timeStamp + <span class="number">16.7</span>;</span><br><span class="line">        port1.<span class="title function_">postMessage</span>(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**  timeStamp 默认参数 当前帧时间戳 */</span></span><br><span class="line">  idMap[id] = <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">(<span class="params">timeStamp</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/** 总帧长 */</span></span><br><span class="line">    frameDeadlineTime = timeStamp + <span class="number">16.7</span>;</span><br><span class="line">    <span class="comment">/** 超时时间 */</span></span><br><span class="line">    deadlineTime = options?.<span class="property">timeout</span> ? timeStamp + options.<span class="property">timeout</span> : <span class="title class_">Infinity</span>;</span><br><span class="line">    callback = cb;</span><br><span class="line">    <span class="comment">/** 通知 port2 执行 onmessage 回调 */</span></span><br><span class="line">    port1.<span class="title function_">postMessage</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 取消预渲染回调执行 */</span></span><br><span class="line"><span class="keyword">const</span> _cancelIdleCallback = <span class="keyword">function</span> (<span class="params">id: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!idMap[id]) <span class="keyword">return</span>;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">cancelAnimationFrame</span>(idMap[id]);</span><br><span class="line">  <span class="keyword">delete</span> idMap[id];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestIdleCallback = <span class="variable language_">window</span>.<span class="property">requestIdleCallback</span> || _requestIdleCallback;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> cancelIdleCallback = <span class="variable language_">window</span>.<span class="property">cancelIdleCallback</span> || _cancelIdleCallback;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s/ohPLuv3C0diBwp4cTWqsHw">批量任务导致页面卡死？怎么办？任务拆分？</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback#%E8%AF%AD%E6%B3%95">requestIdleCallback</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame#%E8%A7%84%E8%8C%83">Window：requestAnimationFrame()</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MessageChannel">MessageChannel</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端工程化</title>
      <link href="/2022/10/13/JS/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>/2022/10/13/JS/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h1><h2 id="传统开发的弊端"><a href="#传统开发的弊端" class="headerlink" title="传统开发的弊端"></a>传统开发的弊端</h2><p>在传统的开发模式下，所需要的 JavaScript 代码时通过 script 标签引入的。虽然可以将代码分成多个文件多个模块来维护，进而降低代码维护的成本，但实际开发中，会存在一些问题：</p><ol><li>可能存在同名的变量声明，引起变量冲突</li><li>引入多个资源文件时，比如有多个 JS 文件，在其中一个 JS 文件里面使用了在别处声明的变量，无法快速找到是在哪里声明的，大型项目难以维护</li><li>类似第 1 、 2 点提到的问题无法轻松预先感知，很依赖开发人员人工定位原因</li><li>大部分代码缺乏分割，比如一个工具函数库，很多时候需要整包引入到 HTML 里，文件很大，然而实际上只需要用到其中一两个方法</li><li>由第 4 点大文件延伸出的问题， <code>script</code> 的加载从上到下，容易阻塞页面渲染</li><li>不同页面的资源引用都需要手动管理，容易造成依赖混乱，难以维护</li><li>如果要压缩 CSS 、混淆 JS 代码，也是要人力操作使用工具去一个个处理后替换，容易出错</li></ol><p>当然，实际上还会有更多的问题会遇到。</p><h2 id="工程化带来的优势"><a href="#工程化带来的优势" class="headerlink" title="工程化带来的优势"></a>工程化带来的优势</h2><p>为了解决传统开发的弊端，前端也开始引入工程化开发的概念，借助工具来解决人工层面的烦琐事情。</p><h3 id="开发层面的优势"><a href="#开发层面的优势" class="headerlink" title="开发层面的优势"></a>开发层面的优势</h3><p>在开发层面，前端工程化有以下这些好处：</p><ol><li>引入了模块化和包的概念，作用域隔离，解决了代码冲突的问题</li><li>按需导出和导入机制，让编码过程更容易定位问题</li><li>自动化的代码检测流程，有问题的代码在开发过程中就可以被发现</li><li>编译打包机制可以让使用开发效率更高的编码方式，比如 Vue 组件、 CSS 的各种预处理器</li><li>引入了代码兼容处理的方案（ e.g. Babel ），可以让自由使用更先进的 JavaScript 语句，而无需顾忌浏览器兼容性，因为最终会帮转换为浏览器兼容的实现版本</li><li>引入了 Tree Shaking 机制，清理没有用到的代码，减少项目构建后的体积</li></ol><h3 id="团队协作的优势"><a href="#团队协作的优势" class="headerlink" title="团队协作的优势"></a>团队协作的优势</h3><p>除了对开发者有更好的开发体验和效率提升，对于团队协作，前端工程化也带来了更多的便利，例如下面这些场景：</p><ol><li>统一的项目结构</li><li>统一的代码风格</li><li>可复用的模块和组件</li><li>代码健壮性保障 ( TS )</li><li>团队开发效率高</li></ol><h3 id="求职竞争上的优势"><a href="#求职竞争上的优势" class="headerlink" title="求职竞争上的优势"></a>求职竞争上的优势</h3><p>近几年前端开发领域的相关岗位，都会在招聘详情里出现类似的描述：</p><blockquote><p>熟悉 Vue &#x2F; React 等主流框架，对前端组件化和模块化有深入的理解和实践<br>熟悉面向组件的开发模式，熟悉 Webpack &#x2F; Vite 等构建工具<br>熟练掌握微信小程序开发，熟悉 Taro 框架或 uni-app 框架优先<br>熟悉 Scss &#x2F; Less &#x2F; Stylus 等预处理器的使用<br>熟练掌握 TypeScript 者优先<br>有良好的代码风格，结构设计与程序架构者优先<br>了解或熟悉后端开发者优先（如 Java &#x2F; Go &#x2F; Node.js ）</p></blockquote><p>知名企业对 1-3 年工作经验的初中级工程师，更是明确要求具备前端工程化开发的能力：</p><p><img src="https://s2.loli.net/2023/03/10/xvZJHSXhYmUrsR5.png" alt="知名企业对 1-3 年经验的前端工程师招聘要求"></p><h2 id="现代化的开发概念"><a href="#现代化的开发概念" class="headerlink" title="现代化的开发概念"></a>现代化的开发概念</h2><h3 id="MPA-与-SPA"><a href="#MPA-与-SPA" class="headerlink" title="MPA 与 SPA"></a>MPA 与 SPA</h3><h4 id="多页面应用"><a href="#多页面应用" class="headerlink" title="多页面应用"></a>多页面应用</h4><p>MPA 多页面应用是最传统的网站体验，当一个网站有多个页面时，会对应有多个实际存在的 HTML 文件，访问每一个页面都需要经历一次完整的页面请求过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统的页面跳转过程</span></span><br><span class="line"></span><br><span class="line">从用户点击跳转开始：</span><br><span class="line">---&gt; 浏览器打开新的页面</span><br><span class="line">---&gt; 请求【所有】资源</span><br><span class="line">---&gt; 加载 HTML 、CSS 、 JS 、 图片等资源</span><br><span class="line">---&gt; 完成新页面的渲染</span><br></pre></td></tr></table></figure><h5 id="MPA-的优点"><a href="#MPA-的优点" class="headerlink" title="MPA 的优点"></a>MPA 的优点</h5><ul><li>首屏加载速度快</li><li>SEO 友好</li><li>容易与服务端语言结合</li></ul><h5 id="MPA-的缺点"><a href="#MPA-的缺点" class="headerlink" title="MPA 的缺点"></a>MPA 的缺点</h5><ul><li>页面之间的跳转访问速度慢</li><li>用户体验不够友好</li><li>开发成本高</li></ul><h3 id="CSR-与-SSR"><a href="#CSR-与-SSR" class="headerlink" title="CSR 与 SSR"></a>CSR 与 SSR</h3><h4 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h4><p>这是一种利用 <code>AJAX</code> 技术，把渲染工作从服务端转移到客户端完成，不仅客户端的用户体验更好，前后端分离的开发模式更加高效。</p><h4 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h4><p>和传统的 <code>MPA</code> 使用 <code>PHP / JSP</code> 等技术栈做服务端渲染不同，现代前端工程化里的 <code>SSR</code> 通常是指使用 <code>Node.js</code> 作为服务端技术栈。</p><p>SSR 技术利用的同构渲染方案（ Isomorphic Rendering ），指的是一套代码不仅可以在客户端运行，也可以在服务端运行，在一些合适的时机先由服务端完成渲染（ Server-Side Rendering ）再直出给客户端激活（ Client-Side Hydration ），这种开发模式带来了：</p><ul><li>更好的 SEO 支持，解决了 SPA 单页面应用的痛点</li><li>更快的首屏加载速度，保持了 MPA 多页面应用的优点</li><li>和 SPA 一样支持前后端分离，开发效率依然很高</li><li>有更好的客户端体验，当用户完全打开页面后，本地访问过程中也可以保持 SPA 单页面应用的体验</li><li>统一的心智模型，由于支持同构，因此没有额外的心智负担</li></ul><h2 id="工程化不至于前端"><a href="#工程化不至于前端" class="headerlink" title="工程化不至于前端"></a>工程化不至于前端</h2><p>随着前端工程化的发展，前端不至于写前端，已经有很多前端工程师利用前端工程化带来的优势，不仅仅只是做一个 Web 前端，开始逐步发展为一个全栈工程师，在企业内部承担起了更多的岗位职责，包括作者笔者也是。</p><p>之所以能做这么多事情，得益于 Node.js 在前端开发带来的翻天覆地的变化，可以在保持原有的 JavaScript 和 TypeScript 基础上，几乎没有过多的学习成本就可以过度到其他端的开发。</p><h3 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h3><p><code>express -&gt; koa -&gt; nest -&gt; egg</code></p><h3 id="桌面程序开发"><a href="#桌面程序开发" class="headerlink" title="桌面程序开发"></a>桌面程序开发</h3><p>Electron 的底层是基于 Chromium 和 Node.js ，它提供了两个进程供开发者使用：</p><ol><li>主进程：它是整个应用的入口点，主进程运行在 Node 环境中，可以使用所有的 Node API ，程序也因此具备了和系统进行交互的能力，例如文件的读写操作。</li><li>渲染进程：负责与用户交互的 GUI 界面，基于 Chromium 运行，所以开发者得以使用 HTML &#x2F; CSS &#x2F; JavaScript 像编写网页一样来编写程序的 GUI 界面。</li></ol><p>一个程序应用只会有一个主进程，而渲染进程则可以根据实际需求创建多个，渲染进程如果需要和系统交互，则必须与主进程通信，借助主进程的能力来实现。</p><p>在构建的时候， Electron 会把 Node 和 Chromium 一起打包为一个诸如 <code>.exe</code> 这样的安装文件（或者是包含了两者的免安装版本），这样用户不需要 Node 环境也可以运行桌面程序。</p><h3 id="应用脚本开发"><a href="#应用脚本开发" class="headerlink" title="应用脚本开发"></a>应用脚本开发</h3><p><code>pkg</code></p><p>将 <code>node</code> 项目打包成 <code>exe</code> 可执行文件</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://vue3.chengpeiquan.com/engineering.html">Vue3 入门指南与实战案例 - 了解前端工程化</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>reactive 二次赋值导致响应式丢失</title>
      <link href="/2022/10/12/bugRoad/reactive%20%E4%BA%8C%E6%AC%A1%E8%B5%8B%E5%80%BC%E5%AF%BC%E8%87%B4%E5%93%8D%E5%BA%94%E5%BC%8F%E4%B8%A2%E5%A4%B1/"/>
      <url>/2022/10/12/bugRoad/reactive%20%E4%BA%8C%E6%AC%A1%E8%B5%8B%E5%80%BC%E5%AF%BC%E8%87%B4%E5%93%8D%E5%BA%94%E5%BC%8F%E4%B8%A2%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="reactive-二次赋值导致响应式丢失"><a href="#reactive-二次赋值导致响应式丢失" class="headerlink" title="reactive 二次赋值导致响应式丢失"></a>reactive 二次赋值导致响应式丢失</h1><h2 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> h = <span class="title function_">reactive</span>(&#123; <span class="attr">m</span>: <span class="number">1</span> &#125;);</span><br><span class="line">h = &#123; <span class="attr">m</span>: <span class="number">2</span> &#125;; <span class="comment">// 响应式丢失</span></span><br></pre></td></tr></table></figure><p><code>javascript</code> 中所有数据类型都是通过 <code>值传递</code> 的。</p><p>当然引用数据类型也不例外，那既然是按值传递，为什么会出现响应式丢失的问题呢?</p><p>原因很简单，h 的值实际上是 <code>&#123; m: 1 &#125;</code> 的地址。然后再次赋值，会导致 h 的值，也就是地址发生变化，从而指向普通的对象上，自然失去了响应式。</p><h2 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> h = <span class="title function_">reactive</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">m</span>: &#123; <span class="attr">n</span>: <span class="number">1</span> &#125; &#125;);</span><br><span class="line"><span class="keyword">const</span> h2 = <span class="title function_">reactive</span>(&#123; ...h &#125;);</span><br><span class="line">h2.<span class="property">a</span> = <span class="number">2</span>;</span><br><span class="line">h2.<span class="property">m</span>.<span class="property">n</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h.<span class="property">a</span>, h2.<span class="property">a</span>); <span class="comment">// 1 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h.<span class="property">m</span>.<span class="property">n</span>, h2.<span class="property">m</span>.<span class="property">n</span>); <span class="comment">// 2 2</span></span><br></pre></td></tr></table></figure><blockquote><p>通常存在的误区：通过解构对象得到的数据，可以作为深拷贝的一种形式？！</p></blockquote><p>对于基本数据类型确实是可以的，但是对于引用数据类型则不然。值仍然是以地址的形式存在。因此在修改的时候，实际上还是会也影响到源数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前端这块儿，对于引用数据类型要万分小心。特别是类似对于表单操作时，表单中存在引用数据类型的属性，在重置的时候不能单单的只将最外层重置。</p><p>或者使用 <code>lodash</code> 中封装的深拷贝，在使用的时候就进行深度拷贝，以不影响源数据。</p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reactive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Antd-Select-custom</title>
      <link href="/2022/10/08/React/antd-select/"/>
      <url>/2022/10/08/React/antd-select/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>选择下拉框 -&gt; 补全选项后的条件 -&gt; 生成 tag。</p><p>手动控制 open，选择后关闭下拉。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; message, <span class="title class_">Select</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OPTIONS</span> = [<span class="string">&quot;Apples&quot;</span>, <span class="string">&quot;Nails&quot;</span>, <span class="string">&quot;Bananas&quot;</span>, <span class="string">&quot;Helicopters&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ToolMgt</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/** 已选项 */</span></span><br><span class="line">  <span class="keyword">const</span> [selectedItems, setSelectedItems] = useState&lt;<span class="built_in">string</span>[]&gt;([]);</span><br><span class="line">  <span class="comment">/** 输入框 value */</span></span><br><span class="line">  <span class="keyword">const</span> [searchValue, setSearchValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [open, setOpen] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selectKeys = [...<span class="keyword">new</span> <span class="title class_">Set</span>(selectedItems.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]))];</span><br><span class="line">  <span class="comment">/** 下拉框 list - 剔除已选 */</span></span><br><span class="line">  <span class="keyword">const</span> filteredOptions = <span class="variable constant_">OPTIONS</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">o</span>) =&gt;</span> !selectKeys.<span class="title function_">includes</span>(o)).<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">value</span>: item,</span><br><span class="line">    <span class="attr">label</span>: item,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSearch</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="title function_">setSearchValue</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSelect</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="title function_">setSearchValue</span>(value + <span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="title function_">setOpen</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleEnter</span>(<span class="params">e: React.KeyboardEvent&lt;HTMLDivElement&gt;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">key</span> !== <span class="string">&quot;Enter&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/** 不包含&#x27;:&#x27; 属于未选择或选择后删除&#x27;:&#x27; 属于意外终止 enter */</span></span><br><span class="line">    <span class="keyword">if</span> (!searchValue.<span class="title function_">includes</span>(<span class="string">&quot;:&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">/** 校验 */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">verifySearch</span>(searchValue, <span class="variable constant_">OPTIONS</span>)) &#123;</span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&quot;规则不符合&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setSelectedItems</span>([...selectedItems, searchValue]);</span><br><span class="line">    <span class="title function_">setSearchValue</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleDeselect</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="title function_">setSelectedItems</span>(selectedItems.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item != value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 输入校验 */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">verifySearch</span>(<span class="params">searchValue: <span class="built_in">string</span>, initOptions: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">    <span class="comment">/** 分割连接符 */</span></span><br><span class="line">    <span class="keyword">const</span> searchValueArr = searchValue.<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> isInclude = initOptions.<span class="title function_">includes</span>(searchValueArr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (searchValueArr.<span class="property">length</span> != <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (searchValueArr[<span class="number">1</span>] == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!isInclude) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;searchValue&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">open</span>=<span class="string">&#123;open</span> &amp;&amp; !<span class="attr">searchValue.includes</span>(&quot;<span class="attr">:</span>&quot;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">mode</span>=<span class="string">&quot;multiple&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;Inserted are removed&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;selectedItems&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">searchValue</span>=<span class="string">&#123;searchValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">autoClearSearchValue</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &quot;<span class="attr">50</span>%&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">options</span>=<span class="string">&#123;filteredOptions&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onDeselect</span>=<span class="string">&#123;handleDeselect&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSearch</span>=<span class="string">&#123;handleSearch&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onSelect</span>=<span class="string">&#123;handleSelect&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onKeyDown</span>=<span class="string">&#123;handleEnter&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onDropdownVisibleChange</span>=<span class="string">&#123;(visible)</span> =&gt;</span> setOpen(visible)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ToolMgt</span>;</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://s2.loli.net/2023/10/09/yJIkWMdV5pALquE.gif" alt="636769ef-6dc9-4de0-ae08-eed996543325.gif"></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>map 转换成对象数组</title>
      <link href="/2022/10/02/bugRoad/map%20%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/"/>
      <url>/2022/10/02/bugRoad/map%20%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="map-转换成对象数组"><a href="#map-转换成对象数组" class="headerlink" title="map 转换成对象数组"></a>map 转换成对象数组</h1><h2 id="🤔-发现问题"><a href="#🤔-发现问题" class="headerlink" title="🤔 发现问题"></a>🤔 发现问题</h2><p><code>map =&gt; key-value</code></p><p>通常使用到的 <code>Array.from</code> 转换，会得到<code>[[key, value],....]</code></p><h2 id="🙅‍♂️-拒绝妥协，坚持解决"><a href="#🙅‍♂️-拒绝妥协，坚持解决" class="headerlink" title="🙅‍♂️ 拒绝妥协，坚持解决"></a>🙅‍♂️ 拒绝妥协，坚持解决</h2><blockquote><p><code>Array.from</code> 有一个回调函数，可以进一步把控数据的流向以及类型。</p></blockquote><p><code>Array.from(map, ([key, value]) =&gt; (&#123; key, value &#125;));</code></p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> JS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VueRouter 传递 state 参数无效</title>
      <link href="/2022/09/20/bugRoad/VueRouter%20%E4%BC%A0%E9%80%92%20state%20%E5%8F%82%E6%95%B0%E6%97%A0%E6%95%88/"/>
      <url>/2022/09/20/bugRoad/VueRouter%20%E4%BC%A0%E9%80%92%20state%20%E5%8F%82%E6%95%B0%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="VueRouter-传递-state-参数无效"><a href="#VueRouter-传递-state-参数无效" class="headerlink" title="VueRouter 传递 state 参数无效"></a>VueRouter 传递 state 参数无效</h1><h2 id="什么是-state-？"><a href="#什么是-state-？" class="headerlink" title="什么是 state ？"></a>什么是 state ？</h2><p>在浏览器中，<code>history.state</code> 是 <code>history</code> 对象的一个属性，用于访问历史记录中当前页面的状态对象。当使用浏览器的前进或后退按钮时，可以通过 <code>history.state</code> 获取前一个页面或后一个页面的状态对象，从而实现前端页面之间状态的传递和管理。</p><p>自从 <code>Vue3</code> 中的 <code>VueRouter</code> 中将 <code>params</code> 大削弱。<code>state</code> 便走上了饭桌。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line">router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="attr">state</span>: &#123; <span class="attr">user</span>: &#123;...&#125; &#125; &#125;)</span><br><span class="line"></span><br><span class="line">history.<span class="property">state</span>.<span class="property">user</span> /</span><br></pre></td></tr></table></figure><h2 id="为什么会无效？"><a href="#为什么会无效？" class="headerlink" title="为什么会无效？"></a>为什么会无效？</h2><p><code>报错：Error with push/replace State DOMException: Failed to execute &#39;pushState&#39; on &#39;History&#39;: &lt;Object&gt; could not be cloned.</code></p><p>通常是传递的数据是 响应式数据 造成的，也就是 <code>proxy</code> 类型。</p><p>通过 <code>toRaw</code> 还原即可。</p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VueRouter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础</title>
      <link href="/2022/08/13/React/React/"/>
      <url>/2022/08/13/React/React/</url>
      
        <content type="html"><![CDATA[<h1 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h1><h2 id="重要的三个钩子"><a href="#重要的三个钩子" class="headerlink" title="重要的三个钩子"></a>重要的三个钩子</h2><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>执行 1+n 次。</p><p>每一次 setState 都会 render。</p><p>无论是挂载还是更新阶段，在<code>render</code>之前的生命周期函数都不会更新<code>this.state</code>和<code>props</code>，直到<code>render</code>执行完成后，数据才会更新。</p><p>render 之后是不能够再操作数据的，否则将进入死循环。</p><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><p><code>ReactDOM.unmountComponentAtNode()</code></p><h2 id="Mounting"><a href="#Mounting" class="headerlink" title="Mounting"></a>Mounting</h2><ul><li><code>constructor()</code></li><li><code>componentWillMount()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ul><h2 id="Updating"><a href="#Updating" class="headerlink" title="Updating"></a>Updating</h2><ul><li><code>componentWillReceiveProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>componentWillUpdate()</code></li><li><code>render()</code></li><li><code>componentDidUpdate()</code></li></ul><h2 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h2><ul><li><code>componentWillUnmount()</code></li></ul><h1 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h1><p>单向数据流</p><p>state -&gt; setState -&gt; render -&gt; view</p><h1 id="实例核心属性"><a href="#实例核心属性" class="headerlink" title="实例核心属性"></a>实例核心属性</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>state -&gt; setState()</p><p>setState 是异步的。</p><p>setState 是合并不是替换。可以通过定时器摆脱 react 的控制。</p><p>setState 若要依赖当前数据，可以通过函数式进行操作。</p><ul><li>setState((state) &#x3D;&gt; {})</li></ul><p>setState 生命周期：</p><ul><li><p>getDerivedStateFromProps</p></li><li><p>shouldComponentUpdate，根据返回值判断是否要继续更新。</p></li><li><p>render，执行真正的更新。</p></li><li><p>getSnapshotBeforeUpdate</p></li><li><p>componentDidUpdate</p></li></ul><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>function(props){}</p><p>class cc extends React.Component {</p><p>  this.props;</p><p>  constructor(props){</p><p>    this.props &#x3D; props;</p><p>  }</p><p>}</p><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><h3 id="字符串形式"><a href="#字符串形式" class="headerlink" title="字符串形式"></a>字符串形式</h3><p>class Demo extends React.Component {</p><p>  const {input} &#x3D; this.refs;</p><p>  render() {</p><p>    return (</p><p>      &lt;&gt;</p><p>        &lt;input ref&#x3D;{input}&gt;</p><p>      &lt;&#x2F;&gt;</p><p>    )</p><p>  }</p><p>}</p><h3 id="回调形式"><a href="#回调形式" class="headerlink" title="回调形式"></a>回调形式</h3><h4 id="内联形式"><a href="#内联形式" class="headerlink" title="内联形式"></a>内联形式</h4><p>内联形式，ref 回调回执行两次，第一次传递 null 第二次传递 DOM</p><p>&lt;input ref&#x3D;{(c) &#x3D;&gt; {this.input &#x3D; c}&gt;</p><h4 id="非内联形式"><a href="#非内联形式" class="headerlink" title="非内联形式"></a>非内联形式</h4><p>class demo extends React.Component {</p><p>  handle(c){</p><p>    this.input &#x3D; c;</p><p>  }</p><p>  return (</p><p>    &lt;&gt;</p><p>      &lt;input ref&#x3D;{this.handle}&gt;</p><p>    &lt;&#x2F;&gt;</p><p>  )</p><p>}</p><blockquote><p>如果 <code>ref</code> 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 <code>null</code>，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 <code>ref</code> 并且设置新的。通过将 <code>ref</code> 的回调函数定义成 <code>class</code> 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。</p></blockquote><h3 id="createRef"><a href="#createRef" class="headerlink" title="createRef"></a>createRef</h3><p>class demo extends React.Component {</p><p>  input &#x3D; React.createRef();</p><p>  return (</p><p>    &lt;&gt;</p><p>      &lt;input ref&#x3D;{this.input}&gt;</p><p>    &lt;&#x2F;&gt;</p><p>  )</p><p>}</p><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><p>React.FC 适用</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>const [color, setColor] &#x3D; useState(“”)</p><p>触发 render</p><p>异步</p><p>useState -&gt; render -&gt; Effect</p><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>副作用。</p><p>useEffect(() &#x3D;&gt; {},[propsName])</p><p>监听 数据变化之后 进行执行回调函数。</p><p>不写参数，在每次 render 的时候执行回调。</p><p>render之后执行。</p><p>React采用异步调用的方式处理Effect，等主线程完成、DOM更新、js执行完成、试图绘制完成，才执行，所以effect回调函数不回阻塞浏览器绘制视图。</p><h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h3><p>DOM更新之后，浏览器绘制视图之前，且比Effect执行更早。</p><p>避免在Effect中操作DOM时导致二次绘制，出现闪现现象。</p><p>其回调执行会阻塞浏览器绘制。</p><h3 id="useInsertionEffect"><a href="#useInsertionEffect" class="headerlink" title="useInsertionEffect"></a>useInsertionEffect</h3><p>DOM更新之前，且比LayoutEffect执行更早。</p><p>解决 CSS-in-JS 在渲染中注入样式的性能问题。</p><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><ol><li>接收上下文。</li></ol><ul><li>create</li></ul><p>const MyContext &#x3D; React.createContext(defaultValue);</p><p>import {createContext} from “react”</p><p>const MyContext &#x3D; createContext(defaultValue);</p><ul><li>Provider</li></ul><p>&lt;MyContext.Provider value&#x3D;{}&gt;</p><ul><li>use</li></ul><p>const value &#x3D; this.context;</p><p>const value &#x3D; useContext(MyContext);</p><p>&lt;MyContext.Consumer&gt;<br> {value &#x3D;&gt; { }}<br>&lt;&#x2F;MyContext.Consumer&gt;</p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><ol><li>获取元素、缓存状态。</li></ol><p>const count &#x3D; useRef(0)</p><p>count.current &#x3D; count.current++;</p><ol start="2"><li>不触发 render</li></ol><p>connect DOM</p><p>const inputRef &#x3D; useRef(null);</p><p>&lt;input ref&#x3D;{inputRef}&#x2F;&gt;</p><p>inputRef.current.focus();</p><h1 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yarn add react-router-dom</code></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>&lt;Route exact&#x2F;&gt; exact 严格匹配模式，可能导致二级路由无法匹配</p><p>&lt;Link &#x2F;&gt;</p><p>&lt;BrowserRouter&gt;</BrowserRouter></p><p>&lt;NavLink&gt;</NavLink> 高亮</p><p>&lt;Switch&gt;</Switch> 高效路由匹配</p><p>&lt;Redirect to&#x3D;”&#x2F;about” &#x2F;&gt; 所有都无法匹配时重定向</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            About</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Home</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">history:</span><br><span class="line">  go: ƒ go(n)</span><br><span class="line">  goBack: ƒ goBack()</span><br><span class="line">  goForward: ƒ goForward()</span><br><span class="line">  push: ƒ push(path, state)</span><br><span class="line">  replace: ƒ replace(path, state)</span><br><span class="line"></span><br><span class="line">location:</span><br><span class="line">  pathname: &quot;/home/message/detail/2/hello&quot;</span><br><span class="line">  search: &quot;&quot;</span><br><span class="line">  state: undefined</span><br><span class="line"></span><br><span class="line">match:</span><br><span class="line">  params: &#123;&#125;</span><br><span class="line">  path: &quot;/home/message/detail/:id/:title&quot;</span><br><span class="line">  url: &quot;/home/message/detail/2/hello&quot;</span><br></pre></td></tr></table></figure><h2 id="多级路径刷新页面样式丢失"><a href="#多级路径刷新页面样式丢失" class="headerlink" title="多级路径刷新页面样式丢失"></a>多级路径刷新页面样式丢失</h2><p>相对路径会对照当前路由地址，因而会丢失样式。</p><ul><li><p>取消使用相对路径，使用 <code>/</code> 或者 <code>%PUBLIC_URL%</code></p></li><li><p>使用 HashRouter</p></li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>子路由需要加上父路由的<code>path</code></p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul><li><p>params</p><p><code>/home/message/detail/:age/:name</code></p><p><code>/home/message/detail/21/amos</code></p><p><code>useParams() -&gt; &#123;age: &#39;21&#39;, name: &#39;amos&#39;&#125;</code></p><p>需要配置</p></li><li><p>search</p><p><code>/home/message/detail?name=&quot;11&quot;</code></p><p><code>useQuery().get(&#39;name&#39;)</code></p></li><li><p>state</p><p><code>useHistory().push(&#39;/user/role/detail&#39;, &#123; id: item &#125;);</code></p><p><code>useLocation().state;</code></p></li></ul><h2 id="Hooks-1"><a href="#Hooks-1" class="headerlink" title="Hooks"></a>Hooks</h2><h3 id="useHistory"><a href="#useHistory" class="headerlink" title="useHistory"></a>useHistory</h3><ul><li><p>push</p></li><li><p>replace</p></li><li><p>go</p></li><li><p>goForward</p></li><li><p>goBack</p></li></ul><h3 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">useLocation</span>(<span class="params"></span>): <span class="title class_">Location</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Location</span> <span class="keyword">extends</span> <span class="title class_">Path</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="built_in">unknown</span>;</span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">Key</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>state</p></li><li><p>key</p></li></ul><h3 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> useParams&lt;K <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="built_in">string</span>&gt;(): <span class="title class_">Readonly</span>&lt;<span class="title class_">Params</span>&lt;K&gt;&gt;;</span><br></pre></td></tr></table></figure><ul><li>{}</li></ul><h3 id="useQuery"><a href="#useQuery" class="headerlink" title="useQuery"></a>useQuery</h3><ul><li>get</li></ul><h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p><img src="https://brucecai55520.gitee.io/my-notes/React/images/redux.png" alt="redux 工作流程图"></p><p><strong>reducer -&gt; createStore -&gt; store -&gt; getState、dispath、subscribe</strong></p><h2 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h2><ul><li><code>createStore(reducer: (preState:any; action:&#123;type: &#39;string&#39;; data: any&#125;)=&gt;&#123;&#125;)</code></li></ul><h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><ul><li><p><code>getState()</code></p></li><li><p><code>dispath(action: &#123;type: string; data: any;&#125;)</code></p></li><li><p><code>subscribe(func: function)</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>keep-alive 缓存滚动条</title>
      <link href="/2022/06/02/bugRoad/keep-alive%20%E7%BC%93%E5%AD%98%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
      <url>/2022/06/02/bugRoad/keep-alive%20%E7%BC%93%E5%AD%98%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="keep-alive-缓存滚动条"><a href="#keep-alive-缓存滚动条" class="headerlink" title="keep-alive 缓存滚动条"></a>keep-alive 缓存滚动条</h1><h2 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h2><p>通常是用来存储组件状态。</p><p>在 Vue3 中，可以使用 <code>keep-alive</code> 组件来缓存组件的状态和数据，从而实现在页面切换时保留数据的效果。</p><p><code>keep-alive</code> 组件可以将需要缓存的组件包裹起来，并提供一个 <code>include</code> 属性来指定哪些组件需要缓存。例如，如果需要缓存一个名为 <code>MyComponent</code> 的组件，可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// include 通常是组件的名称</span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;MyComponent&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，当 <code>MyComponent</code> 组件被切换出去时，其状态和数据将会被缓存起来，并在切换回来时自动恢复。如果需要缓存所有组件，可以将 <code>include</code> 属性设置为 <code>true</code>。</p><p>需要注意的是，<code>keep-alive</code> 组件只会缓存被包裹的组件的状态和数据，而不会缓存路由的状态和数据。如果需要缓存整个路由的状态和数据，可以考虑使用 <code>vuex</code> 来管理应用的状态。</p><blockquote><p>注意在 <code>Vue3</code> 中这种方式会 <code>warning</code>，需要通过 <code>v-slot</code> 的形式使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  // Component 是 router-view 自带的属性</span><br><span class="line">  &lt;router-view :include=&quot;[&#x27;MyComponent&#x27;]&quot; v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p><code>keep-alive</code> 组件除了 <code>include</code> 属性之外，还有一个对立的属性 <code>exclude</code>，可以用来指定不需要缓存的组件。</p><p><code>exclude</code> 属性接受一个字符串或一个数组作为参数，用来指定不需要缓存的组件名称。</p><h2 id="能否缓存滚动条呢？"><a href="#能否缓存滚动条呢？" class="headerlink" title="能否缓存滚动条呢？"></a>能否缓存滚动条呢？</h2><p><code>keep-alive</code> 组件是用来缓存组件的状态和数据的，它并不会缓存页面的滚动条位置。因此，在使用 <code>keep-alive</code> 缓存组件时，如果需要在切换路由时保持滚动条位置不变，需要手动记录和恢复滚动条位置。</p><p>一般来说，可以在组件的 <code>activated</code> 和 <code>deactivated</code> 钩子函数中记录和恢复滚动条位置。例如，在 <code>activated</code> 钩子函数中记录滚动条位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 记录滚动条位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$scrollPosition</span> = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>activated</code> 钩子函数中记录了滚动条位置，将其保存在组件的 <code>$scrollPosition</code> 属性中。</p><p>在 <code>deactivated</code> 钩子函数中恢复滚动条位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 恢复滚动条位置</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="variable language_">this</span>.<span class="property">$scrollPosition</span> || <span class="number">0</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>deactivated</code> 钩子函数中恢复了滚动条位置，将滚动条位置设置为组件的 <code>$scrollPosition</code> 属性保存的值。</p><p>需要注意的是，由于不同的浏览器可能会有不同的滚动条实现方式，因此在记录和恢复滚动条位置时需要考虑浏览器的兼容性。同时，需要在组件的 <code>beforeDestroy</code> 钩子函数中清理保存的滚动条位置，以避免对下次渲染产生影响。</p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scroll </tag>
            
            <tag> keep-alive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJS 打包</title>
      <link href="/2022/06/02/bugRoad/nodeJS%20%E6%89%93%E5%8C%85/"/>
      <url>/2022/06/02/bugRoad/nodeJS%20%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="nodeJS-打包"><a href="#nodeJS-打包" class="headerlink" title="nodeJS 打包"></a>nodeJS 打包</h1><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h2><p><code>npm i pkg -g</code></p><h2 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h2><p>(1) bin 指定启动文件</p><p>(2) script 配置命令</p><p>(3) <code>pkg .</code> 寻找指定目录下的<code>package.json</code>文件，然后在找<code>bin</code>字段作为入口文件</p><p>(4) <code>-t</code> 指定打包平台</p><p>(5) <code>-o</code> 指定输出文件名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...<span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./app.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pkg . -t node12-win-x64 -o server -d&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="打包后路径区别"><a href="#打包后路径区别" class="headerlink" title="打包后路径区别"></a>打包后路径区别</h2><p><img src="https://s2.loli.net/2023/04/01/odRy1kBJiPm4zGZ.png"></p><h2 id="node-环境下载慢"><a href="#node-环境下载慢" class="headerlink" title="node 环境下载慢"></a>node 环境下载慢</h2><p>pkg 打包需要特殊的 node 环境，会去 node pkg 缓存中去找，找不到就去 github 下载。</p><p>每次打包的时候会显示下载的版本，可以去 github 先下载好，然后放到缓存去，缓存大致位置在：<code>C:\Users\lenovo\.pkg-cache</code>，可以用 <code>everything</code> 搜 <code>.pkg-cache</code>。</p><p><a href="https://github.com/vercel/pkg-fetch/releases">pkg 资源下载</a></p><p>下载版本的名字可能会有不同，下载的是 <code>node-v8.17.0-win-x64</code>，但是需要的可能是<code>fetch-v8.17.0-win-x64</code>,修改一下名字即可。</p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pkg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滚动条样式</title>
      <link href="/2022/04/15/TrialYard/%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/04/15/TrialYard/%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="滚动条样式"><a href="#滚动条样式" class="headerlink" title="滚动条样式"></a>滚动条样式</h1><p>传统滚动条已经要看瞎了，不堪入目呐~</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*控制整个滚动条*/</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*滚动条中滑块部分*/</span></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">144</span>, <span class="number">147</span>, <span class="number">153</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb:hover &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#a4a4a4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TrialYard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除 node_modules 慢</title>
      <link href="/2022/04/05/bugRoad/%E5%88%A0%E9%99%A4%20node_modules%20%E6%85%A2/"/>
      <url>/2022/04/05/bugRoad/%E5%88%A0%E9%99%A4%20node_modules%20%E6%85%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="删除-node-modules-慢"><a href="#删除-node-modules-慢" class="headerlink" title="删除 node_modules 慢"></a>删除 node_modules 慢</h1><p>通常项目出现问题的时候，我们需要将 node_modules 删除重新 yarn，或者需要打包出去的时候需要将 node_modules 删除，但直接删除，是在的慢的不是一只半点。</p><h2 id="rimraf"><a href="#rimraf" class="headerlink" title="rimraf"></a>rimraf</h2><p>通过这个包 可以快速删除 node_modules。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>yarn global add rimraf</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>rimraf node_modules</code></p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> node_modules </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rimraf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 基础</title>
      <link href="/2022/03/12/JS/NodeJS/NodeJS%20%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/12/JS/NodeJS/NodeJS%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="Node-js-REPL"><a href="#Node-js-REPL" class="headerlink" title="Node.js REPL"></a>Node.js REPL</h3><blockquote><p>注意：REPL 也被称为运行评估打印循环，是一种编程语言环境（主要是控制台窗口），它使用单个表达式作为用户输入，并在执行后将结果返回到控制台。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Windows Terminal or cmd</span><br><span class="line">// 终端输入node , REPL 正在等待输入一些 JavaScript 代码</span><br><span class="line">&gt; node</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">// 可通过node直接执行文件</span><br><span class="line">&gt; node app.js</span><br></pre></td></tr></table></figure><h3 id="点命令"><a href="#点命令" class="headerlink" title="点命令"></a>点命令</h3><ul><li>.help: 显示点命令的帮助。</li><li>.editor: 启用编辑器模式，可以轻松地编写多行 JavaScript 代码。当处于此模式时，按下 ctrl-D 可以运行编写的代码。</li><li>.break: 当输入多行的表达式时，输入 .break 命令可以中止进一步的输入。相当于按下 ctrl-C。</li><li>.clear: 将 REPL 上下文重置为空对象，并清除当前正在输入的任何多行的表达式。</li><li>.load: 加载 JavaScript 文件（相对于当前工作目录）。</li><li>.save: 将在 REPL 会话中输入的所有内容保存到文件（需指定文件名）。</li><li>.exit: 退出 REPL（相当于按下两次 ctrl-C）。</li></ul><h3 id="命令行接收参数"><a href="#命令行接收参数" class="headerlink" title="命令行接收参数"></a>命令行接收参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Terminal</span><br><span class="line">&gt; node app.js 1,2,3</span><br><span class="line">&gt; node app.js name=JOEOP</span><br><span class="line">&gt; node app.js --name=JOEOP</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// &gt; node app.js 1,2,3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>)); <span class="comment">// [ &#x27;1,2,3&#x27; ]</span></span><br><span class="line"><span class="comment">// &gt; node app.js name=JOEOP</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>)); <span class="comment">// [ &#x27;name=JOEOP&#x27; ]</span></span><br></pre></td></tr></table></figure><p>此时则 args[0] 是 name&#x3D;joe，需要对其进行解析。 最好的方法是使用 minimist 库，该库有助于处理参数：</p><p><code>npm install minimist</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// &gt; node app.js --name=JOEOP</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="string">&quot;name&quot;</span>]); <span class="comment">// JOEOP</span></span><br></pre></td></tr></table></figure><h3 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h3><p><code>console.log(&#39;我的%s已经%d岁&#39;, &#39;猫&#39;, 2)</code>打印输出</p><ul><li>%s 会格式化变量为字符串</li><li>%d 会格式化变量为数字</li><li>%i 会格式化变量为其整数部分</li><li>%o 会格式化变量为对象</li></ul><p><code>console.clear()</code>清空控制台</p><p><code>console.count()</code>count 方法会对打印的字符串的次数进行计数，并在其旁边打印计数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oranges = [<span class="string">&quot;橙子&quot;</span>, <span class="string">&quot;橙子&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> apples = [<span class="string">&quot;苹果&quot;</span>];</span><br><span class="line">oranges.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">count</span>(fruit);</span><br><span class="line">&#125;);</span><br><span class="line">apples.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fruit</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">count</span>(fruit);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 橙子: 1</span></span><br><span class="line"><span class="comment">// 橙子: 2</span></span><br><span class="line"><span class="comment">// 苹果: 1</span></span><br></pre></td></tr></table></figure><p><code>console.trace()</code>打印堆栈踪迹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">function2</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">trace</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">function1</span> = (<span class="params"></span>) =&gt; <span class="title function_">function2</span>();</span><br><span class="line"><span class="title function_">function1</span>();</span><br></pre></td></tr></table></figure><p><code>console.time() console.timeEnd()</code>计算耗时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">doSomething</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">measureDoingSomething</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;doSomething()&quot;</span>);</span><br><span class="line">  <span class="title function_">doSomething</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;doSomething()&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">measureDoingSomething</span>();</span><br></pre></td></tr></table></figure><p><code>npm install progress</code>创建进度条</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ProgressBar</span> = <span class="built_in">require</span>(<span class="string">&quot;progress&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> <span class="title class_">ProgressBar</span>(<span class="string">&quot;:bar&quot;</span>, &#123; <span class="attr">total</span>: <span class="number">10</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bar.<span class="title function_">tick</span>();</span><br><span class="line">  <span class="keyword">if</span> (bar.<span class="property">complete</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><ul><li>Node 是对 ES 标准的一个实现，Node 也是一个 JS 引擎</li><li>Node 可以在后台编写服务器<ul><li>Node 编写服务器都是单线程服务器<ul><li>进程 – 一个个的工作计划（工厂中的车间）</li><li>线程 – 计算机最小的运算单位（工厂中的工人）</li></ul></li></ul></li><li>传统的服务器都是多线程的<ul><li>每进来一个请求，就创建一个线程去处理请求</li></ul></li><li>Node 的服务器单线程的<ul><li>Node 处理请求时是单线程，但是在后台拥有一个 I&#x2F;O 线程池</li></ul></li></ul><h3 id="NodeJS-模块化"><a href="#NodeJS-模块化" class="headerlink" title="NodeJS 模块化"></a>NodeJS 模块化</h3><ul><li>Node verison 13.2.0 起开始正式支持 ES Modules 特性</li><li>之前全部采用 CommonJS 进行模块化</li><li>Node 在引用时，会向上一层一层的寻找<code>node_modules</code></li><li>ES6 Modules<ul><li><code>export &amp; import</code></li></ul></li><li>CommonJS Modules<ul><li><code>module.exports &amp; require</code></li></ul></li></ul><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ul><li><code>npm -v</code></li><li><code>npm search packageName</code></li><li><code>npm install</code> 安装依赖</li><li><code>npm install/i packageName</code></li><li><code>npm install/i packageName --save</code> 安装并添加依赖</li><li><code>npm install/i packageName -g</code> 全局安装</li><li><code>npm remove/r packageName</code></li></ul><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><ul><li>Buffer 结构用法类似数组</li><li>数组中不能存储二进制的文件，Buffer 是专门来存储二进制数据的 <code>[ 00 - ff ]</code></li><li>Buffer 中存储的都是二进制数据，但是显示的时候会以 16 进制显示</li><li><code>&lt;buffer&gt;.length</code> 占用内存大小</li><li><code>Buffer.from(str)</code> 字符串转<code>buffer</code></li><li><del><code>new Buffer(bitSize)</code></del></li><li><code>Buffer.alloc(bitSize)</code></li><li><code>Buffer.allocUnsafe(bitSize)</code> 创建指定大小的<code>buffer</code>，但其中可能含有敏感数据</li><li><code>Buffer.compare(buf1, buf2)</code></li></ul><h3 id="FS（File-System）"><a href="#FS（File-System）" class="headerlink" title="FS（File System）"></a>FS（File System）</h3><ul><li><code>require(&quot;fs&quot;)</code></li><li><strong>同步</strong> 有返回值</li><li><code>fd = fs.openSync(path, flag[, mode])</code> 同步打开文件</li><li><code>fs.writeSync(fd, str[, startIndex[, encoding]])</code></li><li><code>fs.closeSync(fd)</code></li><li><strong>异步</strong> 没有返回值，通过回调函数返回</li><li><code>fs.open(path, flag [, mode], callback)</code><ul><li><code>callback = function(err, fd) &#123;&#125;</code></li></ul></li><li><code>fs.write(fd, string[, position[, encoding]], callback)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> NodeJS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义 Plugin 报错 打包终止</title>
      <link href="/2021/12/22/bugRoad/%E8%87%AA%E5%AE%9A%E4%B9%89%20Plugin%20%E6%8A%A5%E9%94%99%20%E6%89%93%E5%8C%85%E7%BB%88%E6%AD%A2/"/>
      <url>/2021/12/22/bugRoad/%E8%87%AA%E5%AE%9A%E4%B9%89%20Plugin%20%E6%8A%A5%E9%94%99%20%E6%89%93%E5%8C%85%E7%BB%88%E6%AD%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义-Plugin-报错-打包终止"><a href="#自定义-Plugin-报错-打包终止" class="headerlink" title="自定义 Plugin 报错 打包终止"></a>自定义 Plugin 报错 打包终止</h1><h2 id="🤔-发现问题"><a href="#🤔-发现问题" class="headerlink" title="🤔 发现问题"></a>🤔 发现问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node:9776) [DEP_WEBPACK_COMPILATION_ASSETS] DeprecationWarning: Compilation.assets will be frozen <span class="keyword">in</span> future, all modifications are deprecated.BREAKING CHANGE: No more changes should happen to Compilation.assets after sealing the Compilation.Do changes to assets earlier, e. g. <span class="keyword">in</span> Compilation.hooks.processAssets.Make sure to an appropriate stage from Compilation.PROCESS_ASSETS_STAGE_*. Use `node --trace-deprecation ...` to show <span class="built_in">where</span> the warning was created)</span><br></pre></td></tr></table></figure><h2 id="🙅‍♂️-拒绝妥协，坚持解决"><a href="#🙅‍♂️-拒绝妥协，坚持解决" class="headerlink" title="🙅‍♂️ 拒绝妥协，坚持解决"></a>🙅‍♂️ 拒绝妥协，坚持解决</h2><p>意思是： <code>Compilation.assets will be frozen in future</code> 就是 <code>Compilation.assets</code> 将来的<code>webpack</code>的版本中会被冻结，建议在 <code>compilation</code> 的 <code>seal</code> 阶段去处理资源。（也就是说可以在，资源压缩之后，冻结之前，对资源进行处理，但是<code>compilation</code>可能会触发多次）</p><p><code>compiler.hooks.emit.tapAsync(&quot;pluginName&quot;, (compilation) =&gt; &#123;&#125;)</code></p><p>打包终止原因是 异步钩子，需要调用回调，才会继续往下执行</p><ul><li>改用 <code>tap</code> 定义钩子</li><li>或者添加 <code>callback</code>，并调用</li></ul><p>之后就可以打包成功了，但可能打包之后仍然会有警告，这里可以暂时忽略</p>]]></content>
      
      
      <categories>
          
          <category> BugRoad </category>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Compilation.assets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2021/10/27/JS/Promise/"/>
      <url>/2021/10/27/JS/Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>处理异步请求</li><li>单向状态更变</li><li>回调地狱</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>Promise 来解决反馈结果需要等待的场景</p><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步是指当发起一个请求时，如果未得到请求结果，代码逻辑将会等待，直到结果出来为止才会继续执行之后的代码。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>异步是指当发起一个请求时，不会等待请求结果，直接继续执行后面的代码。请求结果的处理逻辑，会添加一个监听，等到反馈结果出来之后，在回调函数中处理对应的逻辑。</p><h2 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h2><ul><li>创建 xhr ( XML Http Requst )</li><li>建立连接，xhr.open()</li><li>发送请求，xhr.send()</li><li>进行监听，xhr.onReadyStateChange()</li></ul><p>倘若我们在，需要在监听中，拿到数据，接着作为参数继续去请求，那么就开始出现，回调的嵌套，如若回调愈加愈多，就会形成可怕的回调地狱。</p><p>promise 以及其 then 的出现就是来度化此劫的。</p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>resolve、reject进行状态更新pedding – resolved &#x2F; reject</p><p>resolve、reject 是 executor 函数（执行器）的两个参数。他们能够将请求结果的具体数据传递出去。</p><ul><li>then</li></ul><p>Promise实例拥有的 then 方法，用来处理当请求结果的状态变成 resolved 时的逻辑。</p><p>then 的第一个参数也为一个回调函数，该函数的参数则是 resolve 传递出来的数据。</p><p>then 的回调函数的返回值也会作为参数，向下传递。</p><ul><li>catch</li></ul><p>catch 方法，用来处理当请求结果的状态变成 rejected 时的逻辑。</p><p>catch 的第一个参数也为一个回调函数，该函数的参数则是 reject 传递出来的数据。</p><ul><li>promise.all</li></ul><p>进行批处理异步请求，可以接受一个 promise 数组。</p><p>当所有的 promise 全部为 resolved &#x2F; rejected 才返回 resolved &#x2F; rejected。</p><ul><li>promise.race</li></ul><p>进行批处理异步请求，可以接受一个 promise 数组。</p><p>当有一个的 promise 为 resolved &#x2F; rejected 就返回 resolved &#x2F; rejected。</p><h2 id="then的执行机制"><a href="#then的执行机制" class="headerlink" title="then的执行机制"></a>then的执行机制</h2><p>then 必须在 promise 的状态确定后才能被执行，并将其回调函数，放入微任务队列，等待执行。</p><p>注意：当 then 返回 promise 时，会产生两个微任务。一次是因为返回的 promise 作为参数，需要直接调用 then 得到其 promise 状态，另一个是其内部自己产生的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;)</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>) &#125;)</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>) &#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f4</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>) &#125;)</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f5</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>) &#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f11</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>) &#125;)</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f22</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22</span>) &#125;)</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f33</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">33</span>) &#125;)</span><br><span class="line"></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f44</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">44</span>) &#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f55</span>(<span class="params">v</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">55</span>) &#125;)</span><br><span class="line"><span class="comment">// 1 11 2 22 3 33 4 5 44 55</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Promise的状态一经改变就不能再改变。</li><li>.then和.catch都会返回一个新的Promise。</li><li>catch不管被连接到哪里，都能捕获上层未捕捉过的错误。</li><li>在Promise中，返回任意一个非 promise 的值都会被包裹成 promise 对象，例如return 2会被包装为return Promise.resolve(2)。</li><li>Promise 的 .then 或者 .catch 可以被调用多次, 但如果Promise内部的状态一经改变，并且有了一个值，那么后续每次调用.then或者.catch的时候都会直接拿到该值。</li><li>.then 或者 .catch 中 return 一个 error 对象并不会抛出错误，所以不会被后续的 .catch 捕获。</li><li>.then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环。</li><li>.then 或者 .catch 的参数期望是函数，传入非函数则会发生值透传。</li><li>.then方法是能接收两个参数的，第一个是处理成功的函数，第二个是处理失败的函数，再某些时候你可以认为catch是.then第二个参数的简便写法。</li><li>.then 方法回调函数，返回 promise，会额外产生两次微任务。</li><li>.finally方法也是返回一个Promise，他在Promise结束的时候，无论结果为resolved还是rejected，都会执行里面的回调函数。</li><li>async 函数一定会返回一个 promise 对象。如果一个 async 函数的返回值看起来不是 promise，那么它将会被隐式地包装在一个 promise 中。</li><li>在 async 函数中抛出了错误，则终止错误结果，不会继续向下执行，可以通过 try catch 或者 .catch 使得错误的地方不影响。</li><li>await 后面的语句相当于放到了 new Promise 中，下一行之后的代码都放到 Promise.then 中，需要等待 await 后面 promise 的处理。</li></ol><h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><ul><li><p>手写 promise</p><ul><li><p>executor</p><ul><li>绑定 resolve reject 中的 this</li></ul></li><li><p>resolve 状态更变</p></li><li><p>reject 状态更变</p></li><li><p>then</p><ul><li><p>判断传入参数是不是函数</p></li><li><p>返回新的 promise</p><ul><li><p>创建成功、失败的回调，其中执行传入的函数，加入微任务队列中</p></li><li><p>根据 参数函数执行的返回值，进行最后的 resolve</p><ul><li><p>返回值是 promise 直接调用 then，得到 promise 的结果，继续向下传递</p></li><li><p>返回值不是 promise，直接 resolve</p></li></ul></li><li><p>判断当前状态，整合 map 进行对</p></li></ul></li></ul></li><li><p>catch</p></li></ul></li><li><p>promise 实现循环异步事件</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">index, timeout</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">light</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fn</span>(<span class="number">2</span>, <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fn</span>(<span class="number">3</span>, <span class="number">3000</span>);</span><br><span class="line">  <span class="title function_">light</span>();</span><br><span class="line">  <span class="comment">// const promise = Promise.resolve();</span></span><br><span class="line">  <span class="comment">// promise</span></span><br><span class="line">  <span class="comment">//   .then(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     return fn(1, 1000);</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   .then(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     return fn(2, 2000);</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   .then(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     return fn(3, 3000);</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  <span class="comment">//   .then(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     return light();</span></span><br><span class="line">  <span class="comment">//   &#125;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">light</span>();</span><br></pre></td></tr></table></figure><ul><li>promise.all 结果收集不考虑其是否成功或失败</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergePromise</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = [];</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">  promiseArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    promise = promise.<span class="title function_">then</span>(item).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      data.<span class="title function_">push</span>(res);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件循环机制"><a href="#事件循环机制" class="headerlink" title="事件循环机制"></a>事件循环机制</h2><ul><li><p>函数调用栈</p></li><li><p>任务队列</p></li><li><p>宏任务队列</p><ul><li><p>script</p></li><li><p>setTimeout</p></li><li><p>setInteval</p></li><li><p>IO</p></li><li><p>render</p></li></ul></li><li><p>微任务队列</p><ul><li><p>Promise.then</p></li><li><p>process.nextTick</p></li></ul></li></ul><h3 id="循环机制"><a href="#循环机制" class="headerlink" title="循环机制"></a>循环机制</h3><p>宏任务 x 1 ➡️ 函数调用栈 ➡️ 微任务 x n ➡️ 宏任务 x 1 ➡️····</p><p>也就是说，宏任务一个一个的出队列，进入函数调用栈执行，然后在执行期间产生的微任务，会在此次函数调用栈执行完毕后，去清空微任务队列，以此往复。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1623173">详解ES6中的async&#x2F;await - 腾讯云开发者社区-腾讯云</a></p><p><a href="https://juejin.cn/post/6844904077537574919">【建议星星】要就来45道Promise面试题一次爽到底(1.1w字用心整理) - 掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>call-apply-bind</title>
      <link href="/2021/10/26/JS/call-apply-bind/"/>
      <url>/2021/10/26/JS/call-apply-bind/</url>
      
        <content type="html"><![CDATA[<h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call-apply-bind"></a>call-apply-bind</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><p>都是进行 this 绑定的。</p></li><li><p>call 参数一个个传递。</p></li><li><p>apply 参数通过数组传递。</p></li><li><p>bind 返回一个新的函数，并不立即执行函数。</p></li></ul><h4 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h4><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * call</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">context</span></span></span><br><span class="line"><span class="comment"> * 主要思路就是在传进来的this主体中增加 fn</span></span><br><span class="line"><span class="comment"> * 在通过 this.fn() 执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  that = context || <span class="variable language_">window</span>;</span><br><span class="line">  that.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> res;</span><br><span class="line">  res = that.<span class="title function_">fn</span>(...[...<span class="variable language_">arguments</span>].<span class="title function_">slice</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">delete</span> that.<span class="property">fn</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * apply</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">context</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  that = context || <span class="variable language_">window</span>;</span><br><span class="line">  that.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> res;</span><br><span class="line">  res = that.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">delete</span> that.<span class="property">fn</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bind</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">context</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> <span class="variable">Function</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 需要注意的是，返回的函数也可能被作为 构造函数执行，此时绑定this就没有作用了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">const</span> newFun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> newFun) fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [...<span class="variable language_">arguments</span>]);</span><br><span class="line">    <span class="keyword">else</span> fn.<span class="title function_">apply</span>(context, [...<span class="variable language_">arguments</span>]);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> newFun;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">n</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Es6</title>
      <link href="/2021/10/25/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89ES6%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/10/25/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89ES6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><p><a href="http://babeljs.io/repl/">babel 在线编译工具</a></p><h3 id="let-x2F-const"><a href="#let-x2F-const" class="headerlink" title="let&#x2F;const"></a>let&#x2F;const</h3><ul><li>块级作用域</li><li>不具备变量提升<ul><li>可以说成是声明式提升，赋值并没有提升，因此存在暂时性死区</li><li>因为赋值的提升并没有完成，所以即使声明提升了也不能够去使用</li></ul></li><li>const 变量定义的引用类型，如对象，对象的引用不可修改，但对象中的属性可以修改</li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><code>() =&gt; &#123;&#125;</code></p><blockquote><p>箭头函数可以替换函数表达式，但是不能替换函数声明</p></blockquote><p><strong>箭头函数没有 this，</strong>，如果你在箭头函数中使用 this，那么 this 一定是外层的 this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">getName</span>(); <span class="comment">// Cannot read properties of undefined (reading &#x27;name&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">getName</span>()(); <span class="comment">// tom</span></span><br></pre></td></tr></table></figure><blockquote><p>在 ES6 中，会默认采用严格模式，因此 this 也不会自动指向 window 对象了，而箭头函数本身并没有 this，因此 this 就只能是 undefined，这一点，在使用的时候，一定要慎重慎重再慎重，不然踩了坑你都不知道自己错在哪！这种情况，如果你还想用 this，就不要用使用箭头函数的写法。</p></blockquote><p><strong>箭头函数中无法访问<code>arguments</code></strong></p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> string = <span class="string">`<span class="subst">$&#123;a&#125;</span>+<span class="subst">$&#123;b&#125;</span>=<span class="subst">$&#123;a + b&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h3 id="解析结构"><a href="#解析结构" class="headerlink" title="解析结构"></a>解析结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先有这么一个对象</span></span><br><span class="line"><span class="keyword">const</span> props = &#123;</span><br><span class="line">  <span class="attr">className</span>: <span class="string">&quot;tiger-button&quot;</span>,</span><br><span class="line">  <span class="attr">loading</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">clicked</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">disabled</span>: <span class="string">&quot;disabled&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> loading = props.<span class="property">loading</span>;</span><br><span class="line"><span class="keyword">var</span> clicked = props.<span class="property">clicked</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> &#123; loading, clicked &#125; = props;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给一个默认值，当props对象中找不到loading时，loading就等于该默认值</span></span><br><span class="line"><span class="keyword">const</span> &#123; loading = <span class="literal">false</span>, clicked &#125; = props;</span><br></pre></td></tr></table></figure><p>数组的解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b, c] = arr;</span><br></pre></td></tr></table></figure><p>数组以序列号一一对应，这是一个有序的对应关系<br>而对象根据属性名一一对应，这是一个无序的对应关系<br>根据这个特性，使用解析结构从对象中获取属性值更加具有可用性</p><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x = <span class="number">20</span>, y = <span class="number">30</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>());</span><br></pre></td></tr></table></figure><h3 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h3><p>在 ES6 中用<code>...</code>来表示展开运算符，它可以将数组方法或者对象进行展开</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr1, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]; <span class="comment">// [1, 2, 3, 10, 20, 30];</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  ...obj1,</span><br><span class="line">  <span class="attr">d</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">e</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="number">6</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 &#125;</span></span><br></pre></td></tr></table></figure><p>利用展开运算符来处理剩余的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种方式在react中十分常用</span></span><br><span class="line"><span class="keyword">const</span> props = &#123;</span><br><span class="line">  <span class="attr">size</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">src</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;si&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; size, ...others &#125; = props;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(others) <span class="comment">// &#123; src: &#x27;xxxx&#x27;, mode: &#x27;si&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后再利用暂开运算符传递给下一个元素，再以后封装react组件时会大量使用到这种方式，正在学习react的同学一定要搞懂这种使用方式</span></span><br><span class="line">&lt;button &#123;...others&#125; size=&#123;size&#125; /&gt;</span><br></pre></td></tr></table></figure><p>处理函数不定参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有参数之和</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b, ...more</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> more.<span class="title function_">reduce</span>(<span class="function">(<span class="params">m, n</span>) =&gt;</span> m + n, a + b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 39</span></span><br></pre></td></tr></table></figure><h3 id="对象字面量和-class"><a href="#对象字面量和-class" class="headerlink" title="对象字面量和 class"></a>对象字面量和 class</h3><h4 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h4><ul><li><p>属性值同名省略</p></li><li><p>对象中的属性可以采用<code>[params]</code>，实现<strong>变量</strong>属性名</p><ul><li><p>在 ant-design 的源码实现中，就大量使用了这种方式来拼接当前元素的 className，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> alertCls = <span class="title function_">classNames</span>(</span><br><span class="line">  prefixCls,</span><br><span class="line">  &#123;</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-<span class="subst">$&#123;type&#125;</span>`</span>]: <span class="literal">true</span>,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-close`</span>]: !<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">closing</span>,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-with-description`</span>]: !!description,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-no-icon`</span>]: !showIcon,</span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-banner`</span>]: !!banner,</span><br><span class="line">  &#125;,</span><br><span class="line">  className</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 原型方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>babel 会将 ES6 的写法编译成为利用<code>object.defineProperty</code>方式实现<br><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p></blockquote><p>实际开发中还有几种写法方式不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 方法添加到原型中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> a = <span class="number">20</span>; <span class="comment">// 相当于类的私有属性</span></span><br><span class="line"></span><br><span class="line">  c = <span class="number">20</span>; <span class="comment">// 属性添加到构造函数中，相当于 this.c = 20</span></span><br><span class="line"></span><br><span class="line">  getAge = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">age</span>; <span class="comment">//方法添加到构造函数，等同this.getAge = function() &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数还是要注意<strong>this</strong>指向问题</p><p><strong>继承 extends</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student类继承Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, gender, classes</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age); <span class="comment">// super 必须在this前面使用，否则报错</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classes</span> = classes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getGender</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">gender</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>super(name, age) === Person.call(this)</code></p><p>super 还可以直接调用父级的原型方法，<code>super.getName()</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2021/10/24/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89Promise/"/>
      <url>/2021/10/24/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89Promise/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的ajax原生实现</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;https://hq.tigerbrokers.com/fundamental/finance_calendar/getType/2017-02-26/2017-06-10&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">XHR</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">XHR</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable constant_">XHR</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    result = <span class="variable constant_">XHR</span>.<span class="property">response</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 ajax 的原生实现中，利用了 onreadystatechange 事件，当该事件触发并且符合一定条件时，才能拿到想要的数据，之后才能开始处理数据</p><p>但是此时如果我们需要一个新的 ajax 请求的，并且这个新请求需要，上一个请求的结果，那么我们就需要这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;https://hq.tigerbrokers.com/fundamental/finance_calendar/getType/2017-02-26/2017-06-10&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">XHR</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">XHR</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable constant_">XHR</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        result = <span class="variable constant_">XHR</span>.<span class="property">response</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 伪代码</span></span><br><span class="line">        <span class="keyword">var</span> url2 = <span class="string">&#x27;http:xxx.yyy.com/zzz?ddd=&#x27;</span> + result.<span class="property">someParams</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">XHR2</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="title class_">XHR2</span>.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">        <span class="title class_">XHR2</span>.<span class="title function_">send</span>();</span><br><span class="line">        <span class="title class_">XHR2</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果继续向下，代码就变成一坨狗屎了，往往也被称为<strong>回调地狱</strong></p><p>届时，Promise，站出来解决这个问题了</p><p>除了解决 <strong>回调地狱</strong> ，还有更为显著的效果，<strong>为了代码更加具有可读性和可维护性，我们需要将数据请求与数据处理明确的区分开来</strong></p><p>当然执行顺序还可以通过 函数调用栈、任务队列 来调控</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的封装</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">want</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是你想要执行的代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用栈</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">want</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这里表示执行了一大堆各种代码&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他代码执行完毕，最后执行回调函数</span></span><br><span class="line">  want &amp;&amp; <span class="title function_">want</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(want);</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">want</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是你想要执行的代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">want</span>) &#123;</span><br><span class="line">  <span class="comment">// 将想要执行的代码放入队列中，根据事件循环的机制，我们就不用非得将它放到最后面了，由你自由选择</span></span><br><span class="line">  want &amp;&amp; <span class="built_in">setTimeout</span>(want, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这里表示执行了一大堆各种代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(want);</span><br></pre></td></tr></table></figure><p>Promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">want</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是你想要执行的代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">want</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这里表示执行了一大堆各种代码&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Promise对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> want == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(want);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;TypeError: &quot;</span> + want + <span class="string">&quot;不是一个函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(want).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">want</span>) &#123;</span><br><span class="line">  <span class="title function_">want</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&quot;1234&quot;</span>).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Promise-的三种状态"><a href="#Promise-的三种状态" class="headerlink" title="Promise 的三种状态"></a>Promise 的三种状态</h4><ul><li>pending：等待，或者正在进行，未得到结果</li><li>resolved（Fulfilled）：已经完成，并得到预期结果，可继续执行</li><li>rejected：得到非预期结果，拒绝执行</li></ul><p>Promise 状态不受外界环境影响，只能从 peding -&gt; resolved &#x2F; rejected，且不可逆</p><p>一、在 Promise 对象的构造函数中，将一个函数作为第一个参数。而这个函数，就是用来处理 Promise 的状态变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_">reject</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>二、<code>Promise.then(resolve, reject)</code>，接受构造函数中，处理的状态，分别对应执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数是一个number值&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数不是一个number值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&quot;hahha&quot;</span>);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1234</span>);</span><br></pre></td></tr></table></figure><p>then 方法的执行结果也会返回一个 Promise 对象。因此我们可以进行 then 的链式执行，这也是解决<strong>回调地狱</strong>的主要方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数是一个number值&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数不是一个number值&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&quot;hahha&quot;</span>);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1234</span>);</span><br></pre></td></tr></table></figure><blockquote><p>then(null, function() {}) 就等同于 catch(function() {})</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>事件循环机制</title>
      <link href="/2021/10/23/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/10/23/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="事件循环机制"><a href="#事件循环机制" class="headerlink" title="事件循环机制"></a>事件循环机制</h1><h2 id="先看看大佬的文章-👀"><a href="#先看看大佬的文章-👀" class="headerlink" title="先看看大佬的文章 👀"></a>先看看大佬的文章 👀</h2><blockquote><p><a href="https://links.jianshu.com/go?to=https://zhuanlan.zhihu.com/p/25407758">这个前端面试在搞事</a></p><p><a href="https://links.jianshu.com/go?to=https://juejin.im/post/58cf180b0ce4630057d6727c">80% 应聘者都不及格的 JS 面试题</a></p></blockquote><h2 id="涉及概念"><a href="#涉及概念" class="headerlink" title="涉及概念"></a>涉及概念</h2><ul><li>执行上下文(Execution context)</li><li>函数调用栈(call stack)</li><li>任务队列(task queue)</li><li>Promise</li></ul><p>Javascript 代码执行过程中，执行顺序依靠 <strong>函数调用栈</strong>、<strong>任务队列</strong>来维护的</p><p>JavaScript 的一大特点就是单线程，而这个线程中拥有唯一的一个事件循环</p><ul><li>一个线程中，事件循环时唯一的，但是任务队列可以有多个</li><li><strong>任务队列</strong>分为：<code>macro-task</code>（宏任务）、<code>micro-task</code>（微任务）<ul><li>**<code>macro-task</code>**：script(整体代码), setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering。</li><li><strong><code>micro-task</code></strong>: process.nextTick, Promise, Object.observe(已废弃), MutationObserver(html5 新特性)</li></ul></li><li>setTimeout&#x2F;Promise 等我们称之为<strong>任务源&#x2F;任务分发器</strong>。而进入任务队列的是他们指定的具体执行任务。</li><li>来自不同任务源的任务会进入到不同的任务队列。其中**<code>setTimeout</code><strong>与</strong><code>setInterval</code>**是同源的</li><li>事件循环的顺序，决定了 JavaScript 代码的执行顺序。<ul><li>执行<code>macro-task</code> 中的 script(整体代码)，开始第一次循环，上下文进入函数调用栈，执行可执行代码，将遇到的任务入对应的队列，直到调用栈清空</li><li>执行<code>micro-task</code>中的任务，通过调用栈执行，遇到任务入对应的队列，清空由执行宏任务产生的微任务，一次循环完成</li><li>执行<code>macro-task</code>中的任务，开始第二次循环，通过调用栈执行，遇到任务入对应的队列</li><li><code>micro -&gt; macro -&gt; micro -&gt; macro ....</code></li></ul></li><li>其中每一个任务的执行，无论是<code>macro-task</code>还是<code>micro-task</code>，都是借助函数调用栈来完成</li></ul><p><strong>注意结束的时间点</strong>⏱️</p><h2 id="事件循环总结："><a href="#事件循环总结：" class="headerlink" title="事件循环总结："></a>事件循环总结：</h2><ul><li>先执行宏任务，在执行宏任务的过程中会产生微任务以及宏任务，在结束当前次宏任务后，去执行清空产生的微任务，当然宏任务执行的过程中也会产生宏任务，排在后续队列中</li><li>执行上次循环产生的宏任务，开启下一次循环</li></ul><p>栗子 🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    i == <span class="number">99</span> &amp;&amp; <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><blockquote><p>最终输出结果：2 3 5 4 1</p></blockquote><ul><li><p>首先，<code>macro-task</code>中只有<code>script</code>，循环开始</p></li><li><p>执行可执行上下文，以及将其他宏任务、微任务入队列</p><ul><li><code>setTimeout() -&gt; macro-task</code></li><li><code>new promise().then -&gt; micro-task</code> 构造函数部分是在 new 的时候执行，不进入队列，直接入函数调用栈执行，所以此时依次输出 2、3</li></ul></li><li><p>继续执行到最后<code>console.log(5)</code>，此时输出 5</p></li><li><p>至此宏任务第一个队列执行完毕，去清空，此次产生的微任务队列，及<code>promise().then</code>，此时输出 4</p></li><li><p>清空完毕，继续回到宏任务队列，再次循环，及执行<code>setTimeout</code>，此时输出 1</p></li><li><p>至此清空，结束循环</p></li></ul><hr><p>over~🎉</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>详细图解jQuery对象，以及如何扩展jQuery插件</title>
      <link href="/2021/10/22/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3jQuery%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%89%A9%E5%B1%95jQuery%E6%8F%92%E4%BB%B6/"/>
      <url>/2021/10/22/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3jQuery%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%89%A9%E5%B1%95jQuery%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a>jQuery 对象</h1><p>使用 jQuery 对象时，我们这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个jQuery对象</span></span><br><span class="line">$(<span class="string">&quot;.target&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素的css属性</span></span><br><span class="line">$(<span class="string">&quot;.target&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="浅析-Jquery-源码"><a href="#浅析-Jquery-源码" class="headerlink" title="浅析 Jquery 源码"></a>浅析 Jquery 源码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">ROOT</span>) &#123;</span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">var</span> jQuery = <span class="keyword">function</span> (<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="comment">// 在jQuery中直接返回new过的实例，init是jQuery的真正构造函数，存在JQuery原型上</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(selector);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">constructor</span>: jQuery,</span><br><span class="line"></span><br><span class="line">    <span class="attr">version</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params">selector</span>) &#123;</span><br><span class="line">      <span class="comment">// 在jquery中这里有一个复杂的判断，但是这里我做了简化</span></span><br><span class="line">      <span class="keyword">var</span> elem, selector;</span><br><span class="line">      elem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(selector);</span><br><span class="line">      <span class="variable language_">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在jquery中返回一个由所有原型属性方法组成的数组，我们这里简化，直接返回this即可</span></span><br><span class="line">      <span class="comment">// return jQuery.makeArray(selector, this);</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在原型上添加一堆方法</span></span><br><span class="line">    <span class="attr">toArray</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">each</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">ready</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">first</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">slice</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现jQuery的两种扩展方式</span></span><br><span class="line">  jQuery.<span class="property">extend</span> = jQuery.<span class="property">fn</span>.<span class="property">extend</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 在jquery源码中会根据参数不同进行很多判断，我们这里就直接走一种方式，所以就不用判断了</span></span><br><span class="line">    <span class="keyword">var</span> target = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> copy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</span><br><span class="line">      copy = options[name];</span><br><span class="line">      target[name] = copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// jQuery中利用上面实现的扩展机制，添加了许多方法，其中</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 直接添加在构造函数上，被称为工具方法</span></span><br><span class="line">  jQuery.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">isFunction</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">type</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">parseHTML</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">parseJSON</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">ajax</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加到原型上，动态方法</span></span><br><span class="line">  jQuery.<span class="property">fn</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="attr">queue</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">promise</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">attr</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">prop</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">addClass</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">removeClass</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">val</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">css</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// $符号的由来，实际上它就是jQuery，一个简化的写法，在这里我们还可以替换成其他可用字符</span></span><br><span class="line">  <span class="variable constant_">ROOT</span>.<span class="property">jQuery</span> = <span class="variable constant_">ROOT</span>.<span class="property">$</span> = jQuery;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/RlBK9ZgFsWfU4Io.webp"></p><h4 id="对象封装分析"><a href="#对象封装分析" class="headerlink" title="对象封装分析"></a>对象封装分析</h4><p><code>jQuery</code>构造函数里声明一个 fn 属性，指向<code>jQuery.prototype</code>，并在原型中添加<code>init()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span> = jQuery.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">init</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>init()</code>作为实际的构造函数，其<code>prototype</code>指向原型<code>jQuery.prototype</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br></pre></td></tr></table></figure><p>构造函数 jQuery 中，返回了 init 的实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jQuery = <span class="keyword">function</span> (<span class="params">selector</span>) &#123;</span><br><span class="line">  <span class="comment">// 在jQuery中直接返回new过的实例，这里的init是jQuery的真正构造函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(selector);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后对外暴露入口时，将字符$与 jQuery 对等起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">ROOT</span>.<span class="property">jQuery</span> = <span class="variable constant_">ROOT</span>.<span class="property">$</span> = jQuery;</span><br></pre></td></tr></table></figure><p><strong>避免无节制的使用<code>jQuery</code></strong>,每次执行<code>$()</code>后都会重新生成新的实例，对于内存的消耗非常大。正确的做法是既然是同一个对象，那么就用一个变量保存起来后续使用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $test = $(<span class="string">&quot;#test&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> width = <span class="built_in">parseInt</span>($test.<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (width &gt; <span class="number">20</span>) &#123;</span><br><span class="line">  $test.<span class="title function_">css</span>(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于静态方法，工具方法和实例方法"><a href="#关于静态方法，工具方法和实例方法" class="headerlink" title="关于静态方法，工具方法和实例方法"></a>关于静态方法，工具方法和实例方法</h4><p><img src="https://s2.loli.net/2023/03/05/Sx6Y5IkjzwTFK7e.webp"></p><h4 id="jQuery-插件封装"><a href="#jQuery-插件封装" class="headerlink" title="jQuery 插件封装"></a>jQuery 插件封装</h4><ul><li><p>利用闭包创建自执行模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">$</span>) &#123;&#125;)(jQuery);</span><br></pre></td></tr></table></figure></li><li><p>挂载方法到构造函数上或者原型上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">$</span>) &#123;</span><br><span class="line">  $.fn.<span class="property">myPlugin</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象实例-封装拖拽对象</title>
      <link href="/2021/10/21/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8B%96%E6%8B%BD%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/10/21/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8B%96%E6%8B%BD%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象实例-封装拖拽对象"><a href="#面向对象实例-封装拖拽对象" class="headerlink" title="面向对象实例-封装拖拽对象"></a>面向对象实例-封装拖拽对象</h1><p><img src="https://s2.loli.net/2023/03/05/2yjPfM9eDnAgtSh.webp"></p><ul><li>构造函数中： 属性与方法为当前实例单独拥有，只能被当前实例访问，并且每声明一个实例，其中的方法都会被重新创建一次。</li><li>原型中： 属性与方法为所有实例共同拥有，可以被所有实例访问，新声明实例不会重复创建方法。</li><li>模块作用域中：属性和方法不能被任何实例访问，但是能被内部方法访问，新声明的实例，不会重复创建相同的方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Drag.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Drag</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">elem</span> = <span class="keyword">typeof</span> selector == <span class="string">&quot;Object&quot;</span> ? selector : <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">startX</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">startY</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sourceX</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sourceY</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTransform</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> transform = <span class="string">&quot;&quot;</span>,</span><br><span class="line">    divStyle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>).<span class="property">style</span>,</span><br><span class="line">    transformArr = [<span class="string">&quot;transform&quot;</span>, <span class="string">&quot;webkitTransform&quot;</span>, <span class="string">&quot;MozTransform&quot;</span>, <span class="string">&quot;msTransform&quot;</span>, <span class="string">&quot;OTransform&quot;</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; transformArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (transformArr[i] <span class="keyword">in</span> divStyle) &#123;</span><br><span class="line">      <span class="keyword">return</span> (transform = transformArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> transform;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> transform = <span class="title function_">getTransform</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Drag</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Drag</span>,</span><br><span class="line">  <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setDrag</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">setDrag</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elem</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousedown&quot;</span>, start, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      self.<span class="property">startX</span> = event.<span class="property">pageX</span>;</span><br><span class="line">      self.<span class="property">startY</span> = event.<span class="property">pageY</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> pos = self.<span class="title function_">getTargetPos</span>();</span><br><span class="line"></span><br><span class="line">      self.<span class="property">sourceX</span> = pos.<span class="property">x</span>;</span><br><span class="line">      self.<span class="property">sourceY</span> = pos.<span class="property">y</span>;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, move, <span class="literal">false</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseup&quot;</span>, end, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> currentX = event.<span class="property">pageX</span>;</span><br><span class="line">      <span class="keyword">var</span> currentY = event.<span class="property">pageY</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> distanceX = currentX - self.<span class="property">startX</span>;</span><br><span class="line">      <span class="keyword">var</span> distanceY = currentY - self.<span class="property">startY</span>;</span><br><span class="line"></span><br><span class="line">      self.<span class="title function_">setTargetPos</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: (self.<span class="property">sourceX</span> + distanceX).<span class="title function_">toFixed</span>(),</span><br><span class="line">        <span class="attr">y</span>: (self.<span class="property">sourceY</span> + distanceY).<span class="title function_">toFixed</span>(),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">end</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, move);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mouseup&quot;</span>, end);</span><br><span class="line">      <span class="comment">// do other things</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getStyle</span>: <span class="keyword">function</span> (<span class="params">property</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">defaultView</span>.<span class="property">getComputedStyle</span></span><br><span class="line">      ? <span class="variable language_">document</span>.<span class="property">defaultView</span>.<span class="title function_">getComputedStyle</span>(<span class="variable language_">this</span>.<span class="property">elem</span>, <span class="literal">false</span>)[property]</span><br><span class="line">      : <span class="variable language_">this</span>.<span class="property">elem</span>.<span class="property">currentStyle</span>[property];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getTargetPos</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pos = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> elem = <span class="variable language_">this</span>.<span class="property">elem</span>;</span><br><span class="line">    <span class="keyword">if</span> (transform) &#123;</span><br><span class="line">      <span class="keyword">let</span> transformValue = <span class="variable language_">this</span>.<span class="title function_">getStyle</span>(transform);</span><br><span class="line">      <span class="keyword">if</span> (transformValue == <span class="string">&quot;none&quot;</span>) &#123;</span><br><span class="line">        elem.<span class="property">style</span>[transform] = <span class="string">&quot;translate(0, 0)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = transformValue.<span class="title function_">match</span>(<span class="regexp">/-?\d+/g</span>);</span><br><span class="line">        <span class="keyword">return</span> (pos = &#123;</span><br><span class="line">          <span class="attr">x</span>: <span class="built_in">parseInt</span>(temp[<span class="number">4</span>].<span class="title function_">trim</span>()),</span><br><span class="line">          <span class="attr">y</span>: <span class="built_in">parseInt</span>(temp[<span class="number">5</span>].<span class="title function_">trim</span>()),</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">getStyle</span>(elem, <span class="string">&quot;position&quot;</span>) == <span class="string">&quot;static&quot;</span>) &#123;</span><br><span class="line">        elem.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;relative&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(elem, <span class="string">&quot;left&quot;</span>) ? <span class="title function_">getStyle</span>(elem, <span class="string">&quot;left&quot;</span>) : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">let</span> y = <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(elem, <span class="string">&quot;top&quot;</span>) ? <span class="title function_">getStyle</span>(elem, <span class="string">&quot;top&quot;</span>) : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (pos = &#123;</span><br><span class="line">          <span class="attr">x</span>: x,</span><br><span class="line">          <span class="attr">y</span>: y,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">setTargetPos</span>: <span class="keyword">function</span> (<span class="params">pos</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> elem = <span class="variable language_">this</span>.<span class="property">elem</span>;</span><br><span class="line">    <span class="keyword">if</span> (transform) &#123;</span><br><span class="line">      elem.<span class="property">style</span>[transform] = <span class="string">&quot;translate(&quot;</span> + pos.<span class="property">x</span> + <span class="string">&quot;px, &quot;</span> + pos.<span class="property">y</span> + <span class="string">&quot;px)&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      elem.<span class="property">style</span>.<span class="property">left</span> = pos.<span class="property">x</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">      elem.<span class="property">style</span>.<span class="property">top</span> = pos.<span class="property">y</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Drag</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./drag&quot;</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&quot;target&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Drag</span>(<span class="string">&quot;target2&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象、构造函数、原型与原型链</title>
      <link href="/2021/10/20/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2021/10/20/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%8D%81%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象、构造函数、原型与原型链"><a href="#面向对象、构造函数、原型与原型链" class="headerlink" title="面向对象、构造函数、原型与原型链"></a>面向对象、构造函数、原型与原型链</h1><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createPerson = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="comment">// 声明一个中间对象，该对象就是工厂模式的模子</span></span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 依次添加我们需要的属性与方法</span></span><br><span class="line">  o.<span class="property">name</span> = name;</span><br><span class="line">  o.<span class="property">age</span> = age;</span><br><span class="line">  o.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个实例</span></span><br><span class="line"><span class="keyword">var</span> perTom = <span class="title function_">createPerson</span>(<span class="string">&quot;TOM&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">PerJake</span> = <span class="title function_">createPerson</span>(<span class="string">&quot;Jake&quot;</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>工厂模式会产生两个问题：</p><ul><li>无法识别对象实例的类型</li><li>重复分配空间</li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>new 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将构造函数以参数形式传入</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">New</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="comment">// 声明一个中间对象，该对象为最终返回的实例</span></span><br><span class="line">  <span class="keyword">var</span> res = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//实例原型(__proto__)指向构造函数原型</span></span><br><span class="line">  <span class="keyword">if</span> (func.<span class="property"><span class="keyword">prototype</span></span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    res.<span class="property">__proto__</span> = func.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变this指向</span></span><br><span class="line">  <span class="comment">// ret为构造函数执行的结果，这里通过apply，将构造函数内部的this指向修改为指向res</span></span><br><span class="line">  <span class="keyword">var</span> ret = func.<span class="title function_">apply</span>(res, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当我们在构造函数中有返回对象时，那么new的执行结果就是该返回对象</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> ret === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> ret === <span class="string">&quot;function&quot;</span>) &amp;&amp; ret !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有明确指定返回对象，则默认返回res</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过new声明创建实例，这里的p1，实际接收的正是new中返回的res</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="title class_">New</span>(<span class="title class_">Person</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">getName</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然，这里也可以判断出实例的类型了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>JavaScript 内部再通过其他的一些特殊处理，将 var p1 &#x3D; New(Person, ‘tom’, 20); 等效于 var p1 &#x3D; new Person(‘tom’, 20);。就是我们认识的 new 关键字了。</p></blockquote><p>new 过程：</p><ul><li>声明一个中间对象；</li><li>将该中间对象的原型指向构造函数的原型；</li><li>将构造函数的 this，指向该中间对象；</li><li>返回该中间对象，即返回实例对象。</li></ul><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p><strong>原型、构造函数、实例之间的关系：</strong></p><p>构造函数的<code>prototype</code>属性指向原型</p><p>构造函数的原型中的<code>custructor</code>方法指向构造函数</p><p>实例中的<code>__proto__</code>指向构造函数的原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过prototye属性，将方法挂载到原型对象上</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;tim&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jak&quot;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">getName</span> === p2.<span class="property">getName</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/1MJhaKw28B3t5mX.webp"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>所有函数都有<code>toString</code>方法，那么这个方法到底是在哪里的呢？</p><p><img src="https://s2.loli.net/2023/03/05/UCc47QtTnEKJqOb.webp"></p><p>Function 原型是 Object 的实例，形成原型链</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数的继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cPerson</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承原型</span></span><br><span class="line">cPerson.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>(name, age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加更多方法</span></span><br><span class="line">cPerson.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getLive</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="结合继承"><a href="#结合继承" class="headerlink" title="结合继承"></a>结合继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数继承</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = <span class="keyword">function</span> (<span class="params">name, age, grade</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入被继承的构造函数proto(Person)，以及配置参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">proto, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建一个空对象---继承的构造函数的原型(Student.prototype) 也是 Person 的实例</span></span><br><span class="line">  <span class="keyword">var</span> tmp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 让这个新的空对象成为父类对象的实例</span></span><br><span class="line">  tmp.<span class="property">__proto__</span> = proto;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传入的方法都挂载到新对象上，新的对象将作为子类对象的原型</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(tmp, options);</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单封装<code>create</code>之后就可以实现原型继承了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="comment">// 不要忘了重新指定构造函数</span></span><br><span class="line">    <span class="attr">constructor</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="title class_">Student</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">getGrade</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">grade</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 ECMAScript5 中直接提供了一个 Object.create 方法来完成我们上面自己封装的 create 的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, grade</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="attr">constructor</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Student</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getGrade</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">grade</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">getAge</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="title function_">getGrade</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create()</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">proto, props</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  obj.<span class="property">__proto__</span> = proto;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj, props);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>柯理化函数</title>
      <link href="/2021/10/19/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B9%9D%EF%BC%89%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0/"/>
      <url>/2021/10/19/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B9%9D%EF%BC%89%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><p><strong>柯里化：一个函数接受 A 作为参数，然后返回一个新的函数，并且这个新的函数能够处理函数 A 的剩下参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么 add 函数的柯里化函数_add 则可以如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_add</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">c</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的运算方式是等价的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">_add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="柯里化的通用式"><a href="#柯里化的通用式" class="headerlink" title="柯里化的通用式"></a>柯里化的通用式</h3><p>封装如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn, args</span>) &#123;</span><br><span class="line">  <span class="comment">// fn 函数中形参个数</span></span><br><span class="line">  <span class="keyword">let</span> length = fn.<span class="property">length</span>;</span><br><span class="line">  args = args || [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 上次参数 初始为[]</span></span><br><span class="line">    <span class="keyword">let</span> _args = [].<span class="property">slice</span>.<span class="title function_">call</span>(args);</span><br><span class="line">    <span class="comment">// 本次参数</span></span><br><span class="line">    <span class="keyword">let</span> arg = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并 _args 若参数未收集完继续向下传递</span></span><br><span class="line">    [].<span class="property">push</span>.<span class="title function_">apply</span>(_args, arg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断实参和形参的个数</span></span><br><span class="line">    <span class="comment">// 参数未收集完全 那么就返回一个新的函数，接收剩余的参数</span></span><br><span class="line">    <span class="keyword">if</span> (_args.<span class="property">length</span> &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> curry.<span class="title function_">call</span>(<span class="variable language_">this</span>, fn, _args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 参数收集完全，直接执行函数fn</span></span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, _args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">curry</span>(<span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn(1, 2)(3);</span><br><span class="line">------------------------------------------------</span><br><span class="line">&#123;fn&#125; &#123;_args&#125; &#123;args&#125;   =&gt;  &#123;_args&#125;</span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line"> fn     []    [1,2]   =&gt;   [1,2]</span><br><span class="line">--判断length--参数收集不全--返回新函数继续收集</span><br><span class="line"></span><br><span class="line"> fn    [1,2]   [3]    =&gt;   [1,2,3]</span><br><span class="line">--判断length--参数收集完全--直接执行fn</span><br></pre></td></tr></table></figure><h3 id="lodash-中使用柯里化函数"><a href="#lodash-中使用柯里化函数" class="headerlink" title="lodash 中使用柯里化函数"></a>lodash 中使用柯里化函数</h3><p><a href="https://www.lodashjs.com/docs/lodash.curry#_curryfunc-arityfunclength">_.curry(func)</a></p><ul><li>功能: 创建一个函数, 该函数接受一个或多个 func 的参数, 如果 func 所需要的参数都被提供,则执行 func 并返回执行的结果, 否则继续返回该函数并等待接受剩余的参数.</li><li>参数: 需要柯里化的函数返回值: 柯里化后的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abc = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b, c];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curried = _.<span class="title function_">curry</span>(abc);</span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">curried</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>栗子：<br>封装一个校验方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">targetString, reg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> reg.<span class="title function_">test</span>(targetString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">check</span>(<span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>, <span class="string">&quot;14900000088&quot;</span>);</span><br><span class="line"><span class="title function_">check</span>(<span class="regexp">/^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/</span>, <span class="string">&quot;test@163.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时我们可以借助柯里化，简化使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _check = <span class="title function_">curry</span>(check);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkPhone = <span class="title function_">_check</span>(<span class="regexp">/^1[34578]\d&#123;9&#125;$/</span>);</span><br><span class="line"><span class="keyword">var</span> checkEmail = <span class="title function_">_check</span>(<span class="regexp">/^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkPhone</span>(<span class="string">&quot;183888888&quot;</span>);</span><br><span class="line"><span class="title function_">checkEmail</span>(<span class="string">&quot;xxxxx@test.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>柯里化：我们在封装含有多个参数的模块的时候，可以通过柯里化，将参数由多元转为一元。比如我要封装<code>enc_fn(fn, params)</code>，可以通过柯里化<code>_en_fn = curry(en_fn)</code>，然后分部传递参数实现功能，<code>ac_fn = _en_fn(fn)</code>，<code>ac_fn(params)</code></p><p>比如我们需要一个模块，对数组的每一项进行操作并返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNewArray</span>(<span class="params">fn, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">map</span>(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getNewArray</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">10</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// [10, 20, 30]</span></span><br></pre></td></tr></table></figure><p>利用柯里化二次封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_map</span>(<span class="params">fn, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">map</span>(fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _getNewArray = <span class="title function_">curry</span>(_map);</span><br><span class="line"><span class="keyword">let</span> getNewArray = <span class="title function_">_getNewArray</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">getNewArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// [10, 20, 30]</span></span><br></pre></td></tr></table></figure><p>同样<code>filter</code>也可以进行封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_filter</span>(<span class="params">fn, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">filter</span>(fn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> _find = <span class="title function_">curry</span>(_filter);</span><br><span class="line"><span class="keyword">let</span> findNum = <span class="title function_">_find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="keyword">typeof</span> item == <span class="string">&quot;number&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">findNum</span>([<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p><strong>柯里化使用递归与闭包，因此柯里化的自由度是以牺牲了一定的性能为代价换来的</strong></p><p>无限参数的柯里化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现一个add方法，使计算结果能够满足如下预期：</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) = <span class="number">6</span>;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>) = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>) = <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>通过使用递归与闭包，去收集参数，以及重写<code>toString/valueOf</code>，实现这个函数直接参与计算，并且转换的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _args = [].<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">let</span> adder = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _adder = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      [].<span class="property">push</span>.<span class="title function_">apply</span>(_args, [].<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">      <span class="keyword">return</span> _adder;</span><br><span class="line">    &#125;;</span><br><span class="line">    _adder.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _adder;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">adder</span>(..._args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>).<span class="title function_">toString</span>(); <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>).<span class="title function_">toString</span>(); <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).<span class="title function_">toString</span>(); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add -&gt; adder -&gt; _adder -&gt; _adder ....</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">add(1,2)(3)</span><br><span class="line">add(1,2)  ---&gt;  adder(1,2)  ---&gt;  _adder(3)</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">add(1)(2)(3)</span><br><span class="line">add(1)  ---&gt;  adder(1)  ---&gt;  _adder(2)  ---&gt;  _adder(3)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数与函数式编程</title>
      <link href="/2021/10/18/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%85%AB%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/10/18/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%85%AB%EF%BC%89%E5%87%BD%E6%95%B0%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><h3 id="函数声明、函数表达式、匿名函数与自执行函数"><a href="#函数声明、函数表达式、匿名函数与自执行函数" class="headerlink" title="函数声明、函数表达式、匿名函数与自执行函数"></a>函数声明、函数表达式、匿名函数与自执行函数</h3><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>JavaScript 中，有两种声明方式，一个是使用<code>var/let/const</code>的变量声明，另一个是使用<code>function</code>的函数声明。</p><p>变量对象的创建过程中，函数声明比变量的声明具有更优先的执行顺序</p><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><p>函数表达的提升方式与变量声明一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params">bar, num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">bar</span>() + num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量对象在fn上下文执行过程中的创建阶段</span></span><br><span class="line"><span class="title function_">VO</span>(fn) = &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">        <span class="attr">bar</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量对象在fn上下文执行过程中的执行阶段</span></span><br><span class="line"><span class="comment">// 变量对象变为活动对象，并完成赋值操作与执行可执行代码</span></span><br><span class="line"><span class="variable constant_">VO</span> -&gt; <span class="variable constant_">AO</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">AO</span>(fn) = &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">        <span class="attr">bar</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> a &#125;,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">length</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数自执行与块级作用域"><a href="#函数自执行与块级作用域" class="headerlink" title="函数自执行与块级作用域"></a>函数自执行与块级作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong>Jquery 模块闭包</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用函数自执行的方式创建模块</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span>, <span class="literal">undefined</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明jQuery构造函数</span></span><br><span class="line">     <span class="keyword">var</span> jQuery = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主动在构造函数中，返回一个jQuery实例</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> jQuery.<span class="property">fn</span>.<span class="title function_">init</span>(name);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加原型方法</span></span><br><span class="line">     jQuery.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span> = &#123;</span><br><span class="line">         <span class="attr">constructor</span>: jQuery,</span><br><span class="line">         <span class="attr">init</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123; ... &#125;,</span><br><span class="line">         <span class="attr">css</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     jQuery.<span class="property">fn</span>.<span class="property">init</span>.<span class="property"><span class="keyword">prototype</span></span> = jQuery.<span class="property">fn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将jQuery改名为$，并将引用保存在window上，形成闭包，对外开放jQuery构造函数，这样我们就可以访问所有挂载在jQuery原型上的方法了</span></span><br><span class="line">     <span class="variable language_">window</span>.<span class="property">jQuery</span> = <span class="variable language_">window</span>.<span class="property">$</span> = jQuery;</span><br><span class="line"> &#125;)(<span class="variable language_">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在使用时，直接执行了构造函数，因为在jQuery的构造函数中通过一些手段，返回的是jQuery的实例，所以我们就不用再每次用的时候自己new一个实例</span></span><br><span class="line">$(<span class="string">&#x27;#div1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>redux 模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自执行创建模块</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// states 结构预览</span></span><br><span class="line">  <span class="comment">// states = &#123;</span></span><br><span class="line">  <span class="comment">//     a: 1,</span></span><br><span class="line">  <span class="comment">//     b: 2,</span></span><br><span class="line">  <span class="comment">//     m: 30,</span></span><br><span class="line">  <span class="comment">//     o: &#123;&#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">var</span> states = &#123;&#125;; <span class="comment">// 私有变量，用来存储状态与数据</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断数据类型</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">type</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elem == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> elem + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toString</span><br><span class="line">      .<span class="title function_">call</span>(elem)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/[\[\]]/g</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">      .<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span> name 属性名</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> 通过属性名获取保存在states中的值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> states[name] ? states[name] : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getStates</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> states;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * @param options &#123;object&#125; 键值对</span></span><br><span class="line"><span class="comment">   * @param target &#123;object&#125; 属性值为对象的属性，只在函数实现时递归中传入</span></span><br><span class="line"><span class="comment">   * @desc 通过传入键值对的方式修改state树，使用方式与小程序的data或者react中的setStates类似</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">options, target</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(options);</span><br><span class="line">    <span class="keyword">var</span> o = target ? target : states;</span><br><span class="line"></span><br><span class="line">    keys.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> o[item] == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        o[item] = options[item];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">type</span>(o[item]) == <span class="string">&quot;object&quot;</span> ? <span class="title function_">set</span>(options[item], o[item]) : (o[item] = options[item]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对外提供接口</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">get</span> = get;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">set</span> = set;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">getStates</span> = getStates;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体使用如下</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">set</span>(&#123; <span class="attr">a</span>: <span class="number">20</span> &#125;); <span class="comment">// 保存 属性a</span></span><br><span class="line"><span class="title function_">set</span>(&#123; <span class="attr">b</span>: <span class="number">100</span> &#125;); <span class="comment">// 保存属性b</span></span><br><span class="line"><span class="title function_">set</span>(&#123; <span class="attr">c</span>: <span class="number">10</span> &#125;); <span class="comment">// 保存属性c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存属性o, 它的值为一个对象</span></span><br><span class="line"><span class="title function_">set</span>(&#123;</span><br><span class="line">  <span class="attr">o</span>: &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">n</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改对象o 的m值</span></span><br><span class="line"><span class="title function_">set</span>(&#123;</span><br><span class="line">  <span class="attr">o</span>: &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给对象o中增加一个c属性</span></span><br><span class="line"><span class="title function_">set</span>(&#123;</span><br><span class="line">  <span class="attr">o</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getStates</span>());</span><br></pre></td></tr></table></figure><h3 id="函数参数传递方式：按值传递"><a href="#函数参数传递方式：按值传递" class="headerlink" title="函数参数传递方式：按值传递"></a>函数参数传递方式：按值传递</h3><p>还记得基本数据类型与引用数据类型在复制上的差异吗？基本数据类型复制，是值直接发生了复制，因此改变后，各自相互不影响。但是引用数据类型的复制，是保存在变量对象中的引用发生了复制，因此复制之后的这两个引用实际访问的实际是同一个堆内存中的值。当改变其中一个时，另外一个自然也被改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">m</span>: <span class="number">10</span>, <span class="attr">n</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  a.<span class="property">m</span> = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &#123; m: 20, n: 20 &#125;</span></span><br></pre></td></tr></table></figure><p>正是由于这样的不同，导致了许多人在理解函数参数的传递方式时，就有许多困惑。到底是按值传递还是按引用传递？实际上结论仍然是按值传递，只不过当我们期望传递一个引用类型时，<strong>真正传递的，只是这个引用类型保存在变量对象中的引用而已</strong>。为了说明这个问题，我们看看下面这个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="comment">// 传入一个引用</span></span><br><span class="line">  obj = &#123;&#125;; <span class="comment">// 将传入的引用指向另外的值</span></span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>; <span class="comment">// 修改引用的name属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setName</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// Nicholas 未被改变</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，如果 person 是按引用传递，那么 person 就会自动被修改为指向其 name 属性值为 Gerg 的新对象。但是我们从结果中看到，person 对象并未发生任何改变，因此只是在函数内部引用被修改而已。</p><p><img src="https://i.bmp.ovh/imgs/2022/04/04/abde45131e6e2433.png"></p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>封装 – 调用</p><p><strong>函数是第一等公民</strong>。指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUser</span>(<span class="params">path, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $.<span class="title function_">get</span>(path, <span class="keyword">function</span> (<span class="params">info</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">callback</span>(info);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getUser</span>(<span class="string">&quot;/api/user&quot;</span>, <span class="keyword">function</span> (<span class="params">resp</span>) &#123;</span><br><span class="line">  <span class="comment">// resp为成功请求之后返回的数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(resp);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>优化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getUser = $.<span class="title function_">get</span>(path, callback);</span><br></pre></td></tr></table></figure><p>纯函数：不修改函数外部数据</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>this</title>
      <link href="/2021/10/17/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B8%83%EF%BC%89this/"/>
      <url>/2021/10/17/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B8%83%EF%BC%89this/</url>
      
        <content type="html"><![CDATA[<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p><img src="https://s2.loli.net/2023/03/05/gAQwalibW9X1nK3.webp"></p><p><strong>this 的指向，是在函数被调用的时候被确定的，也就是执行上下文被创建时确定的</strong></p><p>同一个函数，调用方式不同，this 指向也不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 10 window调用</span></span><br><span class="line">fn.<span class="title function_">call</span>(obj); <span class="comment">// 20 call指定this为obj</span></span><br></pre></td></tr></table></figure><p><strong>在函数执行过程中，this 一旦被确定，就不可更改了</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span> = obj; <span class="comment">// 这句话试图修改this，运行后会报错</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><h3 id="全局对象中的-this"><a href="#全局对象中的-this" class="headerlink" title="全局对象中的 this"></a>全局对象中的 this</h3><p>全局环境中的 this。指向它本身</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过this绑定到全局对象</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a2</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过声明绑定到变量对象，但在全局环境中，变量对象就是它自身</span></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅仅只有赋值操作，标识符会隐式绑定到全局对象</span></span><br><span class="line">a3 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果会全部符合预期</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo03</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">20</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span>); <span class="comment">// 40</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">fn</span>()); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>在函数上下文中，this 由调用者提供，由调用函数的方式来决定。<strong>严格模式下，如果调用者函数，被一个对象所拥有，那么该函数在调用时，内部的 this 指向该对象。如果函数独立调用，那么该函数内部的 this 指向 undefined。但在非严格模式，当 this 指向 undefined 时，this 会指向全局对象</strong></p><p>demo03</p><p>单独的<code>&#123;&#125;</code>不会形成新的作用域，因此这里的<code>this.a</code>，由于并没有作用域的限制，它仍然处于全局作用域之中。所以这里的 this 其实是指向的 window 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">20</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()); <span class="comment">// TypeError: Cannot read properties of undefined (reading &#x27;a&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="title function_">foo</span>()); <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><p>严格模式 this 指向 undefined</p><p><strong>注意，无论是否严格模式，全局声明的变量都会变成 window 对象上的属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">getA</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">getA</span>()); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = foo.<span class="property">getA</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>()); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">getA</span>: getA,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">getA</span>()); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="使用-call、apply-显示指定-this"><a href="#使用-call、apply-显示指定-this" class="headerlink" title="使用 call、apply 显示指定 this"></a>使用 call、apply 显示指定 this</h3><p><code>function.call(object, params, params, ...)</code></p><p><code>function.apply(object, [params, params, ...])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span> + num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(obj, <span class="number">100</span>, <span class="number">10</span>); <span class="comment">// 130</span></span><br><span class="line">fn.<span class="title function_">apply</span>(obj, [<span class="number">20</span>, <span class="number">10</span>]); <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>使用场景：</p><h4 id="将类数组对象转换为数组"><a href="#将类数组对象转换为数组" class="headerlink" title="将类数组对象转换为数组"></a>将类数组对象转换为数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">exam</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arg = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">exam</span>(<span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [ 2, 8, 9, 10, 3 ]</span></span><br></pre></td></tr></table></figure><h4 id="根据自己的需要灵活修改-this-指向"><a href="#根据自己的需要灵活修改-this-指向" class="headerlink" title="根据自己的需要灵活修改 this 指向"></a>根据自己的需要灵活修改 this 指向</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;joker&quot;</span>,</span><br><span class="line">  <span class="attr">showName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;rose&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">foo.<span class="property">showName</span>.<span class="title function_">call</span>(bar);</span><br></pre></td></tr></table></figure><h4 id="实现继承"><a href="#实现继承" class="headerlink" title="实现继承"></a>实现继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父级的构造函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = [<span class="string">&quot;man&quot;</span>, <span class="string">&quot;woman&quot;</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义子类的构造函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = <span class="keyword">function</span> (<span class="params">name, age, high</span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">high</span> = high;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">message</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;, age:&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;, high:&quot;</span> + <span class="variable language_">this</span>.<span class="property">high</span> + <span class="string">&quot;, gender:&quot;</span> + <span class="variable language_">this</span>.<span class="property">gender</span>[<span class="number">0</span>] + <span class="string">&quot;;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xiaom&quot;</span>, <span class="number">12</span>, <span class="string">&quot;150cm&quot;</span>).<span class="title function_">message</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="comment">// name:xiaom, age:12, high:150cm, gender:man;</span></span><br></pre></td></tr></table></figure><p>在 Student 的构造函数中，借助 call 方法，将父级的构造函数执行了一次，相当于将 Person 中的代码，在 Sudent 中复制了一份，其中的 this 指向为从 Student 中 new 出来的实例对象。call 方法保证了 this 的指向正确，因此就相当于实现了继承。Student 的构造函数等同于下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Student</span> = <span class="keyword">function</span> (<span class="params">name, age, high</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = [<span class="string">&quot;man&quot;</span>, <span class="string">&quot;woman&quot;</span>];</span><br><span class="line">  <span class="comment">// Person.call(this, name, age); 这一句话，相当于上面三句话，因此实现了继承</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">high</span> = high;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="在向其他执行上下文的传递中，确保-this-的指向保持不变"><a href="#在向其他执行上下文的传递中，确保-this-的指向保持不变" class="headerlink" title="在向其他执行上下文的传递中，确保 this 的指向保持不变"></a>在向其他执行上下文的传递中，确保 this 的指向保持不变</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">getA</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">getA</span>();</span><br></pre></td></tr></table></figure><p>闭包与 apply 方法，封装一个 bind 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">fn, obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">funcrion</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">apply</span>(obj,<span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">getA</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="title function_">bind</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">    &#125;, <span class="variable language_">this</span>), <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">getA</span>();</span><br></pre></td></tr></table></figure><p>同 ES5 中的 bind 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">getA</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(</span><br><span class="line">      <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">      &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>),</span><br><span class="line">      <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>ES6 中也常常使用箭头函数的方式来替代这种方案</strong></p><h3 id="构造函数与原型方法上的-this"><a href="#构造函数与原型方法上的-this" class="headerlink" title="构造函数与原型方法上的 this"></a>构造函数与原型方法上的 this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里的this指向了谁?</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这里的this又指向了谁？</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的2个this，是同一个吗，他们是否指向了原型对象？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Nick&quot;</span>, <span class="number">20</span>);</span><br><span class="line">p1.<span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure><p>通过 new 操作符调用构造函数，会经历以下 4 个阶段。</p><ul><li>创建一个新的对象；</li><li>将构造函数的 this 指向这个新对象；</li><li>指向构造函数的代码，为这个对象添加属性，方法等；</li><li>返回新对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout与循环闭包</title>
      <link href="/2021/10/16/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%85%AD%EF%BC%89setTimeout%E4%B8%8E%E5%BE%AA%E7%8E%AF%E9%97%AD%E5%8C%85/"/>
      <url>/2021/10/16/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%85%AD%EF%BC%89setTimeout%E4%B8%8E%E5%BE%AA%E7%8E%AF%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>执行上下文，采用函数调用栈这种特殊的数据结构的调用特性。</p><p>setTimeout 采用队列结构，页面中所有由 setTimeout 定义的操作，都将放在同一个队列中依次执行。</p><p><img src="https://s2.loli.net/2023/03/05/opT9YwiFQBy1lnG.webp"></p><p>队列执行，需要等待函数调用栈清空之后才开始执行。即所有可执行代码执行完毕之后，才会开始执行由 setTimeout 定义的操作。而这些操作进入队列的顺序，则由设定的延迟时间来决定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTImeout 10ms.&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout 20ms.&quot;</span>);</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/hVzmswRqXW4ONy9.webp"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2021/10/15/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%BA%94%EF%BC%89%E9%97%AD%E5%8C%85/"/>
      <url>/2021/10/15/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%BA%94%EF%BC%89%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p><strong>闭包是一种特殊对象</strong></p><p><strong>它由两部分组成。执行上下文 A，以及 A 中所创建的函数 B</strong></p><p><strong>当 B 在执行时，访问了 A 中变量对象的值，闭包由此产生</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo01</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure><p>上面的例子，首先有执行上下文 foo，在 foo 中定义了函数 bar，而通过对外返回 bar 的方式让 bar 得以执行。当 bar 执行时，访问了 foo 内部的变量 a，b。因此这个时候闭包产生。</p><p>闭包的产生，导致引用始终存在，会阻止 JavaScript 垃圾回收，延长变量的生命周期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innnerFoo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn = innnerFoo; <span class="comment">// 将 innnerFoo的引用，赋值给全局变量中的fn</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fn</span>(); <span class="comment">// 此处的保留的innerFoo的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>闭包 foo 的作用域链：</p><p><img src="https://s2.loli.net/2023/03/05/di1xyfKZC9YDS3M.webp"></p><p><strong>通过闭包，我们可以在其他的执行上下文中，访问到函数内部的变量，但是闭包的作用域并不会发生变化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innnerFoo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 在这里，试图访问函数bar中的c变量，会抛出错误</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  &#125;</span><br><span class="line">  fn = innnerFoo; <span class="comment">// 将 innnerFoo的引用，赋值给全局变量中的fn</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">100</span>;</span><br><span class="line">  <span class="title function_">fn</span>(); <span class="comment">// 此处的保留的innerFoo的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure><h3 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h3><ul><li><p><strong>柯里化</strong></p></li><li><p><strong>模块化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">  var a = 10;</span><br><span class="line">  var b = 20;</span><br><span class="line"></span><br><span class="line">  function add(num1, num2) &#123;</span><br><span class="line">    var num1 = !!num1 ? num1 : a;</span><br><span class="line">    var num2 = !!num2 ? num2 : b;</span><br><span class="line"></span><br><span class="line">    return num1 + num2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  window.add = add;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">add(10, 20);</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/pyT9x17QY3JRcEI.webp"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>作用域与作用域链</title>
      <link href="/2021/10/15/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%9B%9B%EF%BC%89%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
      <url>/2021/10/15/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E5%9B%9B%EF%BC%89%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h1><h3 id="词法环境（Lexical-Environments）"><a href="#词法环境（Lexical-Environments）" class="headerlink" title="词法环境（Lexical Environments）"></a>词法环境（Lexical Environments）</h3><blockquote><p>官方规范说明：词法环境是一种规范类型，用于根据 ECMAScript 代码的词法嵌套结构来定义标识符与特定变量和函数的关联。</p></blockquote><p>通俗来说，词法环境就是一套约定好的规则。我们写代码，应该按照这个规则来。JS 引擎对 JS 源码进行词法分析，也是按照这个规则来。</p><p><strong>词法环境，其实就是作用域</strong></p><p>结论：</p><p>一、在 JavaScript 中，可以将作用域定义为<strong>一套规则</strong>，这套规则用来管理 JS 引擎如何在<strong>作用域以及嵌套的子作用域</strong>中根据<strong>标识符名</strong>进行<strong>变量查找</strong></p><blockquote><p>这里的标识符，指的是变量名或者函数名</p></blockquote><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域和作用域链不同</p><p>作用域是一套规则</p><p>作用域链是作用域的具体实现</p><p><strong>作用域链，是由当前环境与上层环境的一系列变量对象组成，保证了当前环境对符合访问权限的变量和函数的有序访问。</strong></p><p>作用域链，在函数声明阶段确认。如果要结合 JavaScript 引擎来理解的话，作用域链，是在代码解析阶段确认的。</p><p>栗子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var a = 20;</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">  var b = a + 10;</span><br><span class="line"></span><br><span class="line">  function innerTest() &#123;</span><br><span class="line">    var c = 10;</span><br><span class="line">    return b + c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return innerTest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>变量对象</title>
      <link href="/2021/10/14/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B8%89%EF%BC%89%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/10/14/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B8%89%EF%BC%89%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h1><h3 id="执行上下文生命周期"><a href="#执行上下文生命周期" class="headerlink" title="执行上下文生命周期"></a>执行上下文生命周期</h3><ul><li><p><strong>创建阶段</strong></p><p>执行上下文创建变量对象，确定 this 指向，以及其他所要确定的状态</p></li><li><p><strong>代码执行阶段</strong></p><p>开始执行代码，完成变量赋值，以及执行其他代码</p></li><li><p><strong>销毁阶段</strong></p><p>可执行代码执行完毕，执行上下文出栈，对应内存空间失去引用，等待被回收</p></li></ul><h3 id="变量对象-VO"><a href="#变量对象-VO" class="headerlink" title="变量对象 VO"></a>变量对象 VO</h3><ul><li><p><strong>建立 arguments 对象</strong></p><p>检查当前上下文中的参数，建立该对象下的属性与属性值</p><blockquote><p><strong>函数参数</strong></p></blockquote></li><li><p><strong>检查函数声明</strong></p><p>在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用</p></li><li><p><strong>检查变量声明</strong></p><p>每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为 undefined，const&#x2F;let 声明的变量没有赋值，不能提前使用</p><blockquote><p>如果 var 变量与函数同名，则在这个阶段，以函数值为准，在下一个阶段[<strong>执行</strong>]，函数值会被变量值覆盖。（函数声明的优先级高于变量声明）</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// function foo</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上栗的执行顺序为</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先将所有函数声明放入变量对象中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其次将所有变量声明放入变量对象中，但是因为foo已经存在同名函数，此时以函数值为准，而不会被undefined覆盖</span></span><br><span class="line"><span class="comment">// var foo = undefined;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后开始执行阶段代码的执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// function foo</span></span><br><span class="line">foo = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/9qUB3izpGeWQ4jV.webp" alt="J7ADX.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo01</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建过程</span></span><br><span class="line">testEC = &#123;</span><br><span class="line">    <span class="comment">// 变量对象</span></span><br><span class="line">    <span class="attr">VO</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">scopeChain</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为本文暂时不详细解释作用域链，所以把变量对象专门提出来说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// VO 为 Variable Object的缩写，即变量对象</span></span><br><span class="line"><span class="variable constant_">VO</span> = &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;...&#125;,  <span class="comment">//注：在浏览器的展示中，函数的参数可能并不是放在arguments对象中，这里为了方便理解，我做了这样的处理</span></span><br><span class="line">    <span class="attr">foo</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">reference</span>&gt;</span>  // 表示foo的地址引用</span></span><br><span class="line"><span class="language-xml">    a: undefined</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="活动对象-AO"><a href="#活动对象-AO" class="headerlink" title="活动对象 AO"></a>活动对象 AO</h3><p><strong>未进入执行阶段之前，变量对象中的属性都不能访问！</strong></p><p>但是进入执行阶段之后，变量对象转变为了活动对象，里面的属性都能被访问了，然后开始进行执行阶段的操作。</p><blockquote><p>变量对象和活动对象他们其实都是同一个对象，只是处于执行上下文的不同生命周期。不过只有处于函数调用栈栈顶的执行上下文中的变量对象，才会变成活动对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行阶段</span></span><br><span class="line"><span class="variable constant_">VO</span> -&gt;  <span class="variable constant_">AO</span>   <span class="comment">// Active Object</span></span><br><span class="line"><span class="variable constant_">AO</span> = &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">foo</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">reference</span>&gt;</span>,</span></span><br><span class="line"><span class="language-xml">    a: 1,</span></span><br><span class="line"><span class="language-xml">    this: Window</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>demo1 执行顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>());</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><h3 id="全局上下文的变量对象"><a href="#全局上下文的变量对象" class="headerlink" title="全局上下文的变量对象"></a>全局上下文的变量对象</h3><p>全局上下文有一个特殊的地方，它的变量对象，就是 window 对象。而这个特殊，在 this 指向上也同样适用，this 也是指向 window。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以浏览器中为例，全局对象为window</span></span><br><span class="line"><span class="comment">// 全局上下文</span></span><br><span class="line">windowEC = &#123;</span><br><span class="line">  <span class="attr">VO</span>: <span class="title class_">Window</span>,</span><br><span class="line">  <span class="attr">scopeChain</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">this</span>: <span class="title class_">Window</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="let-x2F-const"><a href="#let-x2F-const" class="headerlink" title="let&#x2F;const"></a>let&#x2F;const</h3><p><strong>let&#x2F;const 声明的变量，是否还会变量提升？</strong></p><p>第一步，我们直接使用一个未定义的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>报错信息如下：</p><p><img src="https://s2.loli.net/2023/03/05/ajqSVy6FIt4TEXl.webp" alt="J7cL0.png"></p><p>第二步，我们在 let 之前调用变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>报错信息如下：</p><p><img src="https://s2.loli.net/2023/03/05/OiKbLBcafvVIgjz.webp" alt="J7Yvv.png"></p><p><strong>不能在初始化之前访问 a</strong></p><blockquote><p>let&#x2F;const 声明的变量，仍然会提前被收集到变量对象中，但和 var 不同的是，let&#x2F;const 定义的变量，不会在这个时候给他赋值 undefined。</p><p>因为完全没有赋值，即使变量提升了，我们也不能在赋值之前调用他。这就是我们常说的<strong>暂时性死区</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>执行上下文详细图解</title>
      <link href="/2021/10/13/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%BA%8C%EF%BC%89%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3/"/>
      <url>/2021/10/13/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%BA%8C%EF%BC%89%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h1><p><strong>执行上下文（Execution Context）</strong>：每次当控制器转到<strong>可执行</strong>代码的时候，就会进入一个执行上下文。执行上下文可以理解成代码的<strong>执行环境</strong>，会形成<strong>作用域</strong>。JavaScript 中的三大 运行环境大概包括三种情况。</p><ul><li><strong>全局环境</strong>：JavaScript 代码运行起来首先进入的环境</li><li><strong>函数环境</strong>：当函数被调用执行时，会进入当前函数中的执行代码</li><li>eval（不要建议使用，可忽略）</li></ul><p>一个 JavaScript 程序中会产生多个执行上下文，JavaScript 引擎以<strong>栈</strong>的形式来处理他们。这个栈，我们称其为<strong>函数调用栈</strong>（call stack）<strong>栈底永远都是全局上下文，而栈顶就是当前正在执行的上下文</strong>。</p><p>代码执行过程：生成执行上下文，入栈，处于栈顶的上下文执行完毕后，自动出栈</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> anotherColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">swapColors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tempColor = anotherColor;</span><br><span class="line">    anotherColor = color;</span><br><span class="line">    color = tempColor;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">swapColors</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeColor</span>();</span><br></pre></td></tr></table></figure><p><strong>执行上下文总结</strong></p><ul><li>单线程</li><li>同步执行，只有栈顶的上下文处于执行中，其他上下文需要等待</li><li>全局上下文只有唯一的一个，它在浏览器关闭时出栈</li><li>函数的执行上下文的个数没有限制</li><li>每次某个函数被调用，就会有个新的执行上下文为其创建，即使是调用的自身函数，也是如此。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">result</span>(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure><p>因为 f1 中的函数 f2 在 f1 的可执行代码中，并没有被调用执行，因此执行 f1 时，f2 不会创建新的上下文，而直到 result 执行时，才创建了一个新的。具体演变过程如下。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内存空间详细图解</title>
      <link href="/2021/10/12/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B8%80%EF%BC%89%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3/"/>
      <url>/2021/10/12/JS/%E6%A0%B8%E5%BF%83/%EF%BC%88%E4%B8%80%EF%BC%89%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="内存空间详细图解"><a href="#内存空间详细图解" class="headerlink" title="内存空间详细图解"></a>内存空间详细图解</h1><p>JavaScript 具有自动垃圾回收机制，周期性运行，进行回收内存空间中不在被使用的变量以及资源</p><p>内存空间 关系着 <strong>引用数据类型、引用传递、浅复制、深复制以及闭包等等</strong></p><p>说到内存必要提及的便是 三种数据结构 <strong>栈（stack）、队列（queue）、堆（heap）</strong></p><h3 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h3><p>JavaScript 中没有严格意义上区分<strong>栈内存</strong>和<strong>堆内存</strong></p><blockquote><p>栈内存维护<strong>基础数据类型</strong>，堆内存维护<strong>引用数据类型</strong></p><p>栈内存是从<strong>地址高位</strong>开始分配，堆内存从<strong>地址低位</strong>开始分配</p></blockquote><p>JavaScript 的执行上下文的执行顺序借用了栈数据结构的存取方式（函数调用栈）</p><p><strong>先进后出</strong></p><h3 id="二、堆"><a href="#二、堆" class="headerlink" title="二、堆"></a>二、堆</h3><p><strong>树状结构</strong></p><h3 id="三、队列"><a href="#三、队列" class="headerlink" title="三、队列"></a>三、队列</h3><p><strong>先进先出</strong></p><p>事件循环（Event Loop）</p><h3 id="四、变量对象（环境记录对象）"><a href="#四、变量对象（环境记录对象）" class="headerlink" title="四、变量对象（环境记录对象）"></a>四、变量对象（环境记录对象）</h3><p>JavaScript 的执行上下文生成之后，会创建一个叫做变量对象的特殊对象，囊括上下文中所有的变量以及函数</p><h3 id="五、引用数据类型与堆内存"><a href="#五、引用数据类型与堆内存" class="headerlink" title="五、引用数据类型与堆内存"></a>五、引用数据类型与堆内存</h3><p>例如一些 数组、对象类型的变量 在 变量对象 中以地址（推内存中实际存储地址）的形保存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = <span class="number">0</span>; <span class="comment">// 变量对象</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="string">&quot;this is string&quot;</span>; <span class="comment">// 变量对象</span></span><br><span class="line"><span class="keyword">var</span> a3 = <span class="literal">null</span>; <span class="comment">// 变量对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">m</span>: <span class="number">20</span> &#125;; <span class="comment">// 变量b存在于变量对象中，&#123;m: 20&#125; 作为对象存在于堆内存中</span></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 变量c存在于变量对象中，[1, 2, 3] 作为对象存在于堆内存中</span></span><br></pre></td></tr></table></figure><p>当我们去访问引用数据类型时，实际上是先从变量对象中获取地址引用（或者地址指针）再从堆内存中取数据</p><h3 id="六、内存空间管理"><a href="#六、内存空间管理" class="headerlink" title="六、内存空间管理"></a>六、内存空间管理</h3><p>JavaScript 的内存生命周期</p><ul><li>分配你所需要的内存</li><li>使用分配到的内存（读、写）</li><li>不需要时将其释放、归还</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>; <span class="comment">// 在内存中给数值变量分配空间</span></span><br><span class="line"><span class="title function_">alert</span>(a + <span class="number">100</span>); <span class="comment">// 使用内存</span></span><br><span class="line">a = <span class="literal">null</span>; <span class="comment">// 使用完毕之后，释放内存空间</span></span><br></pre></td></tr></table></figure><p>JavaScript 自动垃圾收集机制的原理：就是找出那些不再继续使用的值，然后释放其占用的内存。垃圾收集器会每隔固定的时间段就执行一次释放操作。</p><p>最常用的是通过<strong>标记清除</strong>的算法</p><p><code>a = null</code> 实际就是释放引用，适当的释放引用可以提高性能</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> 核心 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
